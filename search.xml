<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>HiveSQL性能调优</title>
      <link href="2021/09/04/hivesql-xing-neng-diao-you/"/>
      <url>2021/09/04/hivesql-xing-neng-diao-you/</url>
      
        <content type="html"><![CDATA[<h2 id="Hive-SQL和Spark-SQL"><a href="#Hive-SQL和Spark-SQL" class="headerlink" title="Hive SQL和Spark SQL"></a>Hive SQL和Spark SQL</h2><p>Hive作为基于Hadoop的一个数据库管理工具，其底层是基于MapReduce实现的，用户写的SQL语句最终会转化为MapReduce任务提交到hadoop运行。不过由于MapReduce速度比较慢（MapReduce计算过程中大量的中间磁盘落地过程会消耗大量I/O，降低运行效率），因此，近几年陆续出来一些新的SQL查询引擎，比如Spark SQL，Hive On Tez，Hive On Spark等。比如现在常用的Spark SQL，是Spark自己研发出来的针对Hive、JSON、Parquet、JDBC、RDD等各种数据源的，基于Spark计算引擎的查询引擎，本身兼容Hive。</p><h2 id="HIve-SQL优化基本思想"><a href="#HIve-SQL优化基本思想" class="headerlink" title="HIve SQL优化基本思想"></a>HIve SQL优化基本思想</h2><p>由于Hive SQL会以MapReduce任务提交到hadoop运行，所以性能瓶颈主要在4个地方：</p><ul><li>Map task：select 等数据读取的操作，从磁盘中将数据读入内存</li><li>Reduce task：group by/order by 等聚合排序操作</li><li>Join task：Join 等表关联操作</li><li>Merge task：无对应代码，是小文件合并任务</li></ul><p>数据量大对于Hive SQL（或Spark SQL）来说并不是主要挑战，最怕的是数据倾斜、数据冗余、job或I/O过多、MapReduce分配不合理等，如果能将数据比较合理的分配到各个计算节点上，计算压力并不会很大，但是如果很多task都被分配到一个节点上，这样分布式计算的优势就发挥不出来，这种最直接的表现就是计算卡在99%（或其他某个数字）不动，看任务只有一两个task就结束，实则可能得等到天荒地老，同样，如果有很多小文件，很多IO，也会造成性能下降。</p><p>当然也不是说数据量可以一味的增大，更多数据会增加磁盘IO（特别是MR），另外还会增加网络IO，所以能减少无用的计算就优先过滤掉。</p><h2 id="HIve-SQL优化"><a href="#HIve-SQL优化" class="headerlink" title="HIve SQL优化"></a>HIve SQL优化</h2><h3 id="SQL写法上的优化"><a href="#SQL写法上的优化" class="headerlink" title="SQL写法上的优化"></a>SQL写法上的优化</h3><h4 id="map-task优化"><a href="#map-task优化" class="headerlink" title="map task优化"></a>map task优化</h4><ul><li><strong>尽早使用where条件</strong>：提前把不需要计算的数据过滤掉，而不是在进行复杂操作后再集中过滤。</li><li><strong>使用分区裁剪</strong>：Hive不同分区是按照不同目录存放的，指定分区可以访问特定的目录，减少数据量。</li><li><strong>使用列裁剪</strong>：尽量不要使用select * from …，指定特定列会只扫描特定列而不扫描全表，提高执行速度，同时select * 会让优化器无法完成索引覆盖扫描这类优化，会影响优化器对执行计划的选择，也会增加网络带宽消耗，更会带来额外的 I/O，内存和 CPU 消耗。</li><li><strong>相似任务尽量使用多路输出</strong>：相同的计算只需要计算一次，减少重复计算，同时也能减少reduce task</li><li><strong>减少case when中的when</strong>：表中的文件都需要走一遍when流程，when越多效率就越低，而且在reduce阶段最好做一遍合并压缩操作，否则可能会产生很多文件。</li></ul><h4 id="reduce-task优化"><a href="#reduce-task优化" class="headerlink" title="reduce task优化"></a>reduce task优化</h4><ul><li><strong>使用 group by 代替 distinct</strong>：因为distinct会把所有任务都分配到一个reduce task中。</li><li><strong>使用 sort by + distribute by代替 order by</strong>：order by 和 distinct 类似，在reduce阶段都会把所有的任务集中到一个reduce task中计算，使用 sort by 和 distribute by 后MR会根据情况启动多个reduce来排序，不过记得一定要加distribute by，否则map后的数据会随机分配到reducer中，不能保证全局有序。</li><li><strong>尽量使用union all代替union</strong>：union去重，有shuffle，union all不去重，无shuffle，shuffle会造成数据在集群中传输，并且伴随着读和写，很影响任务的执行性能。如果要去重，可以最后用group by。</li></ul><h4 id="join-task过程优化"><a href="#join-task过程优化" class="headerlink" title="join task过程优化"></a>join task过程优化</h4><ul><li><strong>避免使用笛卡尔积</strong>：尽量有关联键，hive本身不支持笛卡尔积，需要先用set hive.mapred.mode=nonstrict设为非strict模式。</li><li><strong>多表join查询时，小表在前，大表在后</strong>，Hive在解析带join的SQL语句时，会默认将最后一个表作为probe table（大表），将前面的表作为build table（小表）并试图将它们读进内存（是否读入内存可以配置）。如果表顺序写反，probe table在前面，有引发OOM的风险。</li><li><strong>小表超出内存限制，采用多次join</strong>：build table没有小到可以直接读如内存，但是相比probe table又很小，可以将build table拆成几个表，分别join。</li><li><strong>小表join大表，尽量使用map join</strong>：将build table和probe table在map端直接完成join过程，没有了reduce，效率高很多。</li><li><strong>多表join时如果允许尽量使用相同的key</strong>：这样会将多个join合并为一个MR job来处理。</li><li><strong>join时保证关联键类型相同</strong>：如果不同时也适用cast进行转换，否者会导致另外一个类型的key分配到一个reducer上。</li><li><strong>join的时候如果关联健某一类值较多先过滤</strong>：比如空值、0等，因为这会导致某一个reducer的计算量变得很大，可以单独处理倾斜key。</li><li><strong>left semi join 代替join判断in和exists</strong>：hive0.13前不支持在where 中使用in嵌套查询是否exists，使用left semi join代替join。</li></ul><h3 id="参数配置上的优化"><a href="#参数配置上的优化" class="headerlink" title="参数配置上的优化"></a>参数配置上的优化</h3><h4 id="小表join时尽量开启map-join"><a href="#小表join时尽量开启map-join" class="headerlink" title="小表join时尽量开启map join"></a>小表join时尽量开启map join</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>auto<span class="token punctuation">.</span><span class="token keyword">convert</span><span class="token punctuation">.</span><span class="token keyword">join</span><span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 版本0.11.0之后，默认是开启状态的，但时不时会把这个配置关闭，所以最好还是手动配置一下</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapjoin<span class="token punctuation">.</span>smalltable<span class="token punctuation">.</span>filesize<span class="token operator">=</span><span class="token number">25000000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 默认是25Mb开启mapjoin，对于稍微超过这大小的，可以适当调大，但不能太大</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="调整map数"><a href="#调整map数" class="headerlink" title="调整map数"></a>调整map数</h4><p>如果输入文件是少量大文件，就减少mapper数；如果输入文件是大量大文件，就增大mapper数；如果是大量的小文件就先合并小文件。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>min<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">10000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 最小分片大小</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>max<span class="token punctuation">.</span>split<span class="token punctuation">.</span>size<span class="token operator">=</span><span class="token number">10000000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 最大分片大小</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>map<span class="token punctuation">.</span>tasks<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 设置map task任务数</span>map任务数计算规则：map_num <span class="token operator">=</span> <span class="token function">MIN</span><span class="token punctuation">(</span>split_num<span class="token punctuation">,</span> <span class="token function">MAX</span><span class="token punctuation">(</span>default_num<span class="token punctuation">,</span> mapred<span class="token punctuation">.</span>map<span class="token punctuation">.</span>tasks<span class="token punctuation">)</span><span class="token punctuation">)</span>，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="合并小文件"><a href="#合并小文件" class="headerlink" title="合并小文件"></a>合并小文件</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>input<span class="token punctuation">.</span>format <span class="token operator">=</span> org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>hive<span class="token punctuation">.</span>ql<span class="token punctuation">.</span>io<span class="token punctuation">.</span>CombineHiveInputFormat<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 输入阶段合并小文件</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapredfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 输出阶段小文件合并</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启map端合并小文件，默认开启</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>mapredfiles<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启reduce端合并小文件</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">merge</span><span class="token punctuation">.</span>smallfiles<span class="token punctuation">.</span>avgsize<span class="token operator">=</span><span class="token number">16000000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 平均文件大小，默认16M，满足条件则自动合并，只有在开启merge.mapfiles和merge.mapredfiles两个开关才有效</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="启用压缩"><a href="#启用压缩" class="headerlink" title="启用压缩"></a>启用压缩</h4><p>压缩可以减少数据量，进而减少磁盘和网络IO。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>intermediate<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启输入压缩</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>compress<span class="token punctuation">.</span>output<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启输出压缩</span><span class="token keyword">set</span> sethive<span class="token punctuation">.</span>intermediate<span class="token punctuation">.</span>compression<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>SnappyCodec<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 使用Snappy压缩</span><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>output<span class="token punctuation">.</span>compreession<span class="token punctuation">.</span>codec<span class="token operator">=</span>org<span class="token punctuation">.</span>apache<span class="token punctuation">.</span>hadoop<span class="token punctuation">.</span>io<span class="token punctuation">.</span>compress<span class="token punctuation">.</span>GzipCodec<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 使用Gzip压缩</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>intermediate<span class="token punctuation">.</span>compression<span class="token punctuation">.</span><span class="token keyword">type</span><span class="token operator">=</span>BLOCK<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 配置压缩对象 快或者记录</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分桶设置"><a href="#分桶设置" class="headerlink" title="分桶设置"></a>分桶设置</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>bucketing<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>enforce<span class="token punctuation">.</span>sorting<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="设置合适的数据存储格式"><a href="#设置合适的数据存储格式" class="headerlink" title="设置合适的数据存储格式"></a>设置合适的数据存储格式</h4><p>hive默认的存储格式是TextFile,但是这种文件格式不使用压缩，会占用比较大空间，目前支持的存储格式有SequenceFile、RCFile、Avro、ORC、Parquet，这些存储格式基本都会采用压缩方式，而且是列式存储.</p><pre class="line-numbers language-sql"><code class="language-sql">如指定用orc存储格式<span class="token keyword">ROW</span> FORMAT SERDE <span class="token string">'org.apache.hadoop.hive.ql.io.orc.OrcSerde'</span>STORED <span class="token keyword">AS</span> INPUTFORMAT <span class="token string">'org.apache.hadoop.hive.ql.io.orc.OrcInputFormat'</span> OUTPUTFORMAT <span class="token string">'org.apache.hadoop.hive.ql.io.orc.OrcOutputFormat'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="并行化执行"><a href="#并行化执行" class="headerlink" title="并行化执行"></a>并行化执行</h4><p>每个查询被hive转化成多个阶段，有些阶段关联性不大，则可以并行化执行，减少执行时间，主要针对uoion 操作</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启并行模式</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>parallel<span class="token punctuation">.</span>thread<span class="token punctuation">.</span>numbe<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 设置并行执行的线程数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="本地化执行"><a href="#本地化执行" class="headerlink" title="本地化执行"></a>本地化执行</h4><p>本地模式主要针对数据量小，操作不复杂的SQL。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启本地执行模模式</span>需要满足的条件：job的输入数据大小必须小于参数:hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>inputbytes<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>默认128MB<span class="token punctuation">)</span>job的map数必须小于参数:hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>mode<span class="token punctuation">.</span><span class="token keyword">local</span><span class="token punctuation">.</span>auto<span class="token punctuation">.</span>tasks<span class="token punctuation">.</span><span class="token function">max</span><span class="token punctuation">(</span>默认<span class="token number">4</span><span class="token punctuation">)</span>job的reduce数必须为<span class="token number">0</span>或者<span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="使用严格模式"><a href="#使用严格模式" class="headerlink" title="使用严格模式"></a>使用严格模式</h4><p>严格模式主要是防范用户的不规范操作造成集群压力过大，甚至是不可用的情况，只对三种情况起左右，分别是查询分区表是不指定分区；两表join时产生笛卡尔积；使用了order by 排序但是没有limit关键字。</p><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>mapred<span class="token punctuation">.</span>mode<span class="token operator">=</span>strict<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 开启严格模式</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="map端预聚合"><a href="#map端预聚合" class="headerlink" title="map端预聚合"></a>map端预聚合</h4><pre class="line-numbers language-sql"><code class="language-sql">。预聚合的配置项是<span class="token keyword">set</span> hive<span class="token punctuation">.</span>map<span class="token punctuation">.</span>aggr<span class="token operator">=</span><span class="token boolean">true</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- group by时，如果先起一个combiner在map端做部分预聚合，使用这个配置项可以有效减少shuffle数据量，默认值true</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>mapaggr<span class="token punctuation">.</span>checkinterval<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 也可以设置map端预聚合的行数阈值，超过该值就会分拆job，默认值100000</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="倾斜均衡配置项"><a href="#倾斜均衡配置项" class="headerlink" title="倾斜均衡配置项"></a>倾斜均衡配置项</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span>groupby<span class="token punctuation">.</span>skewindata<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- group by时如果某些key对应的数据量过大，就会发生数据倾斜。Hive自带了一个均衡数据倾斜的配置项，默认值false</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h4 id="动态分区配置"><a href="#动态分区配置" class="headerlink" title="动态分区配置"></a>动态分区配置</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 是否开启动态分区功能，默认false关闭</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token punctuation">.</span>mode<span class="token operator">=</span>strict<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 动态分区的模式，默认strict，表示必须指定至少一个分区为静态分区，nonstrict模式表示允许所有的分区字段都可以使用动态分区</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token punctuation">.</span>pernode<span class="token operator">=</span><span class="token number">100</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 在每个执行MR的节点上，最大可以创建多少个动态分区,根据实际的数据来设定，比如hour必须大于等于24，day必须大于365</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>dynamic<span class="token punctuation">.</span>partitions<span class="token operator">=</span><span class="token number">1000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 在所有执行MR的节点上，最大一共可以创建多少个动态分区</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span><span class="token keyword">exec</span><span class="token punctuation">.</span>max<span class="token punctuation">.</span>created<span class="token punctuation">.</span>files<span class="token operator">=</span><span class="token number">100000</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 整个MR Job中，最大可以创建多少个HDFS文件</span><span class="token keyword">set</span> hive<span class="token punctuation">.</span>error<span class="token punctuation">.</span><span class="token keyword">on</span><span class="token punctuation">.</span>empty<span class="token punctuation">.</span><span class="token keyword">partition</span><span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 当有空分区生成时，是否抛出异常</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="JVM重用"><a href="#JVM重用" class="headerlink" title="JVM重用"></a>JVM重用</h4><pre class="line-numbers language-sql"><code class="language-sql"><span class="token keyword">set</span> mapred<span class="token punctuation">.</span>job<span class="token punctuation">.</span>reuse<span class="token punctuation">.</span>jvm<span class="token punctuation">.</span>num<span class="token punctuation">.</span>tasks<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">-- 在MR job中，默认是每执行一个task就启动一个JVM。如果task非常小而碎，那么JVM启动和关闭的耗时就会很长。可以通过调节参数这个参数来重用。例如将这个参数设成5，就代表同一个MR job中顺序执行的10个task可以重复使用一个JVM，减少启动和关闭的开销。但它对不同MR job中的task无效。</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="附：Mysql常用调优技巧："><a href="#附：Mysql常用调优技巧：" class="headerlink" title="附：Mysql常用调优技巧："></a>附：Mysql常用调优技巧：</h2><h3 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h3><ul><li><strong>避免在字段开头模糊查询</strong>，会导致数据库引擎放弃索引进行全表扫描（like ‘%数%’ 改成like ‘数%’）</li><li><strong>避免使用 in 和 not in</strong>，会导致引擎走全表扫描（id IN (2,3) 改为 id BETWEEN 2 AND 3）</li><li><strong>避免使用 or</strong>，会导致数据库引擎放弃索引进行全表扫描（id = 1 OR id = 3 改成 select … id = 1 union select … id = 3）</li><li><strong>避免进行 null 值的判断</strong>，会导致数据库引擎放弃索引进行全表扫描（score is NULL 改成 score = 0）</li><li><strong>避免在 where 条件中等号的左侧进行表达式、函数操作</strong>，会导致数据库引擎放弃索引进行全表扫描（score/10 = 9 改成 score = 9 * 10）</li><li><strong>当数据量大时，避免使用 where 1=1 的条件</strong>（当WHERE 1=1 在代码拼装时进行判断，没 where 条件就去掉 where，有 where 条件就加 and）</li><li>**查询条件不能用 &lt;&gt; 或者 !=**（如确实业务需要使用到不等于符号，需重新评估索引建立，避免在此字段上建立索引）</li><li><strong>where 条件仅包含复合索引非前置列</strong>（如：复合(联合)索引包含 key_part1，key_part2，key_part3 三列，但 SQL 语句没有包含索引前置列”key_part1”，按照 MySQL 联合索引的最左匹配原则，不会走联合索引。）</li><li><strong>隐式类型转换造成不使用索引</strong>（如 select col1 from table_name where col_varchar = 123 由于索引对列类型为 varchar，但给定的值为数值，涉及隐式类型转换，造成不能正确走索引。）</li><li><strong>order by 条件要与 where 中条件一致，否则 order by 不会利用索引进行排序</strong>（select * FROM t order by age 改成 select * FROM t where age &gt; 0 order by age）</li><li><strong>避免出现 select *</strong>（会让优化器无法完成索引覆盖扫描这类优化，会影响优化器对执行计划的选择，也会增加网络带宽消耗，更会带来额外的 I/O，内存和 CPU 消耗。）</li><li><strong>避免出现不确定结果的函数</strong>（如 now()、rand()、sysdate()、current_user() 等不确定结果的函数很容易导致主库与从库相应的数据不一致。）</li><li><strong>多表关联查询时，小表在前，大表在后</strong>（MySQL扫描顺序是从做到右（Oracle相反），将小表放在前面，先扫小表，扫描快效率较高，在扫描后面的大表，或许只扫描大表的前 100 行就符合返回条件并 return 了。）</li><li><strong>使用表的别名</strong>（使用表的别名并把别名前缀于每个列名上，减少解析的时间并减少那些有列名歧义引起的语法错误。）</li><li><strong>用 where 字句替换 HAVING 字句</strong>（HAVING 只在检索出所有记录才对结果集进行过滤，而 where 则是在聚合前刷选记录）</li><li><strong>调整 Where 字句中的连接顺序</strong>（MySQL 采用从左往右，自上而下的顺序解析 where 子句。根据这个原理，应将过滤数据多的条件往前放，最快速度缩小结果集。）</li></ul><h3 id="增删改"><a href="#增删改" class="headerlink" title="增删改"></a>增删改</h3><ul><li><strong>大批量插入数据</strong>（insert into T values(1,2);insert into T values(1,3);insert into T values(1,4);改成insert into T values(1,2),(1,3),(1,4)）(减少 SQL 语句解析的操作，在特定场景可以减少对 DB 连接次数，SQL 语句较短，可以减少网络传输的 IO。)</li><li><strong>适当使用 commit</strong>（适当使用 commit 可以释放事务占用的资源而减少消耗，释放的模块有事务占用的undo模块，事务在redo log中记录的数据块，减少锁争用影响性能。）</li><li><strong>避免重复查询更新的数据</strong>（更新一行记录的时间戳，同时希望查询当前记录中存放的时间戳是什么? update t1 set time = now() where col = 1; select time from t1 where col = 1;改成 update t1 set time = now() where col = 1 and @now:=now(); select @now;）</li><li><strong>对于复杂的查询，可以使用中间临时表暂存数据</strong></li><li><strong>MySQL 会对 GROUP BY 分组的所有值进行排序</strong>（ “GROUP BY col1，col2，….;” 查询的方法如同在查询中指定 “ORDER BY col1，col2，…;” ，如果不要排序可以指定 ORDER BY NULL 禁止排序。）</li><li><strong>使用join来避免嵌套查询</strong>（因为 MySQL 不需要在内存中创建临时表来完成这个逻辑上的需要两个步骤的查询工作。）</li><li><strong>使用union all 代替 union</strong>（如果没有 all 这个关键词，MySQL 会给临时表加上 distinct 选项，这会导致对整个临时表的数据做唯一性校验，这样做的消耗相当高。）</li><li><strong>拆分复杂 SQL 为多个小 SQL，避免大事务</strong>（简单的 SQL 容易使用到 MySQL 的 QUERY CACHE；减少锁表时间特别是使用 MyISAM 存储引擎的表；可以使用多核 CPU）</li><li><strong>使用 truncate 代替 delete</strong>（使用 delete 语句的操作会被记录到 undo 块中，删除记录也记录 binlog。使用 truncate 替代，不会记录可恢复的信息，数据不能被恢复。）</li></ul><h3 id="建表"><a href="#建表" class="headerlink" title="建表"></a>建表</h3><ul><li><strong>在表中建立索引，优先考虑 where、order by 使用到的字段。</strong></li><li><strong>尽量使用数字型字段</strong></li><li><strong>查询数据量大的表，会造成查询缓慢</strong></li><li><strong>用 varchar/nvarchar 代替 char/nchar。</strong></li></ul><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> DS&amp;DM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 大数据 </tag>
            
            <tag> 数据库 </tag>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《顾客为什么购买》</title>
      <link href="2021/08/15/gu-ke-wei-shi-me-gou-mai/"/>
      <url>2021/08/15/gu-ke-wei-shi-me-gou-mai/</url>
      
        <content type="html"><![CDATA[<p><strong>《顾客为什么购买》，帕科·昂德希尔著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>读这本书的时候，内心一直有一个念头环绕，那就是与时俱进的重要性。这本书的第一章大概写于1997年，已经是二十多年前了，完结也是十多年前的事了，今天看来，虽然这本书有的观点已经不太能适应新环境的变化，特别是最后一部分关于互联网对后续带来的种种挑战，作者的认识并不全，不过站在历史的角度预测未来，又有多少人能预测正确，都不过是自己历史经验的推断罢了。</p><p>当然作者对互联网购物的认识，很多也非常具有前瞻性，比如在零售业引进网络集合时，作者已经意识到这可能意味着实体商店模式的配送系统和供货链管理的改革时机。而且作者在世界各地跑带回来的异域零售体验对于直到今天很多不能成功出海的产品也有很强的指导意义。</p><p>看这本书的重心不应该放在作者是否预测准未来的购物发现趋势，应该关注作者是如何拆解购物的各个环节的。比如作者提出的缓冲区的概念，拥挤这种干扰效应如何成为销量最大杀手，为什么要让顾客空出一只手，如何让广告牌跟随顾客的节奏又要打断顾客的视线。如何去跟踪观察设计顾客的购买路线，这些对于今天的新零售也有很重要的参考意义。</p><p>另外作者还发现了一些新的机遇。比如五金和汽车已经不是男人的专属，需要倾听女性的声音。大家都在说银发市场，可是大家足够重视吗？不说别的，过小的文字对于老人阅读而言就是一个非常大的挑战。都说孩童市场重要，可是又有多少零售店愿意为孩童划出一个活动空间，一心想到的是空间浪费，怎么会想到孩童带来的附加价值，怎么会想到很多父母不愿意去不欢迎孩童的超市。</p><p>不止治病重视望闻问切，商品营销上，顾客也吃这一套，让顾客方便的看到、感受到、询问道、触及到，这能很大程度上刺激到购物的欲望，如果觉得不好理解，想想今天的直播带货，用事后诸葛亮的说法，一个好的主播不是商品的售卖机器，是帮助广大顾客去体验望闻问切的代理人。</p><p>作者认为他的价值在于，除了搜集数据之外还对数据的含义进行合理解读，并提出应对措施。这种站在用户的角度去观察、去体验，很多解决方案自然而然的就会出现在脑海中，这虽然是作者认为的自己的价值，可这又何尝不是很多产品的立足之本。</p><hr><p>◆ 第一章 购物学的诞生</p><p>由于数字化的发展，早已不需要让真人去跟踪，监控摄像头覆盖着商场任何一个角落，购物清单记录着一个人的购物历史。</p><blockquote><p>跟踪技术是可以传授的，但是要将这项工作做好，还需要一定的智慧和强烈的兴趣，而这些却是无法传授的。这其中的许多跟踪者已经与我们一起工作了10年甚至更长的时间。</p></blockquote><hr><p>避免拥挤，把商品放在目标顾客够得着的地方，让细分消费者感觉到价值平衡，这是举措看起来是那么的显而易见，可是很多结论在浮出水面之前，就是很难被真正重视，有时候如果想当然的觉得某个基础研究结论很普通，那就需要谨慎自己是否真正理解了这个结论背后的动机个依据了，而且就是理解了，也不代表就能成功付诸于行动。</p><blockquote><p>这些问题不都是显而易见的吗？对于我们来说确实是这样的，尤其是在我们花了这么多的时间观察、拍摄、计时、访问之后。但是，即使今天来看这些问题，如果仅以平常的视角，也很难发现。</p></blockquote><hr><p>◆ 第二章 零售商和营销商所不知道的</p><p>感官时间往往不等同于实际时间，在放松愉快的环境中，感官时间总是更快，在紧张压迫的环境中，感官时间总是更慢。</p><blockquote><p>在商业场所，时间通常被分为三类：真实的时间、感官时间，以及以上两种时间的合并。</p></blockquote><hr><p>作者前面有提到干扰效应会降低成交意愿，可是这里又说服务人员与顾客交流越多，越能提高销售额，频繁交流的过程本身不也算是一种干扰，据调查，绝大多数的顾客都不喜欢售货员紧跟着自己介绍，希望作者后面能比较好的阐述这两者的平衡点。</p><blockquote><p>我们的研究表明，购物者和商店雇员联系得越多，平均销量就越大。也就是说，雇员与购物者交谈能吸引顾客购物。</p></blockquote><hr><p>◆ 第三章 缓冲地带的妙用</p><p>为环境的切换设置一个过渡期间，让转变的过程变得顺滑，可能回取得事半功倍的效果。</p><blockquote><p>大型商店有实力浪费一些前端的空间，小商店却不行。但无论大小，有两件与过渡区相关的事情商家都可以做：不要在过渡区放置重要的商品或安排活动，二是采取措施尽量缩小过渡区。</p></blockquote><hr><p>◆ 第四章 顾客需要腾出一只手</p><p>结合缓冲区和腾出一只手的逻辑，在用户拿着3件或3件以上东西的时候，店员就给他一个购物筐，这时候效果应该是最好的，而现在大多数购物筐都放在了百货商店入口的位置，或许是该再研究一下了。</p><blockquote><p>我们建议，只要有顾客拿着3件或3件以上的东西，店员就递给他一个购物筐。管理者马上就实践了这个办法，因为人们总是很礼貌地接受别人的帮助，所以购物者总是立即接过购物筐，随着购物筐使用数量的不断增加，销售额也在直线上升。</p><p>在过去几年里，顾客使用购物筐（车）的比率和平均购买的比率有了直接的联系，想让顾客花更多的钱，就要确保大多数顾客在购物时使用购物筐（车）。</p></blockquote><hr><p>◆ 第五章 广告牌的效应</p><p>广告与广告之间是独立而有联合的，独立在于顾客看到任何一个，都能知道广告表达的是什么，联合在于广告与广告之间就像剥洋葱，越深入，越能了解细节，越让人难以忘怀。</p><blockquote><p>有一次我路过一家快餐店，它的橱窗广告牌非常不错，上面写着“大汉堡”。走进店里以后，你会看见另一块广告牌对外面那个简短且令人好奇的广告做了解释（他们正在出售……大汉堡包）。这就是很精明的广告设计：将整个广告信息拆成两三个部分，在顾客进店的过程中，每往里面走一点就能多看到一部分信息。</p></blockquote><hr><p>◆ 第六章 设计购买线路</p><p>人们总是向前看，向前走，但是平行的通道只有前后两个尽头，可展示的商品非常有限。一个方法是改成V字形，这样在视野前方的商品就大大增多了，但是这需要额外增加五分之一的空间。</p><blockquote><p>这就是所谓的“V形法”——把货架摆成像军人V形臂章的样子，这样货架上进入购物者视野之内的商品就增多了。把货架与通道之间的角度由原来的90度直角改成45度角，这个变化很大，也是一个很不错的办法。但是，它也有一个问题：V形货架所占空间比通常的摆法要多1/5。</p></blockquote><hr><p>◆ 第八章 像男人那样购物</p><p>普遍观点认为相比男性，女性更喜欢购物，这或许真的是刻在基因里的。古代的男性是捕猎为主，他们眼里只有捕杀猎物带回家才算成功，而女性不一样，女性在古代是采摘为主，她们在甄别鉴赏中就能获得极大的愉悦，所以就算两个女性在商场什么都不买，也能逛上很久。</p><blockquote><p>基因决定了男人是天生的猎手——他们走进丛林，迅速捕杀，拖回战利品，存入地窖，这样才算成功；而女人则是天生的采集者——她们在甄别鉴赏中获得极大的愉悦感。因此，即便什么都不买，两个女人也能够在商场里度过愉快的一天。</p></blockquote><hr><p>◆ 第十章 你懂老年消费者吗</p><p>很多报纸和说明书上几乎都是6-9磅的字，这对于年轻人来说是可以的，不过对于老年人来说，这就有点不人性化了。现在这种情况下大多人老年人会想办法准备一个眼镜，并不会质疑说明书有什么问题。在用户不方便的时候，就存在商机。从这个角度看，再老龄化逐渐严重的今天，各大互联网APP相继推出大字版，也就不难理解了，他们不只是响应国家号召，主要是这真的有很大市场。</p><blockquote><p>在感冒胶囊和其他治疗打喷嚏、鼻塞、流鼻涕的药品以及维生素上也采用的是6——9磅字。换句话说，这种包装设计使年轻人很容易阅读去痘霜的说明，而当老年人阅读头痛和感冒药的说明时，则要困难得多。</p></blockquote><hr><p>有时候人们不愿意做某一件事，并不是某件事难过身体难以承受，有可能只是人们根本在回避它，就像对于老年人而言，他们多数不愿意被要求做那些需要弯腰、下蹲的事，因为他们不愿意意识到自己已经年迈。</p><blockquote><p>零售环境的改变并非仅为了行动不便的老年人，即使能走动的老年购物者也不能像过去那样弯腰和伸展。而且他们也不愿意这样做，因为弯腰和伸展让老人感觉到自己的年龄，这是他们最不想意识到的事。</p></blockquote><hr><p>◆ 第十一章 孩子的钱不好赚</p><p>去麦当劳或肯德基，可以看到很多带孩子的家长，具体这个比例是多少不确定，不过有一点祖儿毋庸置疑，孩童为这些快餐店带来了大量的销售额。很多父母从健康饮食的角度是不愿意吃快餐的，但为了孩子愿意妥协。甚至不少家长把吃快餐作为孩子良好表现的奖励，这是对孩童不友好的商店永远也想象不到的购买逻辑。</p><blockquote><p>假如孩子在购物中心的一个上午表现得好的话，父母就会带他们出去吃饭，一方面是为了方便，另一方面是为了贿赂孩子。麦当劳很早就意识到，假如通过菜谱、玩具、印有著名人物的杯子和儿童乐园能吸引孩子，那也就能吸引父母。美国的主要快餐食品也是孩子们最喜爱的，这并非巧合。然而即使是麦当劳也没有把每件事情都做好。一个重大的疏忽是：对于儿童来说，柜台太高了。一个七八岁的孩子肯定可以独自从餐桌走到柜台，再多点一份油炸食物和一杯碳酸饮料，但是餐馆的设计阻止了他这么做。</p></blockquote><hr><p>◆ 第十二章 感官与购物</p><p>现在的大型超市里也会有现场烹饪的熟食区，可他们的主要目的还是销售。如果不为销售额，重点关注为超市营造一种长时间逗留氛围，比如免费提供的甜点，音乐DJ，孩童活动区，这或许能为超市带来更多的销售额。毕竟对于大型超市而言，顾客逗留时间越长，销售额通常会更高。</p><blockquote><p>我希望有人会在超市里设置一个大型开放式的厨房，就像在电视厨艺节目里看到的那样，一个主厨现场制作小吃，并将食品（还有烹饪法）送到购物者跟前。如果经理用话筒大声宣布：“请大家注意了，在接下来的15分钟里，在速冻食品区，会为每位顾客免费赠送一份百香果冰糕！”情况会怎么样？如果加上一个舞池和一位DJ，再在谷类食物通道里上演一出木偶剧，或者有一个爵士三人组或者高中合唱团在收款台表演的话，那又会怎么样？</p></blockquote><hr><p>试衣间不仅仅是换衣服的地方，它才是决定多数人是否购买的关键场所，甚至比展示区橱窗和广告更重要，因为大多数用户的购买决定都是在这里作出的。可是现在多数商店并没有注意到这一点，他们认为试衣间是一种不得不浪费的空间，甚至在有的大型卖场，试衣间都不在商店内，还要拿着衣服去整个楼层指定的地方去试衣，这样顾客怎么会愿意购买呢。</p><blockquote><p>事实上，试衣间也许比商店的卖场还要重要，毫不夸张地说，改进试衣间的质量会提高销售额。一间试衣间不仅仅是换衣服的地方，还是一种销售场所，就像展示区橱窗或者是广告。</p></blockquote><hr><p>为了尽可能满足用户体验欲，或许当在超市购物没满多少额度，或是多少积分，可以免费选择一定数量的某品类体验装。这样不失为一种提升用户体验，同时提升销售额的方式。</p><blockquote><p>解决这种问题和其他类似问题的一种办法，就是在超市里设立样品柜台，在那里，新产品可以随便试。通过触觉感知产品本身也非常重要，如果处理得好的话，的确也可以提高产品的销量。</p></blockquote><hr><p>◆ 第十四章 延长购物的好时段，缩短等候的差时段</p><p>就算只有一个收银台，人们总是感觉一个15人的队伍比3组5人的队伍更烦人，变成3组后，结帐速度并没有变快，可人们为什么会有这种心态变化呢。或许是因为看到自己前面只有5人，自己距离目标更近，而且三组给人的感觉是一人支持三组结算，结算效率会更高。</p><blockquote><p>不知为什么，人们总感觉一个15人的队伍比3个5人的队伍更烦人。这虽然没什么道理可讲，但人们的感觉确实如此，这就是感觉与实际情况之间的差距。</p></blockquote><hr><p>◆ 第十六章 商品推销的小窍门</p><p>在斯里兰卡3美元的T恤，在美国可以卖上30美元，这不只是因为不同地区的成本，也不只是信息差，这其中还有购物体验，还有广告，还有营销给顾客的故事，当下的市场不只是在产品本身上下功夫，谁会就产品营销故事，就能赚到更多的附加价值。可为什么很多企业家都说自己的公司要回归产品质量，要为用户提供更好的体验，实际制造过程中提升了多少产品体验不得而知，但是这个故事是营造了。</p><blockquote><p>我们在斯里兰卡以3美元的价格买来，”她开始说道，“然后我们把那些T恤衫带到这儿，缝上法文和英文的洗涤说明。注意我们并没有说衬衫是在法国制造的，但是假如你愿意，你可以那样推论。之后我们利用这一点来进行促销：我们将衬衫叠好，放在一个有品位的桌面上陈列，陈列桌后面的墙上挂了一幅巨大的、华丽的照片，画中是一位在有异国风情的地方穿着这种T恤的美女。我们做对了这件事，就好像是100万美元到手了。我们把T恤叫作探险T恤，每件售价37美元，最终卖出了很多。”这是我曾经听过的最沉闷但却非常有价值的经验。</p></blockquote><hr><p>◆ 第十七章 互联网带来购物新挑战</p><p>互联网购物的确存在很多体验方面的新挑战，不过作者写这本书已经过去了十多年（从第一章已经过去了二十多年），当今这些问题已经被流程解决了不少，这里不评判作者说得对与不对，只是想说明流程和机制可能解决很多看似不太可能的问题。</p><blockquote><p>但如果是你有麻烦需要解决，就很难忽略自己脑海中出现的声音，它告诉你亚马逊的高层不会对你的来电产生一丝兴趣。利用电子邮件联系他们的话，只会收到一份简要而亲切的自动回复。你得花上好几天时间徒劳地找出客服电话。这种我们为之埋单的便利、一键式购物和程式化的零售体验，其事实就是，在与亚马逊的交易中，那头坐着的不是有鼻子有眼的人类，而只是个往我们邮箱里发邮件的滴水不漏的电邮数据库。</p></blockquote><hr><p>如果将零售业引进网络系统，那那配送和供应链一定是这其中最需要变革的地方。作者写这个观点可是在十多年前，当时淘宝天猫京东还是弟弟，拼多多还没有，什么四通一达，什么菜鸟裹裹，什么京东物流，这些统统都没有，这种预见能力不可谓不强。</p><blockquote><p>如果在零售业引进网络集合，这可能意味着实体商店模式的配送系统和供货链管理的改革时机到了。</p></blockquote><hr><p>◆ 第十八章 感受全球购物文化</p><p>没有看过世界，谈何世界观。这是以前的观点，所以以前如果一个27岁的人说人生不易，肯定会被当成笑话，而一个72岁的人说人生不易，就能被当成格言。可今天不太一样了，互联网信息泛滥，一个敢于探索的人，不一定要花费昂贵的机票钱，也能体会到世界的格局和变化，而且这不受活的时间长短。时间的长度很难改变，但宽度是你我可以决定的，而一个人的世界观来源于长宽围成的面积。</p><blockquote><p>我的观点是：让Envirosell与众不同的一个原因是，我们有能力在美国大众面前挺直腰杆，向他们讲述海外零售业的有关情况。我们可以底气十足地对美国中西部购物中心的老板们说，“两周之前，我去了东京市中心新开业的购物中心，他们是这样做的”，或者，“我已经去过迪拜5次了，他们对这个问题的看法是这样的”。不要把我们的这种做法和自吹自擂混淆，我敢肯定我们这样说绝不会给人以自吹自擂的印象。对于一个总是被外面世界的各种变化所吸引、来回奔波于各地的道路勇士而言，这就是生活。</p></blockquote><hr><p>◆ 第二十章 购物学研究的新展望</p><p>一个关键位置的微小改变，会带来一系列的蝴蝶效应，永远不要小瞧某一次改变，那可能是推下的第一块多米诺骨牌。要想变好，就从可操作的任何一件小事开始。</p><blockquote><p>另一个常见的看法是我们给出的很多建议好像更接近于微观方面的调整，而不是宏观的革新，但是，当你在店内实施了一些小的改变以后，就会时不时发现其实已经改进了非常多。正如我常说的那样，如果市场注意力全部放在战略上的话，战术问题就常常会被忽略。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 零售 </tag>
            
            <tag> 帕科·昂德希尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Production Costs</title>
      <link href="2021/07/03/production-costs/"/>
      <url>2021/07/03/production-costs/</url>
      
        <content type="html"><![CDATA[<h2 id="What-is-Costs"><a href="#What-is-Costs" class="headerlink" title="What is Costs"></a>What is Costs</h2><h3 id="Revenue-Cost-and-Profit"><a href="#Revenue-Cost-and-Profit" class="headerlink" title="Revenue, Cost and Profit"></a>Revenue, Cost and Profit</h3><p>Economists often assume that the goal of enterprises is to maximize profits, and this assumption can work well. But what is profit? Here are some definition.</p><ul><li>Total revenue: The amount of money an enterprise obtains from selling its products.</li><li>Total cost: The amount of money an enterprise spends to purchase inputs.</li><li>Profit: Total revenue - Total cost</li></ul><p>Generally, the total revenue is easy to calculate, It is equal to the output multiplied by the price of products, but the total cost is not so easy to calculate.</p><h3 id="Opportunity-cost"><a href="#Opportunity-cost" class="headerlink" title="Opportunity cost"></a>Opportunity cost</h3><p>The opportunity cost of thing is everything else that must be given up in order to get it. This cost can be divided into explicit cost and implicit cost. </p><ul><li>Explicit cost: The input cost of the enterprise’s expenditure currency. </li><li>Implicit cost:   The input cost that do not require corporate expenditure currency. </li></ul><p>Interestingly, the difference between explicit cost and implicit cost emphasizes the important difference between economists and accountants in analyzing business activities. Economists pay attention to studying how enterprises make production and pricing decisions. This decision will consider both explicit cost and implicit cost. In contrast, accountants’ work is to record the monetary factors flowing into and out of enterprises. They measure the explicit cost and often ignore the implicit cost.</p><h3 id="Economic-profit-and-accounting-profit"><a href="#Economic-profit-and-accounting-profit" class="headerlink" title="Economic profit and accounting profit"></a>Economic profit and accounting profit</h3><ul><li>economic profit: Total revenue - Explicit cost - Implicit cost</li><li>accounting profit:  Total revenue - Explicit cost</li></ul><p>In contrast, economic profit is more important in enterprise management. Enterprises that obtain positive economic profit can make up for all opportunity costs and leave some income as the reward of enterprise owners. When an enterprise has economic losses, even if it has positive accounting profits, it often has to withdraw from the industry.</p><h2 id="Production-and-cost"><a href="#Production-and-cost" class="headerlink" title="Production and cost"></a>Production and cost</h2><h3 id="Produce-function"><a href="#Produce-function" class="headerlink" title="Produce function"></a>Produce function</h3><p>In order to measure the relationship between the input and output of a production, the concept of production function appears. The marginal output of any input in the production process is the output increased by unit input, that is, the slope defined mathematically.</p><p>It is worth noting that with the increase of the number of workers, the marginal output of workers decreases gradually, which is called diminishing marginal output.</p><h3 id="Total-cost-curve"><a href="#Total-cost-curve" class="headerlink" title="Total cost curve"></a>Total cost curve</h3><p>Because the cost has a certain scale effect, the marginal cost will be smaller and smaller whit the increase of output.</p><p>If the production function and total cost function are placed in the coordinate system. With the increase of output, the total cost curve will become steeper and steeper, and the production function will become smoother and smoother. As shown in the figure below.</p><p><img src="production_function_and_total_cost_curve.png" alt="Production function and total cost curve"></p><h2 id="Various-measures-of-cost"><a href="#Various-measures-of-cost" class="headerlink" title="Various measures of cost"></a>Various measures of cost</h2><h3 id="Fixed-costs-and-variable-costs"><a href="#Fixed-costs-and-variable-costs" class="headerlink" title="Fixed costs and variable costs"></a>Fixed costs and variable costs</h3><ul><li>fixed costs: cost that dose not change with the change of output.</li><li>variable costs: cost that vary with production.</li></ul><h3 id="Average-cost-and-marginal-cost"><a href="#Average-cost-and-marginal-cost" class="headerlink" title="Average cost and marginal cost"></a>Average cost and marginal cost</h3><ul><li>Average total cos (ATC)t: total cost divided by production.</li><li>Average fixed cost (AFC): fixed cost divided by production.</li><li>Average variable cost (AVC): variable cost divided by production.</li><li>marginal cost (MC): total increased cost of one additional unit.</li></ul><h3 id="Cost-curve-shape"><a href="#Cost-curve-shape" class="headerlink" title="Cost curve shape"></a>Cost curve shape</h3><p>The cost curve of a typical enterprise is shown in the figure below.</p><p><img src="cost_curve.png" alt="cost curve"></p><p>It should be noted that：</p><ul><li>As production increases, the marginal cost will eventually rise</li><li>The average total cost curve is U-shaped</li><li>The marginal cost curve and the average total cost curve intersect at the lowest point of the average total cost curve.</li></ul><h2 id="Short-term-costs-and-long-term-costs"><a href="#Short-term-costs-and-long-term-costs" class="headerlink" title="Short term costs and long-term costs"></a>Short term costs and long-term costs</h2><h3 id="Relationship-between-different-time-length-and-average-total-cost"><a href="#Relationship-between-different-time-length-and-average-total-cost" class="headerlink" title="Relationship between different time length and average total cost"></a>Relationship between different time length and average total cost</h3><p>For many enterprises, the division of total cost between fixed cost and variable cost depends on the time range. Taking an automobile manufacturer as an example, the way to produce more cars in the short term is to hire more workers in the existing factories. Therefore, the cost of the factory is a fixed cost, but in the long run, the company will expand the scale of the factory, and the cost of the factory is a variable cost in the long run.</p><p><img src="short_term_costs_and_long-term_costs.png" alt="Short term costs and long-term costs"></p><h3 id="Economies-of-scale-and-diseconomies-of-scale"><a href="#Economies-of-scale-and-diseconomies-of-scale" class="headerlink" title="Economies of scale and diseconomies of scale"></a>Economies of scale and diseconomies of scale</h3><ul><li>economies of scale: The long-term average total cost decreases with the increase of production</li><li>diseconomies of scale: The long-term average total cost increases with the increase of production</li><li>constant returns to scale: The long-term average total cost remains constant when output changes</li></ul><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机会成本 </tag>
            
            <tag> 边际成本 </tag>
            
            <tag> 规模经济 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>税制的设计</title>
      <link href="2021/06/13/shui-zhi-de-she-ji/"/>
      <url>2021/06/13/shui-zhi-de-she-ji/</url>
      
        <content type="html"><![CDATA[<h2 id="美国政府的财政概况"><a href="#美国政府的财政概况" class="headerlink" title="美国政府的财政概况"></a>美国政府的财政概况</h2><h3 id="联邦政府"><a href="#联邦政府" class="headerlink" title="联邦政府"></a>联邦政府</h3><p>美国联邦政府收取了美国经济中约三分之二的税收，主要以以下几种形式收取（2011年数据）：</p><ul><li>个人所得税（占比43%）：美国税法规定了比较复杂的纳税计算方法，一个家庭的纳税额并不是简单的与其收入成正比，还有一些可扣除数量，如抚养孩子，住房抵押贷款利息，联邦和地方税收支付，慈善等。</li><li>工薪税（也被称为社会保险税，占比36%）：是对企业付给工人的工资征收的税，用来支付社会保障和医疗保障。</li><li>公司所得税（占比12%）：政府根据每个公司利润进行征税，实际上，公司的利润需要交两份税，一份是公司所得税，另一个是用利润支付员工工资时交的员工个人所得税。</li><li>其他（占比9%）：销售税以及其他小税种，如不动产税，关税等。</li></ul><p>联邦政府的支出：</p><ul><li>收入保障（占比33%）：主要是各种转移支付，政府未用于交换物品和服务而进行的支付，如老年人和残疾人等社会保障，失业人的失业保险，穷人的福利支付等。</li><li>医疗项目（占比25%）：包括医疗保障、医疗援助、医疗研究等。</li><li>国防（占比19%）：包括军事人员工薪，购买或研发军事装备。</li><li>净利息（占比9）：个人向银行借款需要支付利息，政府向公众借款同样需要支付利息，政府负债越多，利息支付越大。</li><li>其他（占比14%）：主要是支出较少的政府职能，如太空计划、住房信贷计划以及国会议员与总统的薪水等。</li></ul><p>当联邦政府的收入小小于支出时，就叫<strong>预算赤字</strong>。反之，当联邦政府的收入大于支出时，就叫她<strong>预算盈余</strong>。</p><h3 id="州和地方政府"><a href="#州和地方政府" class="headerlink" title="州和地方政府"></a>州和地方政府</h3><p>州和地方政府筹集的税收占全部税收的40%左右。其中，州和地方政府最重要的两类税是销售税（占比22%）和财产税（占比21%）。销售税按消费者购买零售商品的总支出的一定比例征收，当然有的州会对某些如食物和衣物等生活必须品免收税。财产税按土地和建筑物估算价值的一定百分比进行征税。除此之外第三大收入就是个人所得税（占比16%）。</p><p>支出方面，州和地方政府最大的支出是教育（占比34%），比如为公立学校提供经费支持等。第二大支出是医疗计划（占比22%），比如医疗援助，第三大支出是公共秩序与安全（占比13%），用于支付警察、消防、法院等机构运营成本。</p><h2 id="税收和效率"><a href="#税收和效率" class="headerlink" title="税收和效率"></a>税收和效率</h2><h3 id="税收成本"><a href="#税收成本" class="headerlink" title="税收成本"></a>税收成本</h3><p>税收制度的主要目标是筹集政府收入，当在筹集是，需要优先考虑两个因素，分别是<strong>效率</strong>和<strong>平等</strong>。</p><p>如果一种税制能以对纳税人来说较低的成本筹集到等量收入，这种制度就更有效率，当然其中最大的成本就是税收本身，除此之外，还有两个需要考虑：</p><ul><li>当税收扭曲了人们做出决策时引起的无谓损失。</li><li>纳税人在遵照税法纳税时承担的管理负担。</li></ul><h3 id="无谓损失"><a href="#无谓损失" class="headerlink" title="无谓损失"></a>无谓损失</h3><p>无谓损失是赋税最大的代价，详细可参考  <a href="http://booleflow.com/2021/04/04/fu-shui-de-dai-jie/">赋税的代价</a>。赋税给市场的参与者带来损失，不仅是因为税收将资源从市场参与者手中转移到政府手中，还因为税收改变了激励，并扭曲了市场结果。</p><h3 id="管理负担"><a href="#管理负担" class="headerlink" title="管理负担"></a>管理负担</h3><p>在美国（现在中国也在执行不同税制填报），每年4月15日左右需要每一个家庭填报税表，甚至有的适用高税率是人，会雇佣专门的律师和会计师帮助他们纳税，包括填表，安排各种事物以合法减少纳税额等。</p><p>专门用于遵守税法的资源也是一种损失，政府只得到了所缴纳的税收金额，但是纳税人不仅失去了这一金额，还需要失去用于整理文件、计算和避税所花费的时间和金钱。</p><h3 id="边际税率和平均税率"><a href="#边际税率和平均税率" class="headerlink" title="边际税率和平均税率"></a>边际税率和平均税率</h3><ul><li>平均税率：支付的总税收除以总收入</li><li>边际税率：增加的一美元收入所支付份额外税收</li></ul><p><strong>平均税率可以知道一个纳税人做出的牺牲，边际税率则表示了税制在多大程度上扭曲了激励</strong>。</p><h3 id="定额税"><a href="#定额税" class="headerlink" title="定额税"></a>定额税</h3><p><strong>定额税</strong>是向每个人征收相同额度的税，比如4000美元，则不管收入如何，都征收4000美元。</p><p>定额税可能是最有效率的税，因为一个人的决定并不改变纳税额，税收也没有扭曲激励，因此也不会引起无谓损失。不过会存在另外一个问题，大多数认为这样对穷人是不公平的。</p><h2 id="税收与平等"><a href="#税收与平等" class="headerlink" title="税收与平等"></a>税收与平等</h2><h3 id="受益原则"><a href="#受益原则" class="headerlink" title="受益原则"></a>受益原则</h3><p>税收的受益原则认为，人们应该根据他们从政府服务中得到的利益来纳税。</p><p>最典型的就是汽油税，在一些州个地方政府，汽油税用以修建和维护公路，因为买汽油多的人同样也是使用道路多的人，所以汽油税被视为一种为这种政府服务付费的公平方法。</p><p>受益原则也能很好的支持富人应该比穷人纳税更多的观点，甚至受益原则支持富人纳的税用来为反贫困计划提供资金，因为这样富人也可以享受更好的社会环境。</p><h3 id="支付能力原则"><a href="#支付能力原则" class="headerlink" title="支付能力原则"></a>支付能力原则</h3><p><strong>支付能力原则</strong>认为应该根据一个人所能承受的负担来对这个人征税，认为所有人都应该做出平等的牺牲来支持政府。于是衍生出两种平等，分别是<strong>纵向平等</strong>和<strong>横向平等</strong>。</p><p>纵向平等认为支付能力更强的人应该纳更多的税；横向平等认为有相似支付能力的人应该纳等量的税。</p><p>为了解决纵向平等，常用的税制有三种，每一种情况下，富有的人支付的税收都更多，不过不同税制富人税收增加的速率不一样。</p><ul><li>比例税：按照收入比例纳税</li><li>累退税：收入分段，越高的收入部分，税率越低</li><li>累进税（当前中国采用的）：收入分段，越高的收入部分，税率越高</li></ul><p>为了解决横向平等，会在税制中加入一些特殊条款，相同收入的人纳税额可能不一样，比如有赡养老人、子女教育、房屋利息等会有单独减免。</p><h2 id="平等与效率之间的权衡取舍"><a href="#平等与效率之间的权衡取舍" class="headerlink" title="平等与效率之间的权衡取舍"></a>平等与效率之间的权衡取舍</h2><p>以美国税率的跌宕起伏看看</p><ol><li>1980年罗纳德·里根当选总统时，最富有的美国人的边际税率是50%</li><li>1989年里根离开白宫时，最富有的美国人的边际税率下降到了28%</li><li>1993年克林顿把最富有的美国人的边际税率提到了40%</li><li>2001年乔治·W·布什上位后又把边际税率降到了35%</li><li>2013年奥巴马又把税率拉到了40%左右</li></ol><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 无谓损失 </tag>
            
            <tag> 税收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>公共物品和公共资源</title>
      <link href="2021/06/12/gong-gong-wu-pin-he-gong-gong-zi-yuan/"/>
      <url>2021/06/12/gong-gong-wu-pin-he-gong-gong-zi-yuan/</url>
      
        <content type="html"><![CDATA[<h2 id="经济物品分类"><a href="#经济物品分类" class="headerlink" title="经济物品分类"></a>经济物品分类</h2><p>在考虑经济物品时，根据两个特点可以对其进行分类，分别是排他性和消费中的竞争性。</p><ul><li><strong>排他性</strong>：一种物品具有的可以阻止一个人使用该物品的特性</li><li><strong>消费中的竞争性</strong>：一个人使用一种物品将减少其他人对该物品的使用的特性。</li></ul><p>按照上面两个特点可以把物品进行如下分类：</p><table><thead><tr><th></th><th>有竞争性</th><th>无竞争性</th></tr></thead><tbody><tr><td><strong>有排他性</strong></td><td><strong>私人物品</strong>：<br /> 冰激凌蛋卷<br /> 衣服<br /> 拥挤的收费道路</td><td><strong>俱乐部物品</strong>：<br /> 消防<br /> 有线电视<br /> 不拥挤的收费道路</td></tr><tr><td><strong>无排他性</strong></td><td><strong>公共资源</strong>：<br /> 海洋中的鱼<br /> 环境<br /> 拥挤的不收费道路</td><td><strong>公共物品</strong>：<br /> 龙卷风警报器<br /> 国防<br /> 不拥挤的不收费的道路</td></tr></tbody></table><p>根据以上逻辑似乎可以清晰的将物品分为四类，不过实际各物品之间的界限是比较模糊的，物品是否具有排他性或消费中的竞争性往往是个程度问题。比如由于监管捕鱼非常困难，所以海洋中的鱼可能没有排他性，但足够多的海岸卫队或强制的捕鱼条令就可以使鱼具有部分排他性。</p><h2 id="公共物品"><a href="#公共物品" class="headerlink" title="公共物品"></a>公共物品</h2><h3 id="搭便车问题"><a href="#搭便车问题" class="headerlink" title="搭便车问题"></a>搭便车问题</h3><p>公共物品是一种既无排他性又无消费竞争性的物品，比如烟火，这种物品不具有排他性，因为要阻止某人看烟火是不可能的，而且也不具有消费竞争性，因为一个人欣赏烟火并不会减少其他任何一个人欣赏。</p><p>例如上面的烟火物品，就会出现<strong>搭便车</strong>的情况，即<strong>得到一种物品的利益但可以避免为此付费</strong>。由于搭便车问题的存在，就使得私人市场无法提供公共物品。不过，政府可以潜在的解决这个问题，如果政府确信一种公共物品的总利益大于成本，他就可以提供该公共物品，并用税收收入来进行支付，从而使每个人的状况都变好。</p><h3 id="一些重要的公共物品"><a href="#一些重要的公共物品" class="headerlink" title="一些重要的公共物品"></a>一些重要的公共物品</h3><ul><li>国防：包围国家免受外国人入侵。国防也是最贵的公共物品之一，人们对于国防支出量的看法可能不一致，但是几乎没有人会怀疑政府对于国防的某些支出的必要性。</li><li>基础研究：知识是通过研究创造的。这里指的基础研究不是具有专利的发明创造，以为专利是具有排他性的。这里指的是一般性知识，特别是在数学、物理、经济学等方面的基础研究。</li><li>反贫困：许多政府计划的目的是帮助穷人。虽然有慈善活动等私人行为，但是私人行为反贫困是困难的，而政府可以比较好的解决这个问题。通过向富人征税来提高穷人的生活水平可以使每个人的生活都变好，穷人的状况变好，是因为他们有了更好的生活水平。而富人状况变好，是因为他们现在生活在一个贫困较少的社会中。</li></ul><h3 id="成本—受益分析难题"><a href="#成本—受益分析难题" class="headerlink" title="成本—受益分析难题"></a>成本—受益分析难题</h3><p><strong>成本—受益分析的目标是估算该项目对于作为一个整体的社会的总成本和总收益</strong>。</p><p>例如，修一条新的高速公路，为了确定要不要修这条高速公路，政府需要比较所有使用这条高速公路的人的总收益和建设与维护这条高速公路的成本，不过分析会面临一些难题，因为所有人都可以免费使用高速公路，却没有用来判断高速公路价值的价格。这就胆汁有效率地提供公共物品在本质上比有效率地提供私人物品更困难，所有关于公共项目的成本和收益的量化结论充其量只是一种近似。</p><h2 id="公共资源"><a href="#公共资源" class="headerlink" title="公共资源"></a>公共资源</h2><h3 id="公地悲剧"><a href="#公地悲剧" class="headerlink" title="公地悲剧"></a>公地悲剧</h3><p><strong>公地悲剧：一个说明从整个社会的角度看，为什么公共资源的使用大于合意的水平的寓言</strong>。比如牛羊放牧，每个家庭都有自己的牛羊，通过出售牛奶或羊毛做的衣服来养家，由于牧草是公共资源，避免草地破坏依靠所有放牧人的集体活动，但社会激励与私人激励的不同，没有一个家庭有减少自己的牛羊规模的激励，因为每家的牛羊只是问题产生的一小部分原因。</p><p>实际上，公地悲剧的产生是因为外部性，当一个家庭的牛羊在公地上吃草时，它降低了其他家庭可以得到的土地质量，由于牧民在决定自己养多少牛羊的时候不会考虑这种负外部性，结果牛羊的数量会过多。</p><p>解决这种公地悲剧的方法有（其中前两个和解决市场外部性的方式相似）：</p><ul><li>政府强制管制，禁止过度放牧</li><li>通过征收牛羊税或拍卖放牧许可证的方式把外部性内在化。</li><li>牧草私有化，将土地按照一定比例分给各个家庭。</li></ul><h3 id="一些重要的公共资源"><a href="#一些重要的公共资源" class="headerlink" title="一些重要的公共资源"></a>一些重要的公共资源</h3><ul><li>清洁的空气和水：清新的空气和洁净的水与开放的草地一样都是公共资源，过度污染和过度放牧一样，环境恶化也是一种公地悲剧。</li><li>拥堵的道路：道路既可以是公共物品，也可以是公共资源，当道路不拥堵时，是公共物品。当道路拥堵时，是公共资源，会产生公地悲剧。政府解决道路拥堵问题的方式就是向司机收取通行费，变成收费道路后，就具有一定的排他性，可以缓解拥堵，或者可以理解为通行费是为了对拥堵产生外部性征收的一种矫正税。</li><li>鱼、鲸和其他野生动物：许多动物物种都是公共资源，迄今，海洋仍然是受到管制最少的公共资源之一，主要原因有，第一，许多国家都濒临海洋，因此，任何一种解决方案都要求在拥有不同价值观的各国之间进行国际合作。第二，由于海洋非常浩瀚，实施任何一个协议都变得非常困难。</li></ul><h2 id="产权的重要性"><a href="#产权的重要性" class="headerlink" title="产权的重要性"></a>产权的重要性</h2><p>市场在解决私人物品物品时是高效的，但不能确保我们呼吸的新鲜空气是清洁的，也不能确保我们的国家不受外国侵略，相反，社会可以依靠政府来保护环境和提供国防。在这种问题上，市场没有有效的配置资源，是因为没有很好的建立产权，某些有价值的东西并没有在法律上有权控制它的所有者。</p><p>虽然没有人怀疑清洁的空气或国防等物品是有价值的，但是没有一个人有权给它定一个价格。并从它的使用中得到利润。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 竞争性 </tag>
            
            <tag> 排他性 </tag>
            
            <tag> 搭便车 </tag>
            
            <tag> 公地悲剧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>市场外部性</title>
      <link href="2021/06/06/shi-chang-wai-bu-xing/"/>
      <url>2021/06/06/shi-chang-wai-bu-xing/</url>
      
        <content type="html"><![CDATA[<h2 id="正外部性与负外部性"><a href="#正外部性与负外部性" class="headerlink" title="正外部性与负外部性"></a>正外部性与负外部性</h2><p>经济学十大原理中有一个是市场通常是一种组织经济活动的好方法的基础，市场是可以把很多事情做好，但不是每一件事，比如当外部性出现的时候，可能就会出现市场失灵。</p><p><strong>当一个人从事一种影响旁观者福利并对这种影响既不付报酬又不得报酬的活动时，就产生了外部性</strong>。如果对旁观者的影响是不利的则为<strong>负外部性</strong>，反之，如果这种影响是有利的则为<strong>正外部性</strong>。</p><p>比如，汽车尾气带来环境污染有负外部性，修复历史建筑能让人感受历史沧桑感有正外部性，狂吠的狗带来噪音干扰具有负外部性，新技术研究带来社会进步具有正外部性。</p><h2 id="外部性和市场效率"><a href="#外部性和市场效率" class="headerlink" title="外部性和市场效率"></a>外部性和市场效率</h2><h3 id="负外部性"><a href="#负外部性" class="headerlink" title="负外部性"></a>负外部性</h3><p>外部性会引起市场资源的配置无效率。以生产铝为例，生产铝的社会成本要大于铝生产者的成本，因为每生产一单位的铝，社会成本是生产者的私人成本和受到污染的不利影响的旁观者的成本，即最优供给曲线会上移，最优数量会小于市场的均衡数量，如下图所示。</p><p><img src="negative_externality.png" alt="负外部性与社会最优"></p><p>将铝的生产量和消费量降到均衡水平以下，就会增加社会的总经济福利。</p><p>那么社会计划者如何从市场均衡调整到最优结果呢，通常的方法是对生产者<strong>征收税收</strong>，使得供给曲线自动上移到达最优供给曲线。这种税收的作用叫<strong>外部性内在化</strong>。</p><h3 id="正外部性"><a href="#正外部性" class="headerlink" title="正外部性"></a>正外部性</h3><p>有的生产活动会为第三方带来成本，有的生产活动会为第三方带来利益。以教育为例，就个人而言，受教育的人能成为生产效率更高的人，从而获得更高的工资；对政治而言，受教育的人能成为更理智的选民；对社会而言，受教育的人有更低的犯罪率，另外还能促进技术进步的开发和扩散。</p><p>由于社会价值大于私人价值，因此社会价值曲线会在市场需求曲线之上，如下图所示。</p><p><img src="positive_externality.png" alt="负外部性与社会最优"></p><p>社会价值最优的均衡量大于市场本身的均衡量，政府也可以通过使市场参与者把外部性内在化来应对这种市场失灵，常用的方法是对正外部性<strong>进行补贴</strong>。</p><p>正外部性可以产生大量的技术溢出，一个企业的技术进步能推动很多人生活水平的提高，所以政府需要鼓励那些产生了大量溢出效应的行业和企业，比如对研发支出进行税收减免，或对核心技术进行专利保护等。</p><h2 id="针对外部性的公共政策"><a href="#针对外部性的公共政策" class="headerlink" title="针对外部性的公共政策"></a>针对外部性的公共政策</h2><h3 id="管制策略"><a href="#管制策略" class="headerlink" title="管制策略"></a>管制策略</h3><p>政府可以通过规定和禁止某些行为来解决外部性，比如政府可以禁止一些污染排放，但是多数情况下产生污染的是多方，要禁止所有污染是不可能的。而且制定相关的禁止条例需要了解某些特定行业以及这些行业使用技术的详细信息，而政府管制者很难拿到这些信息。</p><h3 id="矫正税和补贴"><a href="#矫正税和补贴" class="headerlink" title="矫正税和补贴"></a>矫正税和补贴</h3><p>政府除了强制管制，还可以借助市场的力量进行干预，比如前面所说的税收和补贴。用于纠正负外部性影响的税收也被称为<strong>矫正税</strong>。虽然管制和矫正税都能减少污染，但是税收在实现这个目标上会更有效率。本质上，矫正税规定了污染的价格，它把污染权分配给那些减少污染成本最高的工厂，而且管制策略不能激发工厂持续降低污染的动力，当污染量低于管制的数量后，工厂就不会再减少排污。相反，税收可以激励工厂去开发更加环保的技术。</p><p>大多数税收都是扭曲了激励，降低市场效率，减少社会福利，但矫正税不同，矫正税既增加了政府的收入，又提高了经济效率。</p><h3 id="可交易的污染许可证"><a href="#可交易的污染许可证" class="headerlink" title="可交易的污染许可证"></a>可交易的污染许可证</h3><p>从经济效率看，允许污染许可证交易是可行的。例如现在有钢铁厂和造纸厂，都在产生污染，但是单位污染对应的生产量是不同的，当需要降低一定量的污染时，允许两个工厂之间进行污染许可证交易可以使得双方的状况都变好，而且这种交易没有任何的外部影响，因为污染总量是相同的。</p><p>虽然使用污染许可证减少污染和矫正税看起来非常不同，但是很多地方是互通的。这两种情况下企业都需要为污染付费，在使用矫正税时，企业需要向政府交税，政府再分配给生产污染较少的企业，在使用污染许可证时，污染企业必须购买污染许可证，这也是政府印发的。</p><p>从某种情况来说，出售污染许可证可能比实行矫正税更好，它避免对污染状况直接定价，而通过工厂之间的相对优势来持续降低污染量。</p><h2 id="外部性的私人解决方案"><a href="#外部性的私人解决方案" class="headerlink" title="外部性的私人解决方案"></a>外部性的私人解决方案</h2><h3 id="私人解决方法的类型"><a href="#私人解决方法的类型" class="headerlink" title="私人解决方法的类型"></a>私人解决方法的类型</h3><p>主要有四种方式</p><ul><li>将外部性内在化：考虑到自己的行为会对别人造成何种影响，也就是所说的“己所不欲，勿施于人”。</li><li>慈善行为：政府通过允许计算所得税时扣除慈善捐赠的税制来鼓励这种行为。</li><li>通过依靠各方的利己来解决：比如有一个果农和蜂农，本来各自对于对方而言都是正外部性，但当两者都不考虑正外部性时，可能会出现果农少种树，蜂农少养蜂的情况，如果果农向蜂农购买蜂蜜，蜂农向果农购买水果，这就会增加这种正外部性。这种多方的利己形式也是很多企业进行多种类型经营的原因之一。</li><li>利益各方签订合约：合约作为一种强制约束来保证双方的无效率。</li></ul><h3 id="科斯定理"><a href="#科斯定理" class="headerlink" title="科斯定理"></a>科斯定理</h3><p>科斯定理说明，私人经济主体可以解决他们之间的外部性问题，无论最初的权利如何分配，有关各方总可以达成一种协议，在这种协议中，每个人的状况都可以变得更好，结果是有效率的。就像前面的果农和蜂农之间，只要双方产生交易，就可以出现正外部性，使得市场便得有效率，同样负外部性也可类似解决。</p><h3 id="私人解决方案并不总是有效"><a href="#私人解决方案并不总是有效" class="headerlink" title="私人解决方案并不总是有效"></a>私人解决方案并不总是有效</h3><p>有时利益双方并不能很好的解决外部性问题，主要原因是交易成本。比如果农和蜂农之间交易需要起草和执行合约所需要律师费用等。另外，当利益各方人数众多时，达成有效率的协议就会变得非常困难。比如一个工厂像河流里排污，影响力渔民捕猎，那渔民可以向工厂支付，以使其放弃排污，但是如果有很多渔民，要协调所有的人来与工厂协商就几乎是不可能的。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 市场效率 </tag>
            
            <tag> 市场失灵 </tag>
            
            <tag> 正外部性 </tag>
            
            <tag> 负外部性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《未来简史-从智人到智神》</title>
      <link href="2021/06/05/wei-lai-jian-shi-cong-zhi-ren-dao-zhi-shen/"/>
      <url>2021/06/05/wei-lai-jian-shi-cong-zhi-ren-dao-zhi-shen/</url>
      
        <content type="html"><![CDATA[<p><strong>《未来简史-从智人到智神》，尤瓦尔·赫拉利著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>人类在20世纪使得饥荒、瘟疫和战争的发生概率不断减小，那么在21世纪会是什么事情成为人类的新议题呢，尤瓦尔赫拉利认为是获得永生、幸福快乐和化身为神。</p><p>在21世纪，人类的第一大议题很有可能真要转向长生不死的目标。在对抗了饥荒和疾病之后，对抗衰老与死亡不过是这场战役的延续，更体现了当代文化最看重的价值：人的生命。</p><p>人类未来的第二大议题，可能是要找出幸福快乐的关键，这里需要了解快乐是什么，赫拉利认为，幸福快乐的天花板有两大支柱，分别属于心理与生理层面。在心理层面，快乐与否取决于你的预期，而非客观条件，快乐原于对预期的满足。从生理层面来说，不管是预期还是幸福感，其实都是由我们的生化机制控制的，而不是由经济、社会和政治局势决定的。</p><p>在21世纪，人类的第三大议题就是为人类取得神一般的创造力及毁灭力，将“智人”进化为“智神”。这第三项议题显然会将前两项议题纳入其中，而且也正是由前两项议题推动形成的。</p><p>人要升级为神，有三条路径可走：生物工程、半机械人工程、非有机生物工程。当然以上三个议题以及实现的路径只是反映了自由人文主义的传统理想。人文主义长期崇拜人类的生命、情感及欲望，于是人文主义文明希望让人有最长的生命、最大的幸福、最强的力量。换句话说，不死、快乐和神性，只是“过去的”未来，也就是基于过去300年的思想和希望而指向的未来。然而，基于21世纪将诞生的新想法、新希望而形成的真正的未来，可能与过去的未来完全不同。</p><p>在人类追求长生不死、快乐和人性的路上，尤瓦尔赫拉利还努力在本书中阐述人类在未来会面临的三个问题。</p><p>1.生物真的只是算法，而生命也真的只是数据处理吗？</p><p>2.智能和意识，究竟哪一个才更有价值？</p><p>3.等到无意识但具备高度智能的算法比我们更了解我们自己时，社会、政治和日常生活将会有什么变化？</p><p>生物如何看待这三个问题，以及采取什么样的应对措施，将直接影响着人类未来的发展。尤瓦尔赫拉利也给出了可能的发展趋势。</p><p>1.科学正逐渐聚合于一个无所不包的教条，也就是认为所有生物都是算法，而生命则是进行数据处理。</p><p>2.智能正与意识脱钩。</p><p>3.无意识但具备高度智能的算法，可能很快就会比我们更了解我们自己。</p><p>看完全书，给人的感觉就是很宏大，从战胜饥饿疾病到永生，从人文主义到科技主义再到数据主义，从碳基生物到硅基生物，人类真的好像在从智人到智神发展。 </p><hr><p>◆ 第1章 人类的新议题</p><p>以前我们定义战争，是纯粹意义上的热化战争，但今天的战争含义则广泛的多，金融制裁、贸易战是当下最普遍的战争。如果因为金融制裁导致大量的失业、贫困、疾病，这也应该算是战争成本。而且今天的丛林也不同于以前的丛林，在全球化的今天，国家与国家之间有千丝万缕的联系，在全面热化战争下，谁也无法独善其身。那为什么这种情况下各国还要发展军事，发展军事不一定是为了战争，很大程度上是为了制衡，是一种震慑力量，不妨认为是不见刀枪的心理战。</p><blockquote><p>目前“和平”这个词已经有了新的意义。过去想到和平，指的只是“暂时没有战争”；而现在想到和平，是指“难以想象会有战争”。1913年说到法德两国和平，意思是法德两国此刻并无战事，但明年谁知道会怎样；但我们现在说法德两国和平，意思是在任何可预见的情况下这两国都不可能爆发战争。</p></blockquote><hr><p>如果每个人都以百岁人生的预期去计划，那改变的就不只是年龄，还有我们的学习时间，职业规划，婚姻生活，甚至是市场周期，政治决策。现在再去看平均年龄只有40岁的古代，15岁结婚已经相当于今天的30岁，还会觉得早吗？</p><blockquote><p>想象一下，如果人能活到150岁是什么概念。就算40岁才结婚，后面仍然有110年可活。希望这段婚姻能持续110年，这个想法实际吗？所以，像现在多次结婚的情形可能会日益普遍。</p></blockquote><hr><p>我们都有追求幸福快乐的权利，但是如果真的每时每刻我们都很辛福快乐，不再有新的追求，不会有性情波动，不会再想获得新的愉悦，不会渴求其他的满足，这还是追求幸福快乐权利的初心吗？想象一下这样活着好像也没啥意思。</p><blockquote><p>从技术角度来说，只要从松鼠的大脑下手，确实能够做到这一点。而且谁知道呢？或许几百万年前就出现过这样幸运的松鼠。但是，如果是这样，这只松鼠的一生将极其快乐但也极其短暂，让这种罕见的基因突变迅速画下句点。个中原因在于，觉得快乐的松鼠再也不会努力去找更多坚果，更不用说求偶交配了。</p></blockquote><hr><p>5000年前，如果一个人沉睡100年后再苏醒过来，可能并不会发现世界发生了多大的变化，该怎么打猎还是怎么打，该怎么编织还是怎么编织，不过今天，如果一个人沉睡100年，注定会和社会脱节。在漫威系列电影中的美国队长和钢铁侠之间的距离，可谓比较好的诠释着这一点。</p><blockquote><p>尼安德特人不用懂纳斯达克指数，毕竟这两者之间相隔几万年之久。但由我们现在的意义所建构的世界，却可能会在几十年内崩塌。仅仅希望自己到时候已经死了，免得与时代脱节，可能还不够可靠，就算到了2100年还不会有“智神”走在路上，各种让智人升级进化的尝试也很有可能在21世纪内就让世界大为改观。科学研究和科技发展的速度，将远远超过我们大多数人的预期。</p></blockquote><hr><p>了解历史是为了更好的理解现在，未来不可预测，不过是演变过程可能会和过去某一个场景惊人的相似。就像私人住宅和公共建筑之间的那一块草坪，就是因为从中世纪英法诞生出的贵族的标志。</p><blockquote><p>在私人住宅和公共建筑前设置一片草坪的想法，诞生于中世纪晚期英法两国贵族的城堡。到了现代早期，这个习惯已经根深蒂固，成了贵族的标志。</p></blockquote><hr><p>本书第一部分，着眼于智人与其他动物的关系，希望理解我们这个物种究竟有何独特之处。第二部分将会审视智人在过去数千年间创造出了怎样光怪陆离的世界，又是怎样把我们带到了现在这个十字路口。在更了解人类、更了解人文主义信条之后，第三部分描述的是我们目前的困境以及可能的未来。</p><blockquote><p>为了理解这一切，我们需要再回头，了解智人究竟是怎样的生物、人文主义如何成为主导世界的宗教，以及为什么实现人文主义的梦想反而可能导致人文主义的崩塌。这就是本书的基本安排。</p></blockquote><hr><p>◆ 第2章 人类世</p><p>人类世，短短数万年时间，让生物群落发生的变化可能已经超越了6500万年前那颗灭绝恐龙的小行星造成的影响。从非洲开始，每到一个大陆和岛屿，对当地带来的几乎是灭顶之灾，即使当时还没有小麦，更别说金属工具。</p><blockquote><p>早在几万年前，智人的石器时代祖先就从东非走向地球的四面八方，每到一个大陆和岛屿，就让当地的动植物发生了改变。他们灭掉了所有其他人类物种、澳大利亚90%的大型动物、美国75%的大型哺乳动物、全球大约50%的大型陆上哺乳动物；而且此时他们甚至还没开始种小麦，还没开始制作金属工具，还没写下任何文字，也还没铸出任何钱币。</p></blockquote><hr><p>这个有意思，圈养动物放回自然，很大可能会被更高级的食肉动物吃掉，幸运的话可能会得疾病而亡或身体老化而亡，这真的就比被人类宰杀仁慈吗？结局都是悲惨的，如何评判的重点不在于它们死亡的方式，而是它们活的方式。人类残忍的地方不是杀死了动物，是家畜仍然保留着野生动物的种种生理、情感和社交需求，可这些对人类而言没有意义，人类一直用自己的方式给家畜带来无尽苦难。</p><blockquote><p>要说家畜命运特别悲惨，重点不在于它们死的方式，而是它们活的方式。被豢养的动物从古至今的生活状况，都受到人类的欲望和动物的需求这两个因素的影响。</p></blockquote><hr><p>不管是吃肉还是吃素，或是不吃肉但吃奶，这些本来就没有绝对的慈悲与残忍。他们都来源于一个故事，这个故事熏陶了接受它的人，形成了某种共同想象。基督教是一种想象，印度教是一种想象。</p><blockquote><p>举例来说，印度教虽然认为牛是神圣的动物并禁吃牛肉，但仍然能为乳品业找到冠冕堂皇的借口，声称牛是一种慷慨的生物，很渴望和人类分享它们产的奶。</p></blockquote><hr><p>◆ 第3章 人类的特质</p><p>如果说人是有灵魂的，而其他动物没有，以此来彰显人的优越感，那这个观点的支持者一定很怕达尔文的进化论。因为进化论证明人类也是从猿类动物进化而来的，那从没有灵魂的猿到有灵魂的人，灵魂是从什么时候凭空出现的，进化是连续的过程，而灵魂的出现是跳跃的，这非常离谱。</p><blockquote><p>可能有人会说，人类的灵魂就不是进化来的，而是在某一天突然出现的，而且完整无缺。可是，这一天究竟是哪一天？我们仔细审视人类的进化历程，却怎么找都找不出这一天。</p></blockquote><hr><p>感觉不管是证明后到底是意识还是无意识，都可能是条不归路。不妨回过去看看我们希望证明的意识这个词代表着什么，是一种脱离物质的存在，还是一种碳基神经网络上建立起来的高层次逻辑关系。尝试定义它，或许可以更好的理解高等动物一般动物、植物的差异。个人比较赞成是碳基网络上建立的逻辑关系，这符合进化论，也符合我们是算法组合体的观点。</p><blockquote><p>与此同时，究竟该由哪方来负责举证？我们到底是该先把狗视为无意识的机器，直到证明并非如此为止，还是要把狗看作像人类一样有意识，直到出现令人信服的</p></blockquote><hr><p>语言和文字的出现绝对是人类成为高等智慧生物最重要的决定性因素，远超过用火和使用工具。如果说用火和使用工具对其他动植物来说是上帝视角，那语言和文字就是上帝视角。</p><blockquote><p>只有人类知道自己是个有着过去和未来的长久延续的自我，或许是因为只有人类可以用语言来思考过去的经验以及未来的行动。其他动物则只能活在当下，就算它们似乎还记得过去或是在规划未来，也只是在对当下的刺激或瞬间的冲动做出反应。</p></blockquote><hr><p>这个太神奇了，如果一个人用我们不知道的语言问3乘4等于多少，或许基本上没有人能做到通过观察提问者的反应来获得正确答案，可是马做到了，因为马虽然没有语言，但是他们可以通过肢体反应进行交流。换另一个角度，我们人类定义的3乘4等于12，难道就不可能是更高级的智慧生物给我们制造的一个逻辑场景吗，而且可能在那个世界3乘4并不一定等于12，只是我们这种算法正好可以解释我们现在认识的世界。</p><blockquote><p>原来，汉斯之所以能给出正确解答，靠的是观察提问者的身体语言和面部表情。如果有人问汉斯3乘4是多少，它从过去的经验知道，提问者心中会期待它点蹄点到一定次数。于是它开始点着，并且仔细观察提问人。随着汉斯慢慢接近答案，提问人会越来越紧张，并在它点到正确数字时达到顶峰。汉斯知道的是如何从人的肢体语言和面部表情看出这一点。于是它就停下来，看着原本的紧张变成难以置信或是哈哈大笑。于是汉斯知道，自己又答对了。</p></blockquote><hr><p>人类的高级之处，在于我们能在社会关系中建立起很多共同想象，不管是从贝壳到货币，从部落到国家，从氏族到教派，基于这些共同想象，有了信任，有了协作。往小了说，一个家庭，一个公司，要想稳固，也需要一个共同想象，我们通常称之为生活和工作的价值和目标。</p><blockquote><p>没有任何其他动物能对抗我们，并不是因为它们没有灵魂或没有心灵，而是因为它们没有必要的想象力。</p></blockquote><hr><p>◆ 第4章 虚构的力量</p><p>在莎士比亚时代，牛津大学的的毕业生离开学校时只有两种可能，要么拿到学位，要么没拿到学位，而不会有具体的分数，直到工业时代，才开始有具体的分数。这看似没有太大的变化，只是一种评定结果变得更加具体了而已。不过从另一个角度看，这是从定性分析到定量分析的转变，这极大的丰富了不同纬度，不同环境，不同时间内的对比可能性，让社会的复杂性得到显著提升。</p><blockquote><p>直到工业时代出现了大众教育系统后，才开始固定使用精确的分数。先是工厂和政府习惯用数字语言来思考，接着学校也开始效仿，并根据每个学生的平均分数来判断学生的素质；至于老师和校长的素质，则是根据学校的总体平均分数来判断。官僚体系采用这个标准之后，现实就变了。</p></blockquote><hr><p>看到这样的描述，当代城市人中的多数可能会选择第一种，徒步、漂流、露营、垂钓，采蘑菇，这已经是一个比较奢侈的度假生活，而第二种体验则充满了无奈和被迫。不过描述在一定程度就已经带有主观判断了。</p><p>换另一个角度，如果在第一种描述中增加，过夜的时候需要面临可能随时出没的野兽，可能还需要半夜战斗，独木舟也不是一直都管用，当遇到激流还会有翻覆的危险，如果钓不上鱼，那么这天就需要饿肚子了，采蘑菇也需要冒着生命危险，因为很多毒蘑菇还不能被完全识别出来。同样，如果再第二种描述中增加，工作的时候只需要做着或站着，不需要在烈日下奔波，过夜的时候不需要担心突如其来的危险，而且上楼有自动电梯，不需要徒步爬楼，出门的时候不需要带大量的贝壳或其他货币等价物，可以直接使用自己的电子账户支付，当钱不够的时候，还可以向银行借用。</p><p>这样一来，愿意选第二种体验的人可能就会多一些了，这不同的角度至少告诉我们三个道理，第一，一个描述或一个故事总会带有一定的主观色彩，尽量有自己认识世界的方法，这样不至于被牵着鼻子走；第二，古人的生活看似悠哉，其实也有他们的不易，今天的生活多么的悲惨，其实也有很多的幸运；第三，我们经常会向往过去的惬意和未来的智能，而忽视一些潜在的风险以及当下的幸福。</p><blockquote><p>假设有以下两个度假体验行程任你挑选：石器时代体验：第一天，在原始森林徒步旅行10个小时，在河边开阔的空地搭营过夜；第二天，独木舟顺流而下10个小时，在小湖旁露营；第三天，向当地人学习如何在湖里钓鱼、在附近的树林里采蘑菇。现代无产阶级体验：第一天，在受到污染的纺织工厂工作10个小时，在拥挤的公寓大楼过夜；第二天，在当地百货公司担任收银员10个小时，回到同一栋公寓大楼睡觉；第三天，向当地人学习如何开立银行账户、填写贷款表格。你会挑选哪一个？</p></blockquote><hr><p>公司、货币、国家，这些都是人们的共同想象，初衷是发明更好的帮助人们进行协作，提升社会效率，本质上是为人类服务的。不过今天，更多时候好像是人们为这些曾经发明出来的概念服务，甚至牺牲生命，而且还经常心甘情愿，难免感觉有点悲哀。如果未来有一天人工智能足够强大到可能同志人类，可能不是武力征服，而是迁移默化的成为人们的一种共同想象，而人类还乐意为其服务，想想我们今天的智能手机，信息流推荐，智能搜索，隐私保护，我们似乎已经在沦陷的路上了，而且还经常乐意为其效劳。</p><blockquote><p>公司、货币和国家，都只存在于我们的想象之中，是人类发明了这些概念，好让它们为人类服务；为什么最后反而是人类为这些概念服务，甚至牺牲性命呢？</p></blockquote><hr><p>◆ 第5章 科学与宗教之争</p><p>很多时候就是这样，我们可以使用物理实验、经济模型和数学方程式，计算出一个项目的成本和收益，但是当面对虚拟的价值观和意识形态时，就很难有直接的参考性，这种经济价值雨伦理的比较，可能永远不会有结果，只是看在具体场景下，人们更重视什么吧。</p><blockquote><p>不论任何物理实验、经济模型或数学方程式，都无法确定究竟是发出几千兆瓦的电、赚进几十亿元人民币比较有价值，还是保住某座古塔或白鳍豚比较有价值。因此，政府无法只基于科学理论来运作，还得需要一些传统价值观或意识形态才行。</p></blockquote><hr><p>人类文明的进步就像蝴蝶效应，随着时间的推移，历史上一个很小的动作，到今天可能就是翻天覆地的变化，甚至影响今天生活的意识形态、价值观。文明的存在就像偶然中的必然。</p><blockquote><p>因此，从目前最科学的证据来看，《利未记》里反对同性恋，反映的不过只是古代耶路撒冷几个祭司和学者的偏见。虽然科学无法判断人类究竟是否应该服从上帝的旨意，但对于《圣经》的源头就有许多话可说。</p></blockquote><hr><p>科学在于追求价值，宗教在于追求某种价值观，以前觉得这两者好像很难放在同一个纬度比较，但是当看到这里，忽然间有一点明白。看似这两者都是在追求截然不同的真理，不过整体而言，它们都是在维护秩序和力量，从这里入手，两者的目的相同，一拍即合。</p><blockquote><p>宗教最在乎的其实是秩序，宗教的目的就是创造和维持社会结构；而科学最在乎的则是力量，科学的目的是通过研究得到力量，以治疗疾病、征伐作战、生产食物。就个人而言，科学家和神职人员可能很在意真理；但就整体而言，科学和宗教对真理的喜好远不及秩序和力量。</p></blockquote><hr><p>◆ 第6章 与“现代”的契约</p><p>信任经济绝对算得上21世纪初最伟大的发明之一，它就像一个杠杆，把世界经济拉动到了一个全新的高度。当然也正是对这种信任经济的过度包装，导致了2008年的次贷危机。</p><blockquote><p>到了现代社会，因为人们开始相信未来，产生了信贷这项奇迹，才终于打破这个恶性循环。信贷正是“信任”在经济上的表现。</p></blockquote><hr><p>◆ 第7章 人文主义革命</p><p>什么是艺术，我一个外行人认为可能很难说得清，现在很多以前的名画，在我看来可能一文不值，但就是有很多人愿意为其掏出成千万甚至上亿的金钱，能说那些不是艺术了，在我看来不是，在别人看来可能就是。所以艺术是什么，每个人的眼中的艺术都不一样，重点是看能不能触动那人心中的共鸣，愿不愿意用自己的信仰、金钱、时间为其买单。</p><blockquote><p>“只要有人认为是艺术，就是艺术；有人认为美，就是美。”如果有人认为一个小便池是一件美丽的艺术品，它就是艺术品。难道还有什么更高的权威，能说大家都错了？</p></blockquote><hr><p>什么是人文主义，尤瓦尔赫拉利认为，人文主义政治认为选民可以做出最好的选择，人文主义经济认为顾客永远是对的，人文主义美学认为看的人觉得没就是美，人文主义伦理认为感觉对了就去做，人文主义教育认为语言为自己想。</p><blockquote><p>但如果我不再感觉到上帝的存在，如果我的内心突然告诉我世上没有上帝，我也就不再相信。不管是哪一种，权威的本源都在于我自己的感觉。所以，就算有人说自己信上帝，其实他更信的，是自己内心的声音。</p></blockquote><hr><p>接近死亡，反而让他感到前所未有地活着。现在安逸的生活一天天的过，以至于我们不会去想为什么能活着，活着是为了什么。当停电的时候才会知道原来电对我们这么重要，当汽车限行的时候才知道出行已经不愿意多走一步路，当新冠来临的时候才知道病毒原来那么恐怖。</p><blockquote><p>接近死亡，反而让他感到前所未有地活着。</p></blockquote><hr><p>在二十世纪，有抗生素这样的科学技术，有计算机这样的科技产物，也有女权主义这样的意思形态，而在宗教里，几乎没有什么值得提及的东西，这说明在社会的进步中，宗教似乎并没有起到什么作用，甚至还带来了很多因为种族冲突导致的流血战争。可是，历时上千年，为什么今天还有宗教形式，它的优越性来自何处。或许那是人们能自发的协作起来，发明抗生素，制造计算机，推动女权主义的背后的编织的力量，一种共同想象的力量。</p><blockquote><p>20世纪最有影响力的发现、发明或创造是什么？你会发现这个问题很难回答，因为候选项实在太多：有抗生素之类的科学发现，有计算机之类的科技发明，也有女权主义之类的意识形态创造。让我们再问问：在20世纪，伊斯兰教或基督教等传统宗教，最有影响力的发现、发明或创造是什么？你会发现这个问题也很难回答，但这次是因为候选项实在太少。在20世纪，神父、拉比和穆夫提究竟有何发现，能和抗生素、计算机或女权主义相提并论？细察这两个问题后，如果说21世纪将会发生重大改变，你认为会出自何处？是“伊斯兰国”（Islamic State），还是谷歌？</p></blockquote><hr><p>◆ 第8章 实验室里的定时炸弹</p><p>如果想要人相信某种假想实体，就要让他们牺牲一些有价值的东西。看起来有点讽刺，这不只是被沉默成本绑架，更重要的可能是每个人都不愿意否定自己曾经的选择，而且每多付出一点，态度会越坚决。</p><blockquote><p>早在几千年前，神职人员就发现了这个原则，许多宗教仪式和训诫都以此为基础。如果想让人相信某些假想实体，比如神或国家，就要让他们牺牲一些有价值的东西。牺牲令人越痛苦，他们就越会相信牺牲奉献的对象确实存在。</p></blockquote><hr><p>◆ 第9章 大分离</p><p>未来计算机应该不会直接统治人类，最有可能是人类心甘情愿的为计算机提供算力、数据、能量、空间，目的是为了其能更好的为人类服务，逐渐演变成一种共生关系，人类开始越来越离不开计算机，就像我们今天已经离不开互联网络一样。现在的共生关系下还是人类占据主导地位，随着计算机作为工具逐渐替代人类的一些原始工具，未来是人占据主导地位，还是计算机占据主导地位，就不好说了。</p><blockquote><p>问题在于，都已经有了这样有智慧的计算机程序，我为什么还需要学习热力学或几何学？</p></blockquote><hr><p>20世纪因为战争、工业、制造业，是一个大众的时代，富人更加富裕的同时会考虑穷人对他们的价值，为穷人提供更好的生活环境和提高穷人的健康水平有利于富人获得更多的财富和政治权利，但是21世纪随着计算机和人工智能的发展，富人与穷人之间的不平等关系可能会再升级，富人没有动力再为穷人提供更好的生活条件，真担心这种马太效应下，20年后每天生活不足1美元的穷人会不止10亿。</p><blockquote><p>但这种大众的时代可能已经结束，针对大众的医学也将随之走入历史。随着人类士兵和工人让位给算法，至少部分精英阶层会认为，无须再浪费资源为大量无用的穷人提升甚至是维持基本的健康水平，而应该集中资源，让极少数人升级到超人类。</p></blockquote><hr><p>20世纪的克服饥荒、瘟疫和战争，都是为了所有人富足健康与和平，这是一个大众的时代。21世纪的新议题是获得永生、幸福快乐、化身为神，这些一定程度上只有富人有资源和权利去实现，这种对不平等的加剧，到时候富人看穷人可能就像19世纪欧洲人看待非洲人一样。</p><blockquote><p>人类在20世纪的伟大成就——克服饥荒、瘟疫和战争——都是为了让所有人享有富足、健康与和平。至于21世纪的新议题：获得永生、幸福快乐、化身为神，也同样希望为全人类服务。然而，由于这些计划的目的在于超越而非维持基本要求，最后就可能创造出新的超人类阶级，砍断自由主义本源；超人类看待一般人，就会像是19世纪欧洲人看待非洲人的情况。</p></blockquote><hr><p>◆ 第10章 意识的海洋</p><p>现代人已经患上了错过恐惧症，总希望在有限的时间里尽可能的享受更多，总担心错过什么，可现在手里的东西比以前任何时候都多，有点像猴子掰玉米，不同的是猴子知道掰越来越大的，而人根本很难对比下一个选择是不是更有价值。</p><blockquote><p>现代人类已经患上“错过恐惧症”（Fear Of Missing Out，FOMO），总在担心自己错过了什么；虽然手中的选择比以往任何时候都多，但选了之后又很难全心全意对待。</p></blockquote><hr><p>◆ 第11章 数据主义</p><p>如果把美国政府每天接受的信息随机去掉50%，他们或许在一些决策上能更优于现在会做出的决定，到接受的资源超过了自身处理容量，就不得不为多余的需要寻找新的容量，这会和最初的目的背道而驰，降低处理效率，所以有时候多不一定就是好。</p><blockquote><p>对于世界上正在发生什么事，历史上从来没有任何政府能像现在的美国这样知道得如此清楚，但也鲜有政府能够像现在的美国一样反应笨拙。这就像打牌的时候明明知道对手有什么牌，却不知怎么搞的，总是一输再输。</p></blockquote><hr><p>在过去7万年里，人类从非洲大陆走出来不断扩散，再分成不同群体，到今天各个群里借助科技互连又合并在了一起。那后面人类会再次分开呢，还是真的形成一个人类命运共同体，而且在万物互连之后，人类相比于其他物品存在的意义又在什么地方。</p><blockquote><p>在过去的7万年间，人类先扩散，再分成不同群体，最后再次合并。但合并并不代表一切回到原点。过去的多元族群融入今天的地球村时，各自都带着思想、工具和行为上的独特传承，呈现一路走来的收集与发展成果。</p></blockquote><hr><p>以前个人写日记只是基于人文主义习惯，为了给自己看，今天写文字则是为了更好的记录和分享，不管这是因为科技主义还是数据主义，都好像已经不再单独的以个人为本，更多是以网络的连接为本，分享俨然已经成为一种需求，一种表达自己存在的方式。</p><blockquote><p>前几代人中，写日记只给自己看是很常见的人文主义习惯，但现在很多年轻人会觉得这完全没道理。如果没有其他人读到，写了岂不是白写？现代的新座右铭是：“如果你体验到了什么，就记录下来。如果你记录下了什么，就上传。如果你上传了什么，就分享。”</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 人文主义 </tag>
            
            <tag> 科技主义 </tag>
            
            <tag> 尤瓦尔·赫拉利 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画中国史5》</title>
      <link href="2021/05/05/ban-xiao-shi-man-hua-zhong-guo-shi-5/"/>
      <url>2021/05/05/ban-xiao-shi-man-hua-zhong-guo-shi-5/</url>
      
        <content type="html"><![CDATA[<p><strong>《半小时漫画中国史5》，二混子陈磊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>朱元璋建立了大明王朝，之后经历了16位皇帝，最后被吴三桂放大清过了三海关，大明算是告一段落，大清经历了雍正、康熙和乾隆三大盛世，国力一度强盛，可是同时期的西方也经历了文艺复兴、工业革命，实力大增。清朝最后一段时间内有慈禧光绪，外有坚船利炮，终究大清还是亡了。</p><hr><p>◆ 一、大明王朝（一）：全能型创业者朱元璋</p><p>朱元璋虽然创建了大明王朝，但年轻时候过得缺并不安稳，做过放牛娃，做过和尚，甚至还做过乞丐。不过也正是因为这些经历，让他特别能体察人民疾苦，所以上任后马上给老百姓减赋，分田地，减少兵役等。当然这种出生也有坏处，就是内心有点自卑，总觉得有权利在握的人想害他，所以把当时和他打江山的人都杀了。其中还把宰相胡惟庸给连锅端了，甚至把宰相这个职位都给整没了，自己直接官六部，而且为了培养自己的保镖，还设立了锦衣卫，和六部平起平坐，当然自己晚年也把锦衣卫给废了。朱元璋外大搞政权的时候，他的给个儿子都在边境做藩王，等他挂了后，把自己的皇位传给了长孙，长孙觉得藩王实力太强，要削藩，可以藩王没削成，自己被削了，于是朱棣上位，就是后面的明成祖。因为朱棣以前就在北京当藩王，所以上位后马上把首都从南京迁到了北京。另外朱棣重新启用了锦衣卫，而且还开始重用太监，设立了东厂，同样和六部同级，郑和就是那会出名的。</p><blockquote><p>锦衣卫和东厂这明朝两大特产，并称厂卫。</p></blockquote><hr><p>◆ 二、大明王朝（二）：闹心事最多的六个皇帝</p><p>明朝一共有16个皇帝，中间阶段主要有三大麻烦，外敌有狼一样的对手，奸臣就像猪一样的队友，时不时的谋反就像养不熟的猫。</p><blockquote><p>虽然本章介绍的这六个皇帝各有各的问题，各有各的闹心，但这些麻烦还不是明朝最大的问题。</p></blockquote><hr><p>◆ 三、大明王朝（三）：隆庆皇帝最佛系；万历皇帝不上朝</p><p>隆庆是明朝最佛系的皇帝，上两代皇帝一直在和倭寇打仗，甚至还有一个出名的抗倭将领戚继光，当然基本上也把倭寇消灭了。隆庆看局势大好，就把海禁关了，开始与海上自由贸易。北方蒙古虽然退回了蒙古国，不过实力还是有的，因为可汗与他孙子的爱情纠葛，把明朝牵扯进来，就这样又义和了。隆庆为了找人给他出谋划策，还建立了内阁，虽然只是建议而不实际掌权，但人家是实在实在的皇帝身边的人，内阁的大哥就是首辅，首辅的江湖地位个宰相差不多，当然隆庆在位只有六年就驾崩了，后来的皇帝叫万历，这是明朝在位时间最长的皇帝，长达48年，当中有一个叫张居正到首辅也达到人生巅峰，君臣一心创造了万历中兴。可惜在万历十年，张局正就挂了，没有了大秘书的万历皇帝对上班失去了兴趣，于是决定不上朝，就这样不见大臣，开始通过奏折遥控外面的世界，甚至哈哈打赢了三场战役，其中一次就是在朝鲜打日本人。可是仗打着打着，就没钱了，所以开始加重赋税，甚至还让太监们去各地监工。这时候国内有点民不聊生，北方有一个女真的爱新觉罗家族崛起了，这次散装的家族成立了后金。接下来就是和明朝开打。</p><blockquote><p>万历基本顺风顺水的职业生涯，在最后关头，晚节不保。然而努尔哈赤给明朝带来的，不仅仅是皇帝个人履历上的缺憾。</p><p>大明朝根本想不到，这样一个几乎没用正眼瞧过的蛮夷之地，就要令中原变天。</p></blockquote><hr><p>◆ 四、大明王朝（四）：站在王朝终点的三个苦命皇帝</p><p>万历之后的皇帝是他的儿子，可是这个儿子也是命苦，本来万历不喜欢他，可他是长子，没办法只有给他当皇帝，所以这个儿子一辈子都在被宫斗，更惨的是这个儿子当太子二十多年，当皇帝也就一个来月就被毒死了。接下来皇位就给了万历的孙子，这个皇帝喜欢搞木工，不喜欢政事，那国家大事怎么办，出来一个知名大太监魏忠贤，他专门挑皇帝五年木工的时候汇报，皇帝哪有闲心管他，让他看着办，所以魏忠贤就从一个传话的变成了发号司令的，还领导着一个东厂，从此不可一世，除了皇帝身边，江苏还有一个东林党看不惯一些朝廷的知识份子，所以两党开始硬刚，阉党就是东林党叫出来的。但毕竟魏忠贤在皇帝身边可以发号司令，所以东林党也没活跃多久就被赶出了朝廷。之后还出现了一个皇帝，不过就已经是明朝的末代皇帝了，这个皇帝上台把魏忠贤治了，可感觉身边没人用，还是在用太监，甚至打仗的时候还让太监去监军，祸不单行，这时候各种旱灾，蝗灾，瘟疫也没少过，农民也不乐意了，开始到处造反。这时候吴三桂在边疆挡着大清，也就是后金，而内部李自成把吴三桂的家给抄了，吴三桂恼火得五年了一个决定，把三海关打开，想借情军的手去米饭李自成，这样清军在三海关耗了几十年，一下子还拿到一张邀请函，到了紫禁城，是把李自成打败了，可是也就不走了。</p><blockquote><p>结果清军一来，他就逃出了紫禁城，从此一路兵败辗转，最后战死在湖北的九宫山。</p></blockquote><hr><p>◆ 六、大清帝国（一）：走出东北的女真人</p><p>女真部落主要的活动区域就是现在的东北，这个地方冬天比较冷，所以一有机会就往南走，早在宋朝就没有停息过脚步，可是刚冲出东北，就遇上冲出蒙古的蒙古人，好不容易蒙古森走了，又来一个厉害的明朝，所以女真一直在韬光养晦，前后也和明朝打过两次，可是都被拦截在了山海关。直到吴三桂让清军帮忙去打李自成，这样清军就名正言顺的入住了北京。这时候大清的皇帝已经不再只是满洲里，而成了整个中国的皇帝。这时候的皇帝就是顺治，只是他还小，由叔叔多尔衮摄政。</p><blockquote><p>如果顺治能活得久一些，大概会成为一个很不错的皇帝，但他把这个机会留给了他的儿子——爱新觉罗·玄烨。</p></blockquote><hr><p>◆ 七、大清帝国（二）：康熙、雍正与乾隆</p><p>顺治皇帝只活了24岁，可他光儿子就有8个，以后登基的就是康熙，上台的时候才8岁，14岁就把骄傲自大的鳌拜给整趴下了，而且还努力搞经济建设，国内一片大好。当时是吴三桂放清进来的，可是进来以后清不走了，所以吴三桂又开始反清，可惜被削了。另外还做了一件事，收复台湾，台湾刚收复，俄国人又来了，两边都是年轻强大的国家，签订了尼布楚条约，算是大哥和大哥之间的平等约定，也是这里面，第一次用中国称呼自己。为了选好接班人，康熙活了六十八岁，生了五十多个娃，简直就是走量不包质，经过激烈角逐，四阿哥胜出，就是后来的雍正。雍正知道自己以前争皇位的苦，所以早早就把皇位继承人选好了，放在乾清宫高高的牌匾后面，就这样，皇位顺利的传到儿子宏历手里，就是后面的乾隆。乾隆在位时，中国的疆土非常大，仅次于曾经的蒙古帝国，而且当时国库充裕，国力达到鼎盛。</p><blockquote><p>1795年9月3日，在乾隆皇帝执政的第60年，他——没死。但康熙当了61年皇帝，乾隆不好意思超过爷爷，于是光荣退休，做了太上皇。</p><p>而遗憾的是，大清已经走上了下坡路。</p></blockquote><hr><p>◆ 八、大清帝国（三）：鸦片战争与不平等条约</p><p>乾隆走的时候虽然清朝国力达到鼎盛，不过也有隐患，一个是和珅，另一个是农民起义，典型的就是白莲教。不过还好，嘉庆皇帝都顺利处理了。可是这点成果放在19世纪，真不算个啥，放眼欧亚大陆的另一端，在明朝的时候欧洲人搞了个文艺复兴，发展速度就像绑了个小火箭，之后又是工业革命。可是西方就这么点人，这么点地，于是来到亚洲，首先就把印度拿下了，然后来到中国，吃了一嘴闭门羹，这会儿大清正在闭关锁国，自己要啥有啥，啥都不缺，可是西方人又特别喜欢中国的瓷器，想方设法要和中国贸易往来，想破脑袋终于找到一个东西，那就是鸦片。其实大家都知道鸦片不是好东西，雍正年间就禁国，到乾隆年间，看到鸦片可以收很多税，所以放开了，到嘉庆年间又重新禁烟。直到道光年间，全国很多地方都在吸鸦片，于是有了林则徐虎门销烟。本来鸦片不是什么好东西，被烧了英国人也不能说啥，然而几个月后英国水兵在香港打死一个中国人，而且还压下来了，皇帝很生气，和英国人啥生意都不做了，英国人不愿意了，于是用大炮来打开中国人的大门，鸦片战争就开始了。</p><blockquote><p>《南京条约》的问题不只在于条约本身，而是让欧洲一些二三流的国家都发现了，原来传说中的大清帝国竟然这么弱，不趁机过来捞一票都对不起国家，对不起人民。</p></blockquote><hr><p>◆ 九、大清帝国（四）：大清帝国的三次自救</p><p>鸦片战争开始后，签订的第一个不平等条约就是南京条约，之后换来了十来年的稳定，后来英国人想重谈一下条约，想再捞一把，这时候皇帝不干了，然后英国开始找理由打中国，正好法国人也随便找了一个理由，组成英法联军开始炮轰广州，这就是第二次鸦片战争。清朝实在是打不过，直接被英法联军打到了北京，可这些侵略者没有直接进紫禁城，而是跑到了隔壁的圆明园抢砸了三天三夜，而且又放火烧了三天三夜。无数中国人智慧和汗水的结晶、人类历史上的文化瑰宝从此变成焦炭。以后又多了两个耻辱条约，北京条约和天津条约。这时候大清觉得自己有必要自救了，于是洋务运动开始，从西方购买先进的武器，自己创办军工厂、造船厂，组建的北洋水师，是当时亚洲排名第一、世界第九的海军。大清学会了西方人造武器，开始懈怠，而且慈禧太后心心恋恋的想过六十岁生日，无心扩充军备。而隔壁的日本呢，被外国人一炮打了开始明治维新，国力一下子增强，野心也大增，开始和清朝打仗，这就是甲午中日战争，这下清也没打赢，还签下了马关条约，洋务运动的成果被败得干干净净。马关条约以后，有志之士找到光绪皇帝，请求戊戌变法，可是这惹毛了慈禧太后，这场维新运动只持续了103天。西方人继续在大清为所欲为，弄得老百姓民不聊生，于是民间出现了义和团，这时候慈禧发现有人帮她对抗西方人，竟然官方支持，这一支持直接惹怒了西方人，他们成立八国联军侵华，后来签订了辛丑条约，之后没多久慈禧和光绪几乎同时挂掉，可新上任的皇帝才三岁，大清一夜之间出现了权利真空。到1911年10月10日，革命党人在武昌起义，开始了辛亥革命，救国运动开始全国蔓延。</p><blockquote><p>大清朝立国近三百年，正式灭亡。中国曾经有无数个朝代都经历了灭亡的那一天，但清朝这一天绝对不同于所有的“那一天”，这不仅仅是又一个朝代的覆没，连同整个中国的封建时代也走到了终点。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 明朝 </tag>
            
            <tag> 清朝 </tag>
            
            <tag> 二混子陈磊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画中国史4》</title>
      <link href="2021/05/04/ban-xiao-shi-man-hua-zhong-guo-shi-4/"/>
      <url>2021/05/04/ban-xiao-shi-man-hua-zhong-guo-shi-4/</url>
      
        <content type="html"><![CDATA[<p><strong>《半小时漫画中国史4》，二混子陈磊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>唐朝灭亡后，各地藩镇轮番开始广场舞，出现了五代十国。宋朝在一番征战之后终于杀了出来，可是最后一个皇帝宋徽宗天天劳命伤财搞琴棋书画，被金国人在开封点了全家桶，从此宋朝变南宋，南宋又猥琐发育了一百多年，终于等到蒙古国南下，一个从二手小弟晋升到亚欧大佬的存在，可惜这个不可一世的朝代只存在了还不到一百年，而且其中有四十年换了十个皇帝，也是神奇，最后在农民起义下被推到历史的沙滩上。 </p><hr><p>◆ 一、五代十国广场舞</p><p>唐朝灭亡后，各地的藩镇遍地开花，没什么大国家，为了稍微好区分一点，轮番出现五个朝代，为了和前面的朝代区分，外加这些人多多少少带有一些前朝代的血统，分别叫后梁、后唐、后晋、后汉、后周，前后出现了十来个国家，所以又叫五代十国。</p><blockquote><p>五代是主线，贯穿整个时代，十国当支线，作用是丰富构图，所以我们不用过多深入，有兴趣的话可以自己了解。</p><p>就这么十几个国家，故事也很普通：前蜀、后蜀、南吴、南唐、吴越、闽、南楚、南汉、南平、北汉……</p><p>它们有些在五代的时候就被灭了，有些还要死撑一会儿，等宋朝来削它们。总的来说，都是历史的过客。</p></blockquote><hr><p>◆ 二、大宋风云（一）：突如其来的陈桥兵变</p><p>建立后周的皇帝比较短命，只留下一个7岁的小朋友继位，这时候契丹南犯，赵匡胤带着一帮兄弟出去迎敌，半道上被兄弟们推举成了皇帝，契丹没打，回去把小皇帝打了。当上皇帝，赵匡胤也不放心，万一哪天也被造反了呢，于是和大臣们一顿酒，把兵权都缴了，这杯酒释兵权算是历史上最成功的股权交易了。可是赵匡胤也没得瑟多久，和自己弟弟喝杯酒去了，于是赵光义登上皇位。可是这会儿契丹又来了，还改成了大辽，实力不一般，内部消灭了十国，实力也不允许再打辽，所以签了一个每年用几十万红包换太平的协议，得了一百多年的塑料情。这时候西夏又来碰瓷，又每年得大红包。于是出现宋、辽、西夏三足鼎立。到处赔钱，宋其实也不好过，所以王安石开始变法，可是由于太激进，一直没推行下去，最后被司马光彻底搞砸。不过还好，至少可以稳中求进。</p><blockquote><p>所以不管新法还是旧法，只要心系江山社稷，结局总不至于太差。</p></blockquote><hr><p>◆ 三、大宋风云（二）：文艺青年宋徽宗上台</p><p>在大宋稳中求进的时候，一个文艺青年宋徽宗上台，天天劳命伤财搞琴棋书画，搞得国内一点不和平，宋江的水泊梁山就这会儿冒出来的，不过在大宋面前，着时没撑多久。外面辽也不太平，冒出来女真、金国。宋本来就打不过辽，然后金随便找了一个借口，南下要吃点宋，在靖康年间，把宋的皇帝都掳了去，史上叫靖康之变。</p><blockquote><p>宋徽宗大概以为有了新皇帝，自己就能全身而退，结果如意算盘竟然落了空。</p><p>这件事发生在大宋靖康年间，史称靖康之变。</p></blockquote><hr><p>◆ 四、大宋风云（三）：北宋被逼成了南宋</p><p>金国人打到宋朝首都开封，点了“皇帝全家桶”，还打包带走，把赵家老小全部绑到了东北。这下北宋是不行了，但是宋地域太大，金也管不下来，所以随便找了一个傀儡代管，可这人也不懂管理，把皇帝全家桶里的漏网之鱼宋徽宗的儿子，宋钦宗的弟弟赵构扶上了皇位，从此皇位还在赵家人手里，只是改成了南宋。金发现漏人了，马上南下抓人，可惜不识水性，在长江吃了亏，回家路上还遇上了岳飞，后来岳飞一直往北，打到了金老家。这时候，在秦桧的鼓捣下，宋高宗连下十二道金牌催岳飞回去，在风波亭砍了。金看岳飞没了，底气一下子起来了，和宋签了一个霸王条款，让赔地又赔钱，从此南宋也就快完了。</p><blockquote><p>当然了，除此之外，绍兴和议还有一个重要的意义：又迎来了二十年的和平期，这二十年的发展让南宋到达了世界经济、文化的巅峰。</p><p>二十年后，宋金哥俩又将开始新一轮的对决，不过那个时候，这些已经变成不足为虑的小问题了。</p></blockquote><hr><p>◆ 五、大宋风云（四）：彪悍的蒙古人来了!</p><p>南宋命还是硬，岳飞死后和金签了赔钱条约，过几十年国力提升了，又去打，打不过又赔钱，就这样来回了三次，南宋后来这一百来年，啥也没干，净一边提升国力一边赔钱了，直到金的西边铁木真统治了蒙古。铁木真统一蒙古后，往东把金打得片甲不留，在开封点了一个金国皇帝的全家桶，为了彻底灭掉金，来找南宋联手，南宋也想灭掉金，所以一拍即合就把金给灭了。以后南宋和蒙古约定淮河为界，也和平了几年，这段时间铁木真已经征服到了欧洲，南宋也觉得自己可以了，想跑到淮河以北说收复自己的失地，然后蒙古人不干了，要吃点南宋，可南宋进攻不行，防守还可以，蒙古发现直接南下不行，所以从西边绕一下，然后就南宋还没灭，先把云南的大理给灭了。正好这会儿蒙古内讧，打要大理就撤军了。蒙古人回去处理完内讧，准备和南宋硬刚，南下到襄阳，这个地方易守难攻，整整耗了五年，可惜还是没能挽回败局，南宋也就这么结束了。</p><blockquote><p>历时三百二十年的大宋王朝，就这样淹没在了崖山的海浪之中。</p></blockquote><hr><p>◆ 七、蒙古帝国：从二手小弟成为欧亚大佬</p><p>蒙古最开始其实并不起眼，当时金收割了辽，而蒙古只能算是辽里的一个小部落民族。蒙古慢慢的内部部落之间开始打仗，直到铁木真把蒙古统一了。铁木真本来没准备打这么多仗，蒙古最开始成立的时候只有两个敌人，一个是东边的金，这个以前欺负过自己，肯定得报酬。一个西边的西辽，铁木真在统一蒙古时，有一个仇家跑到了西辽，还当了驸马，然后心里不爽就把西辽灭了，西辽的西边就是花剌子模，本来不打的，蒙古还派了商队过去，可以商队别杀了，后来蒙古又派使者过去沟通，又被杀了，这搁谁也不乐意，所以向西把花剌子模灭了。蒙古连续胜利，自信心爆表，所以想到来都来了，就随手打几个国家吧，就这样，打下了欧亚大陆。可是国土太辽阔了也不好管理，儿子孙子各自占地为王，也管不住，忽必烈打下南宋以后在东边留了一大块自留地，称为元。</p><blockquote><p>忽必烈虽然是大汗，但基本管不了四大汗国，好在他成功拿下南宋之后，在东方有了一整块自留地：</p></blockquote><p>◆ 八、蒙古帝国之元朝（上）：把元朝历史分为三段看，就都搞清楚了</p><p>蒙古虽然成了整个欧亚大佬，不过不好管，最后分为五块，一个是忽必烈大汉坐镇的元帝国，东边是四大汗国，不过四大汗国也不听话，忽必烈算是光杆司令。元朝可以分为三段，总共98年，打南宋8年，实际只有90年，中途换了11个皇帝，第一段就是开国皇帝忽必烈，当时元朝非常富裕，一个叫马可波罗的意大利人后来写了一本游记，直接催生了欧洲的大航海时代。而且忽必烈认为要统治国家，还是需要学习汉人的制度，草原那一套不好用，所以开始各种汉化，连首都也从蒙古迁到了北京，只是当时叫元大都。第二段是各种宗，在忽必烈死后到40年，换了10个皇帝。直到最后一个元顺帝出场，一个人当了35年皇帝，超过三分之一个元朝。</p><blockquote><p>元顺帝是元朝在位时间最长的皇帝，一人就干了35年，顶了三分之一个元朝。</p></blockquote><p>◆ 九、蒙古帝国之元朝（下）：压不住的农民起义</p><p>元朝时间不长，但民间起义一点都不少，最后一个是红巾军，组建的是韩琳儿和刘福通，不过最后都被得力干将朱元璋取代了。朱元璋实力越来越强，后来把现在的南京作为根据地，开始猥琐发育，积蓄力量。这时候北边的元朝也奄奄一息了，朱元璋西边是起义军陈友亮，东边是起义军张士诚，朱元璋先灭陈友亮，再灭张士诚。这时候朱元璋就宣布明朝成立了，宣布完马上北上灭了元。</p><blockquote><p>于是朱元璋决定先跟陈友谅来个大决战。果然，朱元璋经过一场苦战终于把陈友谅干掉了，然后他掉转枪头，把“萌萌哒”的张士诚给顺利地收拾掉了。</p></blockquote><p>完～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二混子 </tag>
            
            <tag> 宋朝 </tag>
            
            <tag> 蒙古帝国 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画中国史3》</title>
      <link href="2021/05/03/ban-xiao-shi-man-hua-zhong-guo-shi-3/"/>
      <url>2021/05/03/ban-xiao-shi-man-hua-zhong-guo-shi-3/</url>
      
        <content type="html"><![CDATA[<p><strong>《半小时漫画中国史3》，二混子陈磊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>从盛产败家子的南北朝，到只有两个皇帝的隋朝，后面大量篇幅讲了唐朝，唐太宗、武则天、唐玄宗算是唐朝的皇帝代表人物，而非皇帝的代表人物可能就要算安禄山了。从南北朝的一堆小国家，到隋朝的统一，到唐朝的壮大，再到变成一堆小国家。分久必合，合久必分。 </p><hr><p>◆ 一、南北朝里多败家</p><p>南北朝是真的乱，基本上没有被别人打败的，都是败家子败完的。从南晋和五胡开始，南晋被灭后建立了南朝宋，南边之后因为皇帝败家经历了宋、齐、梁、陈。北面灭胡后建立了北魏，北魏大臣扶持一个皇帝就像整个吉祥物，一不注意就整了两个，所以北魏变成了东魏和西魏，皇帝不好用了后，大臣就让自己儿子上，于是变成了北齐和北周。北周最后一个皇帝是宇文贇，自己不行，所以把权利交给了自己的老丈人，而且老丈人翻脸不认人，不止接管了北周，还把南陈灭了，成立了伟大盛世的开端隋，这个老丈人就是隋文帝杨坚。</p><blockquote><p>朝到这里就算退出历史舞台了，这也意味着中国这一阶段的大分裂正式结束，由北边的杨坚包了圆，从此中国重新统一起来。这就是史上最伟大的盛世开端：隋。</p></blockquote><hr><p>◆ 二、隋朝二人传</p><p>隋朝一共就开创盛世的隋文帝和败家子隋炀帝，所以隋朝就是一个二人转。隋文帝是真的厉害，建立的开皇之治可谓古代巅峰，可惜被独孤皇后妻管严，主要是人家给他生了10个孩子，隋炀帝杨广就是他们的。杨广生平最喜欢约架和约会，可约架在北方，约会在南方，而洛阳在中间，所以就以洛阳为中心修修连连以前的各种河就有了隋朝大运河，北起北京，南到浙江，也就是今天的京杭大运河。另外杨广还和北面的高句丽硬刚，加上国内修了运河，大家时不时的反一下，硬是没征服下来。撑国内外都不太平的时候，宇文化及成功上位。</p><blockquote><p>那么问题来了：挖运河和三征高句丽已经快让老百姓死绝了，全国各地都在造反，国家实际上已经崩溃了。</p><p>就在这个时候，一个小弟瞅准时机反水，把隋炀帝缢死了。他就是隋炀帝的小伙伴宇文化及。</p></blockquote><hr><p>◆ 三、隋唐英雄传</p><p>隋炀帝挂了以后，主要有五股力量，两个草根和三个小皇帝，两个草根一个是李密的瓦岗寨，一个是河北的窦建德，三个小皇帝分别被宇文化及、李渊和王世充把着，后来发现小皇帝也没啥用，就自己上了。最后窦建德灭了宇文化及，李渊灭了李密，于是李渊、王世充和窦建德三足鼎立。李渊在收拾王世充的时候，意外的把窦建德也打败了，于是有了后面的大唐盛世，</p><blockquote><p>窦建德和王世充算是李渊最大的竞争对手，虽然全国各地还有许多势力存在，但后面很快就被一一搞定。到了这里，真正的大唐盛世，就要来了。</p></blockquote><hr><p>◆ 五、贞观开门红</p><p>李渊收拾完隋朝的残局后成为唐朝的开国皇帝唐高祖，生了几个儿子，老大当太子，老二不服气，所以老二在玄武门之变中把老大和老四灭了，顺便逼李渊交出皇位，自己变身唐太宗，创建了一个全新盛世，贞观之治。</p><blockquote><p>李世民杀了自己兄弟，逼老爹退位，怎么看都不像个好人，可是这个没心没肺的男人，却创造了唐朝第一个全盛时期，这段时期年号叫贞观。</p><p>这就是贞观之治。</p></blockquote><hr><p>◆ 六、武则天升职记</p><p>武则天本来是唐太宗时代进宫的，可是没被看上，只是一个才人，唐太宗挂了后就被出家当了尼姑。可是唐太宗生病的时候，武则天和太子李治一起伺候，唐太宗病没好，他两好上了，所以武则天去尼姑庵没多久，就被李治捞了出来，几翻操作以后，还当上了皇后。而且李治能力不行，要皇后帮忙处理朝政，所以有了二圣临朝。没过多久，李治挂了，武则天顺理成章成了皇太后，后来扶持了自己两个儿子，都不行，干脆自己上。果然，武则天一点不差男人，延续了唐朝盛世，只是自己八十多岁后还是也把皇位还给了自己的儿子李显唐中宗。</p><blockquote><p>混子曰：</p><p>武则天干得最酷的一件事，就是她坟前的无字碑，别的皇帝巴不得写满功绩，而武则天活完一生的精彩，最后选择了沉默。</p></blockquote><hr><p>◆ 七、唐玄宗的抛物线</p><p>武则天之后，本来皇位是给李显的，但李显被自己老婆毒了，他老婆又被武则天的儿子李旦的儿子李基隆灭了，所以李旦顺利当了皇帝，几年之后就给了李基隆，也就是唐玄宗，唐玄宗的人生就像抛物线，前半生英明神武，后半生惨不忍睹。唐玄宗改年号开元，就是后面的开元盛世，可能是盛世太好了，又改年号为天宝，这一改，开始惨不忍睹了，最后败在了安禄山手里，史成安史之乱，虽然没有让唐灭亡，不过唐玄宗是塌了。</p><blockquote><p>唐玄宗李隆基，又称至道大圣大明孝皇帝。到了清朝，康熙皇帝叫玄烨，玄字不让随便喊，这叫避讳，所以自那时候起，大家多喊唐玄宗叫唐明皇。</p></blockquote><hr><p>◆ 八、大唐就这么挂了</p><p>唐玄宗安史之乱以后带着老婆和大舅子跑了，然后儿子看时局对了，自己称帝，唐玄宗半道被成了太上皇。后来又经历了几代皇帝，可此后的唐已经内忧外患，内有太监干政，外有藩镇捣乱，藩镇就是之前安禄山那种官，唐玄宗为了镇压安禄山的藩镇，又封了很多的藩镇以毒攻毒，可同时也就养虎为患了。最后唐朝又变成了一堆小国家。</p><blockquote><p>历史的潜规则：保护皇帝的，往往就是朝代的终结者。果然没过多久，朱温就把最后一个皇帝撸了下来，接着建了个新的国家，叫梁，史称“后梁”。</p><p>这就是朱温篡唐。</p><p>其他节度使看朱温自己当了皇帝，纷纷独立。辉煌到不可一世的大唐王朝，就这么没了，变成了一堆小国家。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二混子 </tag>
            
            <tag> 南北朝 </tag>
            
            <tag> 隋朝 </tag>
            
            <tag> 唐朝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画中国史2》</title>
      <link href="2021/05/02/ban-xiao-shi-man-hua-zhong-guo-shi-2/"/>
      <url>2021/05/02/ban-xiao-shi-man-hua-zhong-guo-shi-2/</url>
      
        <content type="html"><![CDATA[<p><strong>《半小时漫画中国史2》，二混子陈磊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>串故事逻辑非常好，从西汉到王莽篡权再到东汉，从东汉末年的董卓袁绍和曹操，再到三国的官渡之战、赤壁之战和夷陵之战，一直到魏晋南北朝，说实话，串的非常顺理成章，值得读。 </p><hr><p>◆ 一、大汉王朝之西汉流水账</p><p>从刘邦的和平避战，到汉文帝的节俭，再到汉景帝的无为而治，文景之治积累下来的财富，都被刘彻用来打仗了，基本上把邻居打了一个遍，仗是打赢了，成就了一代雄主之名，可家底也败光了。还好有汉昭帝和汉宣帝给还债，成就昭宣中兴，这次兴盛结束就是衰败，直到昏君代表汉成帝以后，几个陆续的小皇帝结束了西汉。</p><blockquote><p>轰轰烈烈的西汉王朝就这样悄无声息地全剧终了。</p></blockquote><hr><p>◆ 二、大汉王朝之王莽篡汉</p><p>王莽绝对是个人才，货币改革，人人平等的人权，井田制的土地改革，市场改革。很难想象这是2000多年前干的事，就是步子迈得太大，扯了胯，前后也就15年。</p><blockquote><p>王莽和他的个人王朝新朝，就这么终结了。</p></blockquote><hr><p>◆ 三、大汉王朝之东汉故事</p><p>为什么叫东西汉，西是指西安，东是洛阳，从刘秀开始定都洛阳，才开始了200年的东汉之路。东汉的皇帝没什么存在感，主要是前面就几个皇帝，中间几个小皇帝被太后把着，后面又被宦官把着，直到黄巾军起义，虽然被镇压下去了，不过也气数已尽。</p><blockquote><p>中国历史上规模最大（波及全国）的一次农民起义——黄巾起义。</p></blockquote><hr><p>◆ 五、三国之前戏要做足</p><p>东汉宦官干政，袁绍看不过去，于是请西域的董卓回来，可董卓还没到，宦官就被干趴下了，董卓就想来都来了，就把皇帝控制起来，自己做个相国，董卓的残暴直接把官员吓跑了，包括袁绍和曹操，官员到地方，都建立军阀，于是群雄割据开始了，董卓也被王允拿女儿貂蝉设计吕布给杀了。这时候，曹操跑出来挟天子以令诸侯，而另一边刘备还在到处蹭饭吃。</p><blockquote><p>天下四分五裂乱糟糟，</p><p>孙家打下江东乐陶陶，</p><p>曹操抱着皇帝牛哄哄，</p><p>刘备到处蹭饭赤条条。</p></blockquote><hr><p>◆ 七、三国之三大战役（下）</p><p>三国有三大战役。一个是曹操和袁绍的官渡之战，主要是袁绍逼得自己的谋士许攸跳槽到曹操，把自己大食堂烧了，然后北方就剩下曹操一家独大了。第二个是赤壁之战，刘备和孙权组团，诸葛亮一个东风，孙权一把火，直接把曹操烧糊了。第三个是夷陵之战，经过前面两战，差不多就只剩下曹操、刘备和孙权了，本来刘备和孙权是一起打曹操的，顺道刘备还向孙权借了一个荆州，打完曹操了也没还，然后又跑去蜀地借了两块地，孙权不干了，要去把荆州要回来，正好关羽出门放个曹操回来家没了，逃到麦城被砍了，这时候张飞也被小弟砍了，刘备气急败坏之下和孙权来了一个夷陵之战，可惜被烧成烤串。而三国就是曹操儿子曹丕建立的魏国、刘备的蜀国和孙权的吴国。</p><blockquote><p>夷陵之战以后，三个国家谁也搞不定谁，就这么僵持了四十多年，这段时期就叫三国鼎立。</p></blockquote><hr><p>◆ 十一、两晋之东晋真纠结</p><p>曹操给儿子打下的江山建立了魏国，刘备建立了蜀国，孙权建立吴国，可是一代英雄，儿孙却不太行，一起打包送给了司马家，司马懿建立起来了晋朝，定都的是洛阳，叫西晋，可是晋朝自家人一点不和谐，没事就自己打自己。就在这一直内讧的时候，北方五个少数名族打进来了，不得不仓皇逃跑，于是司马睿跑到南京建立了东晋。这样南方就是以前的司马人天天干瞪眼，北方一群后起之秀天天打架，出现五胡十六国的局面，最后被北魏全部统治，就是历史上的北朝，差不多同时，南方的晋国也被刘裕灭掉，史称南朝。</p><blockquote><p>这人不但搞定了桓玄，手一滑连整个东晋也灭掉了，他就是晋帝国的终结者——刘裕。</p><p>从此中国的南方开启一个新的朝代，史称南朝。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二混子 </tag>
            
            <tag> 东西汉 </tag>
            
            <tag> 三国鼎立 </tag>
            
            <tag> 魏晋南北朝 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《半小时漫画中国史1》</title>
      <link href="2021/05/01/ban-xiao-shi-man-hua-zhong-guo-shi-1/"/>
      <url>2021/05/01/ban-xiao-shi-man-hua-zhong-guo-shi-1/</url>
      
        <content type="html"><![CDATA[<p><strong>《半小时漫画中国史1》，二混子陈磊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>用漫画的形式讲述历史故事，可能没办法呈现更多的细节，但是能让读者去理解历史脉络，建立自己的历史观。个人感觉对于科普已经很成功了，至少我看完这本小册子，对这些词有了新的认识。</p><p>春秋五霸</p><p>战国七雄</p><p>问鼎中原</p><p>秦晋之好</p><p>三家分晋</p><p>五国伐齐</p><p>合纵连横</p><p>远交近攻</p><p>卧薪尝胆</p><p>焚书坑儒</p><p>三公九卿</p><p>指鹿为马</p><p>楚河汉界</p><p>暗度陈仓</p><p>四面楚歌</p><p>围魏救赵</p><p>成也萧何</p><p>败也萧何</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 春秋五霸 </tag>
            
            <tag> 战国七雄 </tag>
            
            <tag> 二混子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>国际贸易的得失</title>
      <link href="2021/04/04/guo-ji-mao-yi-de-de-shi/"/>
      <url>2021/04/04/guo-ji-mao-yi-de-de-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="决定贸易的因素"><a href="#决定贸易的因素" class="headerlink" title="决定贸易的因素"></a>决定贸易的因素</h2><p> 比较优势原理说明，各国都可以从相互贸易中获益，因为贸易使每个国家都可以专门从事自己最擅长的活动。贸易的好处可以参考 <a href="https://booleflow.com/2020/12/20/mao-yi-rang-mei-ge-ren-de-zhuang-kuang-du-bian-de-geng-hao/">贸易让每个人的状况都变得更好</a></p><p>那么在国际贸易中，各国之间的得失关系如何呢？</p><p>在没有国际贸易的时候，价格会在国家内部自发调整，使国内供给与需求达到平衡。当有国际贸易时，某一物品的价格会向该物品在世界上的价格（成为世界价格）发生变动，以纺织品为例</p><ul><li>如果纺织品的世界价格<strong>高于</strong>国内价格，会促使该国成为纺织品<strong>出口</strong>国</li><li>如果纺织品的世界价格<strong>低于</strong>国内价格，会促使该国成为纺织品<strong>进口</strong>国</li></ul><p>从本质上说，国内价格反映了纺织品在本国制造的机会成本，如果国内价格低，说明相比其他国家在成本上有<strong>比较优势</strong>，应该增加产量进行出口，相反，如果国内价格高，说明相比其他国家在成本上没有有比较优势，应该减少产量以将有限的资源进行其他经济活动，而依靠进口消费。</p><p>当然这一切的分析都基于单一国家对世界市场的影响是微不足道的假设，也就是说，单一国家是世界经济中的<strong>价格接受者</strong>。</p><h2 id="贸易的赢家和输家"><a href="#贸易的赢家和输家" class="headerlink" title="贸易的赢家和输家"></a>贸易的赢家和输家</h2><h3 id="出口国的得失"><a href="#出口国的得失" class="headerlink" title="出口国的得失"></a>出口国的得失</h3><p>在世界价格高于国内价格时，一旦允许自由贸易，国内价格就会上升到等于世界价格，此时国内的供给量就会大于国内的需求量，成为纺织品出口国。显然，出现国际贸易后，并不是每个人都能从中获利，贸易迫使国内价格上升，纺织品生产者的状况是变好了，但是消费者的状况却变差了，因为他们需要支付更高的价格才能获得以前等量的纺织品。</p><p>从消费者剩余和生产者剩余分别看造成的经济福利变化。如下图直观所示：</p><p><img src="exporting.png" alt="出口国的得失"></p><ul><li>贸易前：消费者剩余是 A + B，生产者剩余是 C，总剩余是 A + B + C；</li><li>贸易后：消费者剩余是 A，生产者剩余是 B + C + D，总剩余是 A + B + C + D。</li></ul><p>即：</p><ul><li>当一国允许贸易并成为一种物品的出口国时，国内该物品的生产者的状况变好了，而国内该物品的消费者的状况变差了</li><li>从赢家收益大于输家损失的角度看，贸易使一国的经济福利变好了（增加了D）</li></ul><h3 id="进口国的得失"><a href="#进口国的得失" class="headerlink" title="进口国的得失"></a>进口国的得失</h3><p>与出口国得失分析类似，允许贸易后，国内价格会下降到等于世界价格，国内的需求量会大于国内供给量，成为纺织品进口国。现在在该过程中，消费者的状况变好了，但是生产者的状况变差了。</p><p>从消费者剩余和生产者剩余分别看，同样如下图直观所示：</p><p><img src="importing.png" alt="进口国的得失"></p><ul><li>贸易前：消费者剩余是 A，生产者剩余是 B + C，总剩余是 A + B + C；</li><li>贸易后：消费者剩余是 A + B + D，生产者剩余是  C，总剩余是 A + B + C + D。</li></ul><p>即</p><ul><li>当一国允许贸易并成为一种物品的进口国时，国内该物品的消费者的状况变好了，而国内该物品的生产者的状况变差了</li><li>从赢家收益大于输家损失的角度看，贸易使一国的经济福利变好了（增加了D）</li></ul><p>从进口和出口两个角度可以看到，贸易都增加了国家的总剩余，但是贸易并没有让国内每个人的状况都变好，因为不管进口还是出口都相应产生了赢家和输家，而且赢家的收益都大于输家的损失。换句话说，国际贸易做大了蛋糕规模，但却让一些经济参与者得到的蛋糕变小了。因此，为了保证相对公平，赢家可以对输家进行补偿，而这种补偿方案的制定，就酿造出了政治斗争。一些国家有时不能享受贸易的好处，就是因为自由贸易的输家在政治上比赢家更有组织力量。</p><h3 id="关税"><a href="#关税" class="headerlink" title="关税"></a>关税</h3><p><strong>关税</strong>是对进口物品（国外生产，国内消费）征收的一种税。由于关税的存在，减少了进口量，并使国内市场向没有贸易时的均衡移动。因为关税提高了价格，国内卖者的状况变好了，但是买者的状况变差了。</p><p><img src="customs.png" alt="关税"></p><p>同样以供需曲线看剩余情况。</p><ul><li>征收关税前，消费者剩余是 A + B + C + D + E + F，生产者剩余是 G，总剩余是 A + B + C + D + E + F + G；</li><li>征收关税后，消费者剩余是 A + B，生产者剩余是 C + G，关税规模是 E，总剩余是 A + B + C + E + G。</li></ul><p>征收关税后，市场总剩余减少了 D + F，这就是关税的无谓损失。</p><p>关税会导致无谓损失，是因为他和大部分的税一样，扭曲了激励，使稀缺资源配置背离了最优水平。关于税收扭曲激励可以参考文章 <a href="http://booleflow.com/2021/04/04/fu-shui-de-dai-jie/">赋税的代价</a> 。</p><h2 id="国际贸易的其他好处"><a href="#国际贸易的其他好处" class="headerlink" title="国际贸易的其他好处"></a>国际贸易的其他好处</h2><ul><li>增加物品多样性：自由贸易使所有国家的消费者都拥有了更多的选择，从替代品的获得成本看，这进一步改善了消费者的状况。</li><li>通过规模经济降低了成本：如果一个小国的企业只在很小的国内市场销售产品，不能充分实现规模经济。</li><li>增加了竞争：避开外国竞争者的公司更可能拥有市场势力，这会导致市场失灵。</li><li>加强思想交流：技术进步在世界范围内的转移通常被认为是与含有这些技术进步的物品的国际贸易相关的，如对于贫困国家来说，了解电脑最好的方式就是购买一台电脑。</li></ul><h2 id="限制国际贸易的观点"><a href="#限制国际贸易的观点" class="headerlink" title="限制国际贸易的观点"></a>限制国际贸易的观点</h2><ul><li>工作岗位论：与其他国家贸易消灭了本国的一些工作岗位。</li><li>国家安全论：例如对于钢铁的自由贸易，国内钢铁公司就会指出，钢铁是用来生产枪炮和坦克的，如果依靠外国生产的钢铁，一旦爆发战争，外国的供给中断，本国将没有足够的钢铁和武器保护自己。</li><li>幼稚产业论：新兴产业认为，应实行暂时性限制贸易，以有助于该产业在国内的成长。加入一个产业是新兴的，暂时还不能与外国竞争者竞争，但是有理由相信，该产业在长期中是有利可图的。</li><li>讨价还价筹码的保护论：当与自己的贸易伙伴谈判时，贸易限制威胁有助于消除外国政府实施的贸易限制，如关税保护等。</li></ul><h2 id="一个有趣的调查"><a href="#一个有趣的调查" class="headerlink" title="一个有趣的调查"></a>一个有趣的调查</h2><p>2008年《洛杉矶时报》公布了一个关于认为自由贸易对本国经济是有利还是有害的调查，有26%的民众认为有利，有50%的民众认为有害（另外的持不确定态度）。与此相比，大多数经济学家支持自由的国际贸易，他们认为自由贸易是一种有效配置生产的方法。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贸易 </tag>
            
            <tag> 无谓损失 </tag>
            
            <tag> 关税 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>赋税的代价</title>
      <link href="2021/04/04/fu-shui-de-dai-jie/"/>
      <url>2021/04/04/fu-shui-de-dai-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="赋税的无谓损失"><a href="#赋税的无谓损失" class="headerlink" title="赋税的无谓损失"></a>赋税的无谓损失</h2><h3 id="赋税的影响"><a href="#赋税的影响" class="headerlink" title="赋税的影响"></a>赋税的影响</h3><p>但对某一物品征收赋税时，不管是对买者还是卖者征收，效果都是相同的，都同时提高了买者支付的价格，降低了卖者得到的价格。也就是说，赋税让买者和卖者的状况都会变坏，当然，政府也从中获得了收入，那么赋税给买者和卖者带来的成本与政府所筹集到的收入是什么关系呢？</p><p>从供给曲线不难看出，赋税就像给买者支付的价格和卖者得到的价格之间打了一个楔子，由于这种税收楔子，销售量会低于没有税收时的水平，即市场规模变小了。</p><p>市场规模变小，那同步地，消费者剩余和生产者剩余都会变小。那此时的税收时多少呢？税收的规模为买者支付的价格与卖者得到的价格都差，税收规模乘以物品销售量，则为政府获得的税收收入。</p><h3 id="赋税与福利的变化"><a href="#赋税与福利的变化" class="headerlink" title="赋税与福利的变化"></a>赋税与福利的变化</h3><p>通过下图可以直观看出有无赋税时的福利情况</p><p><img src="tax_and_welfare.png"></p><p>在没有税收时，消费者剩余是 A + B + C，生产者剩余是 D + E + F，总剩余是 A + B + C + D + E + F；</p><p>在有税收时，消费者剩余是A，生产者剩余是F，政府税收收入是 B + D，总剩余是 A + B + D + F。</p><p>显然，税收使买者和卖者的状况都变坏了，而使政府的状况都变好了。但是随着征收税收，总剩余减少了 C + E，这就是无谓损失。</p><p>市场通常可以有效地配置稀缺资源，但是赋税扭曲了激励方式，它对买者的激励是比没有税收时少消费，对卖者的激励是比没有税收时少生产，这就引起了市场配置资源的无效率。</p><h3 id="无谓损失是因为减少了贸易的发生"><a href="#无谓损失是因为减少了贸易的发生" class="headerlink" title="无谓损失是因为减少了贸易的发生"></a>无谓损失是因为减少了贸易的发生</h3><p>比如Joe为Jane打扫房间可以得到100美元，Joe的机会成本是80美元，Jane对打扫的评价是120美元，那么在没有税收的条件下，他们可以各得20美元的剩余，总剩余是40美元。</p><p>现在如果政府对打扫房间征收50美元的税，现在没有一种价格能使他们在纳税之后状况变化。Jane的评价是120美元，支付完50美元的税后，Joe只能得到70美元，低于Joe的机会成本。同样，如果要满足Joe的80美元的机会成本，Jane就需要支付130美元，者高于Jane的评价。于是，由于税收的出现，以上贸易不会发生。</p><p>更为一般情况，税收让边际买者和边际卖者离开市场，而无谓损失就是由于阻止了这些本来可以互利的贸易而引起的剩余损失。</p><h2 id="决定无谓损失的因素"><a href="#决定无谓损失的因素" class="headerlink" title="决定无谓损失的因素"></a>决定无谓损失的因素</h2><p>税收造成的无谓损失，会随着买者和买者对价格变动的反应程度的变化而变化。也就是说，供给与需求的价格弹性决定了无谓损失的的变动，价格弹性越大，税收的无谓损失也就越大。直观如下图所示。</p><p><img src="tax_and_flexibility.png" alt="税收扭曲与弹性"></p><h2 id="税收变动时的无谓损失与税收收入"><a href="#税收变动时的无谓损失与税收收入" class="headerlink" title="税收变动时的无谓损失与税收收入"></a>税收变动时的无谓损失与税收收入</h2><p>税收很少会长期保持不变，那不同的税收规模将如何影响无谓损失和税收收入，以下图示例说明</p><p><img src="tax_changes.png"></p><p>分别对于小额税、中额税、大额税进行说明：</p><ul><li>小额税有少量的无谓损失，并增加了少量的税收收入</li><li>中额税有较大的无谓损失，并增加了较多的税收收入</li><li>大额税有很大的无谓损失，并减少了很多的税收收入</li></ul><p>从变化趋势看</p><ul><li>税收规模越大，无谓损失越大</li><li>税收收入随着税收规模增大先增大后减少（有时被称为拉弗曲线）</li></ul><p>实际上，税收的无谓损失的增加要快与税收规模的扩大。</p><p>整体而言，政府对一种物品征收税收时，不管是对买者还是卖者征收，社会就损失了市场效率的好处。给市场的参与者带来损失，不仅是因为税收将资源从市场参与者手中转移到政府手中，还因为税收改变了激励，并扭曲了市场结果。</p><p>当然，从社会的角度看，没有一个人敢否认，一定程度的赋税是必要的，只是市场参与者需要为此付出社会文明的代价。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贸易 </tag>
            
            <tag> 无谓损失 </tag>
            
            <tag> 赋税 </tag>
            
            <tag> 福利 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剩余与市场效率</title>
      <link href="2021/04/03/sheng-yu-yu-shi-chang-xiao-lu/"/>
      <url>2021/04/03/sheng-yu-yu-shi-chang-xiao-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="消费者剩余"><a href="#消费者剩余" class="headerlink" title="消费者剩余"></a>消费者剩余</h2><h3 id="支付意愿"><a href="#支付意愿" class="headerlink" title="支付意愿"></a>支付意愿</h3><p>消费者剩余表示买者愿意为一种物品支付的量减去其为此实际支付的量。比如，同样一张猫王专辑，Join愿意支付100美元，但实际只支付了80美元就获得了（市场的其他参与者促使均衡价格为80美元），则Join得到了20美元的消费者剩余。</p><p>同样，如果市场价格变成70美元，有可能就会出现新的买者获得消费者剩余，比如Paul的支付意愿是80美元，则Join获得30美元的消费者剩余，Paul获得10美元的消费者剩余，市场的总消费者剩余是40美元。</p><h3 id="需求曲线衡量消费者剩余"><a href="#需求曲线衡量消费者剩余" class="headerlink" title="需求曲线衡量消费者剩余"></a>需求曲线衡量消费者剩余</h3><p>对于某一价格，如果再提高一点点，就会有买者离开市场，那这个价格就是边际买者的支付意愿，会离开的买者就是边际买者。需求曲线正是在任一数量时边际买者的支付意愿，因此可以使用需求曲线衡量消费者剩余。如下图所示，不同人的支付意愿，如果物品价格是70美元，消费者剩余为40美元。</p><p><img src="consumer_surplus.png" alt="不同买者的支付意愿与价格为70美元时的消费者剩余"></p><p>通过上图不难发现，对于有很多买者的市场（需求曲线不在是阶梯状，而是一条向右下倾斜的直线），该消费者剩余的分析方式同样适用，需求曲线以下和价格以上的面积衡量一个市场上的消费者剩余。需求曲线的高度衡量买者对物品的评价，即支付意愿。</p><p>当价格降低时，增加的消费者剩余包含了原来消费者增加的和新消费者增加的两个部分。如对于上图中。价格在80美元时，只有Join有20美元的消费者剩余，当价格降得70美元时候，Join增加了10美元的消费者剩余，同时Paul增加了10美元的消费者剩余，总消费者剩余在20美元基础上增加20美元达到40美元。</p><h3 id="消费者剩余衡量了什么"><a href="#消费者剩余衡量了什么" class="headerlink" title="消费者剩余衡量了什么"></a>消费者剩余衡量了什么</h3><p>消费者剩余表示的是消费者支付意愿与实际支付的差，衡量了买者从一种物品中得到的自己感觉到的利益。也就是说从买者的角度看，增大消费者剩余就增加了买者的经济福利</p><h2 id="生产者剩余"><a href="#生产者剩余" class="headerlink" title="生产者剩余"></a>生产者剩余</h2><h3 id="成本与销售意愿"><a href="#成本与销售意愿" class="headerlink" title="成本与销售意愿"></a>成本与销售意愿</h3><p>在市场中，买者希望少付钱，卖者希望多卖钱，所以既然买者希望获得消费者剩余，同样卖者也希望获得生产者剩余。在衡量生产者剩余前，需要先衡量一下销售意愿。对于提供服务的生产者而言，都需要付出一定的成本，不同行业可能主要成本类别不同，有可能是原料成本，有可能是机会成本，该成本决定了生产者的销售意愿。</p><p>以刷墙为例，如果市场价格是600美元，而Grandma的成本是500美元，则他可以获得100美元的生产者剩余。如果市场价格增加到800美元，Georgia的成本是600美元，也愿意从事该工作，所以市场上的总生产者剩余是500美元，如下图所示。</p><p><img src="producer_surplus.png" alt="不同卖者的销售意愿与价格为600美元时的生产者剩余"></p><p>不难看出，当价格上升时，增加的生产者剩余同样包含两部分，原有生产者增加的生产者剩余和新生产者产生的生产者剩余。</p><h3 id="生产者剩余衡量了什么"><a href="#生产者剩余衡量了什么" class="headerlink" title="生产者剩余衡量了什么"></a>生产者剩余衡量了什么</h3><p>与消费者剩余类似，生产者剩余衡量了卖者从一种物品中得到的自己的感觉到的利益。从卖者角度看，增加生产剩余就增加了卖者的经济福利。</p><h2 id="市场效率"><a href="#市场效率" class="headerlink" title="市场效率"></a>市场效率</h2><h3 id="福利最大化"><a href="#福利最大化" class="headerlink" title="福利最大化"></a>福利最大化</h3><p>消费者剩余和生产者剩余可以分别衡量买者和卖者所获得的经济福利。为了使所有经济福利最大化，就需要消费者剩余与生产者剩余的和最大。</p><p>消费者剩余 = 买者的评价 - 买者支付的价格</p><p>生产者剩余 = 卖者获得的价格 - 卖者的成本</p><p>总剩余 = (买者的评价 - 买者支付的价格) + ( 卖者获得的价格 - 卖者的成本)</p><p>在经济市场中，买者支付的价格等于卖者获得的价格，所以上式就变成了</p><p>总剩余 = 买者的评价 - 卖者的成本</p><p>如果资源配置能使得总剩余最大化，则这个市场是有效率的，也就是说，物品不是由成本最低的卖者生产，资源配置就是无效率的，同样，如果物品不是由对这种物品评价最高的买者消费，配置也是无效率的。</p><p>当然，市场上除了关注效率，还会关注平等，这也是很多经济决策者常常更加关心的。</p><h3 id="市场均衡"><a href="#市场均衡" class="headerlink" title="市场均衡"></a>市场均衡</h3><p>下面来看在市场均衡的条件下，总剩余是否是最大的。再均衡条件下，显然，供给曲线、需求曲线左侧的区域就是总剩余，均衡价格以下的为生产者剩余，均衡价格以上的为消费者剩余。而当非均衡条件下时，买者的评价和卖者的成本都不相等，市场是低效率的，如下图所示。</p><p><img src="efficiency.png" alt="均衡时的效率"></p><p>需求曲线反应了买者的评价，供给曲线反应了卖者的成本，当边际买者的评价大于边际卖者的成本时，增加产量和消费量可以增加总剩余，同理，当边际买者的评价小于边际卖者的成本时，减少产量和消费量可以增加总剩余。即均衡的结果是资源的有效配置。</p><p>当然市场上经常会存在市场势力和外部性等市场失灵的情况，不过即使在这种条件下，市场均衡的重要性仍然不容小觑。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费者剩余 </tag>
            
            <tag> 生产者剩余 </tag>
            
            <tag> 市场效率 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>社群编码识别黑灰产攻击实践</title>
      <link href="2021/04/03/she-qun-bian-ma-shi-bie-hei-hui-chan-gong-ji-shi-jian/"/>
      <url>2021/04/03/she-qun-bian-ma-shi-bie-hei-hui-chan-gong-ji-shi-jian/</url>
      
        <content type="html"><![CDATA[<h2 id="导读"><a href="#导读" class="headerlink" title="导读"></a>导读</h2><p>所谓黑灰产，包含网络黑产、灰色两条产业链，随着互联网的飞速发展，网络黑灰产也在不断发展，当前网络黑灰产已经形成了一个平台化、专业化、精细化，相互独立又紧密协作的产业链。从近几年多起重大网络安全事故看，黑灰产已经不再局限在半公开化的纯攻击模式，而是转化成为敛财工具和商业竞争的不良手段，据不完全统计，当前网络黑灰产的市场规模已经超过千亿元人民币，在这千亿级的市场规模下，发展出了非常多的细分领域，如木马病毒，养号刷单，薅羊毛，电信诈骗，知识盗版，流量劫持等。</p><p>各互联网平台为了防止被网络黑灰产攻击，开发了很多防御及识别技术，最常被广大用户感知到的验证码技术就是其中之一，在验证码技术背后，还有非常多的识别方法，例如通过规则引擎依据防攻击规则进行分析拦截，通过行为序列建模对单次请求进行黑灰产行为判定，通过图谱关系挖掘用户之间的相关性以识别黑灰产团伙，基于层次聚类、均值聚类、高斯混合等聚类模型对黑灰产攻击进行无监督识别，这些方法均能在不同程度上对黑灰产起到识别和防御作用。</p><p>基于以上黑灰产攻击特点，提出了一种基于社群编码的黑灰产攻击识别方法，社群发现部分基于图关系，编码部分引入了大规模的图嵌入表示学习方法，相比于已有的图谱关系挖掘，可以更好的识别和度量未知攻击，而且也提出了基于异步准实时的工程化算法实现，对频繁变化的黑灰产攻击有更强的应变灵活性。</p><h2 id="社群结构"><a href="#社群结构" class="headerlink" title="社群结构"></a>社群结构</h2><p>提出的基于社群编码的黑灰产攻击识别方法，在原有图谱挖掘的基础上，引入了大规模的图嵌入表示学习技术，除了能挖掘出黑灰产本身的关联关系，还能识别出潜在的黑灰产网络结构，让识别过程更加准确稳定。</p><p>该方法基于的关联图有两种，分别是同构图和异构图，这也是黑灰产挖掘过程中经常会遇到的关联图结构。</p><p>同构图表示网络图中所有节点的类型都相同，如对于一个账号关联而言，网络图中的节点有都是用户的账号ID。异构图则表示网络图中所有节点的类型可能是不同的，如在账号关联网络中，网络图中的节点除了账号ID外，可能还有IP地址，设备号，手机号等其他类型的节点。</p><p>下图表示了同构和异构的两种示意图，同构图表示所有账号ID组成的网络结构，异构图表示由账号ID、设备ID、手机号和IP地址组成的网络结构。</p><p><img src="graph_structure.png" alt="网络图结构中的同构图与异构图，左图为全是账号ID组成的同构图，右图为账号ID、设备ID、手机号和IP地址组成的异构图。"></p><p>对于图结构网络，除了边关系，节点自身也会很多固有属性，如对于一个账号ID的UGC场景，会有不同的活跃时间，不同的业务场景（如浏览图文，浏览视频，发表图文等），不同的操作类型（如评论，点赞，转发等）。这类节点自身属性如下图中表格所示。</p><p><img src="node_attribute.png" alt="节点属性，包含不同时间，不同业务场景以及不同操作类型，表格中1表示有行为，0表示无行为，如表格中黑框圈出部分表示该账号在凌晨6点有浏览图文和视频，并且有点赞的操作。"></p><p>为了便于说明一般情况，后文说明中默认全是异构图结构，因为同构图作为异构图的一种特殊情况，即使是实际推广中是同构图，也不影响使用异构图的方法进行分析。实际场景中图网络关系如下图所示。</p><p><img src="social_network.png" alt="一种图网络关系，图中有的一个连通图包含了3个节点，有的包含4个节点，有的包含5个节点甚至更多，有的也只包含了1个独立节点，实际场景中图结构会更加复杂，但关联关系类似。"></p><p>为了识别出关联结构图中的社群，目前已经有比较多的识别方法，常用的有基于节点的统计特征，基于节点出入度的分布变化，基于关联边的自定义权重，人工标注等方法，此类方法能识别很多关联社群，但是由于图谱关联中难以定义边的权重，会存在较多误召，所以在实践中基于已有社群挖掘结果进行编码以提升黑灰产识别效果，同时嵌入式图编码还可以基于节点的邻居关系可以进行无监督相似性判断。</p><h2 id="图嵌入式编码"><a href="#图嵌入式编码" class="headerlink" title="图嵌入式编码"></a>图嵌入式编码</h2><p>图嵌入式编码是一种将节点编码成向量的node2vec方法，采用的图嵌入式编码方法为斯坦福大学William L. Hamilton、Rex Ying和Jure Leskovec等人在2016年提出的GraphSAGE，与node2vec相比较而言，node2vec是在图的节点级别上进行嵌入，GraphSAGE则是在整个图的级别上进行嵌入。GraphSAGE同时利用节点特征信息和结构信息得到Graph Embedding的映射，相比之前保存映射结果的方法，GraphSAGE保存了生成embedding的映射，可扩展性更强，对于节点分类和链接预测问题的表现也更加突出。</p><p>GraphSAGE算法流程包含三个步骤。</p><p>（1）对图中每个节点邻居节点进行采样，因为每个节点的度是不一致的，所以为了计算高效，为每个节点采样固定数量的邻居。</p><p>（2）根据聚合函数聚合邻居顶点蕴含的信息。</p><p>（3）得到图中各顶点的向量表示供下游任务使用。</p><p>下图为该算法作者在论文中提供的采样和聚合示意图。</p><p><img src="graphsage.png" alt="斯坦福大学William L. Hamilton、Rex Ying和Jure Leskovec等人在2016年提出的GraphSAGE算法（论文地址：https://arxiv.org/abs/1706.02216），该算法包含节点采样、邻居聚合、向量表示三个步骤。"></p><p>对于使用传统方法已经识别出的社群，使用下图所示的方法进行节点采样。每一层的node由上一层生成，与本层无关，如此，1层的账号ID 1已经聚合了0层设备ID 1和手机号2的信息，在二层，手机号2再聚合IP地址1的信息，经过两层采样，就可以扩展到账号ID 1的2阶邻居包含设备ID 1、手机号1、设备ID 2、手机号2、账号ID 2和IP地址1的所有信息。</p><p><img src="node_sampling.png" alt="黑灰产社群的节点邻居采样，包含两层采样，每一层的node由上一层生成，与本层无关，如此，1层的账号ID 1已经聚合了0层设备ID 1和手机号2的信息，在二层，手机号2再聚合IP地址1的信息，经过两次采样，就可以扩展到账号ID 1的二阶邻居（设备ID 1，手机号1，设备ID 2，手机号2，账号ID 2，IP地址1）。"></p><p>采样过程中固定采样层数（本实践使用2层）和每层采样点的节点数（如邻居节点数上限为200个），可以控制每次采样过程对内存的消耗和运算耗时，该方法适用于大规模数据集，对大数据集下的黑灰产社群挖掘非常有效。</p><p>这里采用的聚合函数为均值聚合，直接对目标节点和所有邻居emebdding中每个维度取平均，后再非线性转换，原论文中相应函数表达式如下：</p><p><img src="formula.png"></p><p>其主要思想是将目标顶点和邻居顶点的第k−1层向量进行拼接，然后对向量的每个维度进行求均值的操作，将得到的结果做一次非线性变换产生目标顶点的第k层表示向量。</p><p>不同的聚合函数计算方法不同，除均值聚合函数外，还有池化聚合器、LSTM聚合器等可选，经过测试，对于黑灰产社群挖掘而言，不同的聚合函数差异并不明显。</p><p>如此，经过以上对黑灰产社群的采样与邻居聚合，可以得到每一个节点在网络图上的向量表示。如上面采用图示中账号ID 1的向量就包含了设备ID 1、手机号1、设备ID 2、手机号2、账号ID 2和IP地址1的网络结构信息，同时包含了这些ID在不同时间点、不同业务场景、不同操作类型上的行为特征。</p><h2 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h2><p>基于上面的采样和聚合函数，可以开始进行参数学习，GraphSAGE不同的损失函数代表了不同的参数学习方法，如下所示损失函数就是一种无监督的损失，倾向于使得相邻的顶点有相似的表示，相互远离的顶点的表示差异变大。</p><p><img src="loss.png"></p><p>上式表示节点 u 和随机游走到的邻居节点 v 有相似的embedding表示，而与经过负采样得到的不相邻节点 vn 有不相似的embedding表示。</p><p>对于无监督损失学习到的节点embedding，可继续供下游任务使用，本实践就是采用的该方法。当然，对于特定分类任务，也可以使用特定的损失函数，如使用交叉熵进行分类预测。</p><p>通过节点的统计特征，人工标注确定了正负样本，使用节点的编码向量作为特征进行分类模型训练，下图所示即为部分数据的挖掘结果可视化。</p><p><img src="graph_ret.png"></p><p>直观而言，对于社群团伙的挖掘还是比较合理的，总体分为三类，红色为一社群，黄色为一社群，其余（绿色）自动归为一类。</p><h2 id="工程化实现"><a href="#工程化实现" class="headerlink" title="工程化实现"></a>工程化实现</h2><p>为了在工业界实际应中发挥社群编码的价值，提出了一种异步准实时的黑灰产识别方案。下图表示了这种识别方案的流程结构。</p><p><img src="process_structure.png" alt="一种异步准实时的黑灰产识别方法，主要分为用户操作、训练和预测三个部分。"></p><p>一个用户开始请求客户端，可以采集到用户的关键因子信息，如账号ID、IP地址、设备号、手机号等，将这部分日志信息写入暂存区，暂存区存储着所有在过去10分钟（也可以是其他某个时间段，一般而言，日志量越大，暂存区时间越短，反之越长）内请求过该客户端的用户的关键因子信息。</p><p>超过10分钟的关键信息则存入离线的分区日志库，基于分区日志库进行图谱构建，黑灰产社群挖掘，社群编码，以及使用向量表示训练分类模型，分类模型可以不用实时训练，定期使用过去一段时间的分区日志训练即可。</p><p>对于还在暂存区的关键因子，会对请求的用户进行实时图谱构建，以该用户为中心进行节点采样并做向量表示，使用已经训练好的分类模型对该用户的表示向量进行黑灰产预测，如果预测为正常用户，则允许用户在客户端上的操作，如果预测该用户为黑灰产用户，则拒绝该用户进行客户端操作。</p><p>下图是训练部分较详细的过程：</p><p><img src="training.png" alt="基于社群编码进行黑灰产识别的模型训练过程。"></p><p>下图是预测部分的较详细过程：</p><p><img src="testing.png" alt="基于社群编码进行黑灰产识别的异步准实时预测过程"></p><h2 id="创新点"><a href="#创新点" class="headerlink" title="创新点"></a>创新点</h2><p>本实践提出的一种基于社群编码的黑灰产攻击识别方法，主要创新技术点包括：</p><ul><li><p>基于社群编码对黑灰产进行有监督识别的方法，相比于既有图谱挖掘算法，该方法不直接依赖于单个节点属性，而是将整个社群的关联结构编码到一个表示向量中，对黑灰产的表示更加准确，而且对于历史上未出现的黑灰产账号，也能通过网络结构之间的相似性，通过向量表示进行识别。同时可以有效避免因为噪声关系（如黑灰产账号连接了商场wifi）导致的错误识别。</p></li><li><p>基于图编码结果，还可以对黑灰产进行无监督建模的社群挖掘，使用编码后的向量表示进行无监督学习（如密度聚类和层次聚类），可以识别出黑灰产在IP、账号ID、手机号及设备号之间的内在关系，挖掘出相似黑灰产组成的聚类簇。</p></li><li><p>使用暂存区将大规模的图嵌入表示学习方法与小数据集的异步预测结合在一起，并使用编码后的有监督模型进行快速预测，为工业化应用提供了参考方法。</p></li></ul><h2 id="部分实践效果"><a href="#部分实践效果" class="headerlink" title="部分实践效果"></a>部分实践效果</h2><p>搭建的因子编码模型包含有IP地址、cookie标识、设备、账号ID、手机号等共计5个关键因子，编码的特征包含十余个关联信息。</p><p>按10分钟为一个暂存区窗口，获取因子数量150w+，编码的关系数量500w+，编码的向量长度240+。</p><p>经过人工校验，对embding结果使用有监督方式例行化产出ip维度的风险，使用其他策略交叉校验，该策略准确率能达到94%左右，相比之前扩召回7%左右。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社群挖掘 </tag>
            
            <tag> 黑灰产攻击 </tag>
            
            <tag> GraphSAGE </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《稀缺：我们是如何陷入贫穷与忙碌的》</title>
      <link href="2021/03/28/xi-que-wo-men-shi-ru-he-xian-ru-pin-qiong-yu-mang-lu-de/"/>
      <url>2021/03/28/xi-que-wo-men-shi-ru-he-xian-ru-pin-qiong-yu-mang-lu-de/</url>
      
        <content type="html"><![CDATA[<p><strong>《稀缺：我们是如何陷入贫穷与忙碌的》，塞德希尔·穆来纳森著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>我们所有人都必须面对有限的金钱、时间等资源，所以有必要学习一下避免掉入稀缺陷阱的艺术。</p><p>本书和《贫穷的本质》一书，配合服用，效果更佳。两本书中很多案例都相似，但是分析的角度却有不小的差异。本书认为，过度的稀缺会导致人的非理性，从而进一步加剧这种稀缺，而带宽和稀缺心理，是解决稀缺问题的关键。</p><p>本书围绕稀缺衍生出了很多概念，比如稀缺环境下的专注红利，比如在获得专注红利的时候就会出现管窥之见，比如稀缺的本质就是没有余闲，比如当人们面临资源稀缺时就会产生借用，比如对稀缺进行管理时如何节约利用带宽。</p><p>各种类型的稀缺都会产生专注红利，而不仅仅局限于时间稀缺。比如，当牙膏越用越少时，我们就不会像刚拿到一管新牙膏时那样一下挤出来很多；假期的最后几天，我们会马不停蹄地游览各个景点，争取一个不落。</p><p>专注红利能带来很多高效的产出，但与此同时，也会产生管窥之见，出现短视，当我们为了解决眼下的难题而极度专注时，就无法有效地规划未来。当然，规划对于所有人来说都是一个问题，只是稀缺令这一问题变得更为严峻。</p><p>作者认为，所有穷人都拥有一种特殊技能，他们更善于维持当下的生计，他们能让1美元发挥更大的价值，他们是金钱价值方面的专家。这种专业技能会令他们在一定的环境中表现得更加理性，更不容易做出自相矛盾的选择。因为专注，所以拥有专业技能；因为专业，所以有了管窥之见；因为管窥，所以产生了一系列负面后果。</p><p>而借用就是典型的负面后果之一，当人们面临资源稀缺时，就会通过借用相应的时间或金钱来应对突发事件。从长远来看，借用会进一步加剧稀缺，于是掉入了稀缺陷阱。避免落入稀缺陷阱的方法就是要拥有余闲，尤其是要建立起应对突发事件的缓冲机制，它们不仅能用来进行风险管理，还可以用来保护我们免于再次跌落到稀缺陷阱之中。那么是不是余闲越多越好呢？</p><p>对于充裕的余闲和足够的余闲，作者认为，远离稀缺陷阱的威胁，需要的不是充裕的资源，而是足够充裕的资源——就算我们乱花钱，做事一拖再拖，还是有足够的余闲去应对绝大部分突发事件；如果拥有足够充裕的资源，就算长时间的拖延，我们还是有时间去管理预期之外截止日期的到来。远离稀缺陷阱的威胁，需要拥有足够的余闲去应对这个世界中林林总总的突发事件，去应对我们给自己制造出来的诸多麻烦。</p><p>面对稀缺，最重要的是改变心态，只有改变心态，才有逃离稀缺陷阱的希望。比如一下子去掉穷人的所有负债，或一下子去掉忙碌之人的所有任务，并不能让他们逃离稀缺困境，一段时间以后，穷人还是会一直贫穷下去，而孤独者也注定会继续形单影只；繁忙之人永远会日理万机，而节食者的计划也总是会以失败告终。稀缺造就是一种心态，而这种心态会令稀缺长存。</p><hr><p>◆ 引言 资源稀缺不可怕，就怕有稀缺心态</p><p>通常时候，宁愿做得不完美，也不要从开始就拒绝行动，我们经常会因为没有做什么而后悔，但很少做了什么因为不完美而伤怀。犯错是一个成长的过程，而不开始则只会浪费生命。</p><blockquote><p>显然，“贡献一章内容”这个机会太过宝贵，不容错过。我们自然应承了下来。但也不出所料，应承下这件事情本身就是一个错误——我们写得匆匆忙忙，还拖了很久的稿。而令我们没有预料到的是，这个错误犯得很值得。因为正是这个错误，为我们创造了意想不到的机会，并最终催生了本书。</p></blockquote><hr><p>以前经常认为稀缺是一种现象，一种社会现实，可从行为心理学的角度看，稀缺只是因为我们的需要没有得到满足，是拥有少于需要的感觉，每个人的稀缺感都千人千面，这样想来，我们还有必要苦苦的去埋怨稀缺吗？说句扎心的话，这些都是自找的。</p><blockquote><p>稀缺，是“拥有”少于“需要”的感觉：塞德希尔感觉心烦意乱，觉得自己的时间太少，而要去做的事情又太多；肖恩感觉手头拮据，有永远都还不完的账单。</p></blockquote><hr><p>饥饿的时候，与食物相关的事物会俘获我们更多的注意力，口渴的时候，与水相关的事物会俘获我们更多的注意力，贫穷的时候，我们会高估硬币的尺寸，富有的时候，我们会低估硬币的尺寸。稀缺不是客观存在的，更多时候是我们的主观感知，而且这会影响我们对周围世界的认识。</p><blockquote><p>稀缺对注意力的俘获，不仅会影响我们的所见和所见的速度，而且也会影响我们对周遭世界的认识。</p></blockquote><hr><p>◆ 资源稀缺换来了专注与回报</p><p>Deadline是行动的最强推动力，真是一点都不假，原来这不只是Deadline 的力量，所有的稀缺都有这一力量，我们的力量一直很大，只是很懒罢了。</p><blockquote><p>稀缺，会迫使人做出选择。所有抽象的事物都会变得具体起来。</p></blockquote><hr><p>专注红利有点意思，在稀缺的环境下，我们能将资源利用率提高到前所未有的高度，如果说懒惰是推动人类进步的源动力，那么稀缺就是进步的加速器。</p><blockquote><p>各种类型的稀缺都会产生专注红利，而不仅仅局限于时间稀缺。比如，当牙膏越用越少时，我们就不会像刚拿到一管新牙膏时那样一下挤出来很多；在享受一盒价格不菲的美味巧克力时，我们总会由衷地去仔细品味最后那几块，有时还舍不得吃掉；假期的最后几天，我们会马不停蹄地游览各个景点，争取一个不落；如果有字数的限制，在文章快收尾时，我们就会以更加谨慎的态度去写作，而且还会出其不意地写出更加精彩的文章。</p></blockquote><hr><p>稀缺并没有让我们的精力增加，专注红利只是把我们的注意力从其他地方转移在了某一个具体的事情上，有专注红利，也就有管窥之见，还记得心理学上那个著名的实验——消失的大猩猩。在项目管理中有一个说法，不要让事情都落到重要且紧急的象限中，要尽量让自己做重要且不紧急的事，可是从专注红利的角度看，要提高效率就得做重要且紧急的事，而Deadline 之前的时间就是把管窥不到的事情再拆开，以便可以享受到专注红利。</p><blockquote><p>专注于某一事物就意味着我们会忽略其他事物。想必我们都有过这样的体会：当我们沉浸在一本书或一部电视剧中时，身旁朋友提出的问题我们往往会充耳不闻。可见，专注同时也会将其他事物排除在外。所以，我们可以说稀缺令人“专注”，也可以说稀缺导致我们有了“管窥”之见——只能一门心思地专注于管理手头的稀缺。</p></blockquote><hr><p>我们是如何陷入贫穷和忙碌的，《贫穷的本质》一书中给出了很多参考，其中同样也提到了人们不愿意投入精力和金钱到教育、保险、医疗等领域，本书也给出了一个答案，因为贫穷是一种资源稀缺，这种环境下，人们会更加专注，可以获得专注红利的同时，也会导致管窥之见，于是看到的只是切身能感受到的事物，更广泛的认识和更长远的计划都被抑制了。</p><blockquote><p>对于连糊口都成问题的农民来说，下一季的干旱或身体健康问题此刻就会显得非常抽象，就会被排除在“管子”的视野之外。对于农民现在迫切需要的东西——食物、房租、孩子的学费，保险都不能予以解决，而且还会令本已揭不开锅的家庭更加拮据。</p></blockquote><hr><p>◆ “噪声”干扰了我们的思想</p><p>我们为什么会陷入贫穷，因为我们进入了贫穷陷阱，贫穷本身会成为心智负担，面对150美元时的费用时，穷人和富人差别不大，但是面对1500美元的费用时，富人会选择行动，而穷人会选择观望，贫穷状态削弱了流体智力和执行控制力，这就让穷人在认知和行动上都陷入了恶性循环。</p><blockquote><p>有一点可以明确：贫穷会成为心智的负担。就算没有实验人员去提醒稀缺的存在，贫穷状态也会削弱流体智力和执行控制力。回到我们最初讨论的话题，这种结论就意味着，针对穷人认知能力的讨论有了重大转变。我们现在认为，穷人的“有效”能力的确比富人要弱一些。这并不是因为穷人的能力差，而是因为他们的一部分大脑早已被稀缺所俘获了。</p></blockquote><hr><p>◆ 权衡式思维</p><p>这么多这个研究结果有意思，当人们有了更多兴趣选择的时候，往往会坚定自己最初的选择，人们常常会通过坚持最初的计划来避免选择的负担，实际上就是选择了不去做选择。这或许就是为自己的选择找理由的过程吧，当其他选择越多，过滤后的理由就更多。</p><blockquote><p>你计划今晚在图书馆里完成第二天就要交的论文。但当你穿过校园时，忽然发现你仰慕已久的一位作家要在校园里办讲座。此时，你是坚持去图书馆，还是去听讲座？</p><p>随后，另一组大学生也拿到了同样的问题，不过里面加上了一个新选择（加黑部分），以进一步诱惑他们放弃图书馆之行：</p><p>你计划今晚在图书馆里完成第二天就要交的论文。但当你穿过校园时，忽然发现你仰慕已久的一位作家要在校园里办讲座。而且，在另一个礼堂里，一部你一直想看的外国电影也要放映。此时，你是坚持去图书馆，去听讲座，还是去看电影？</p><p>当只有“讲座”这一个富有吸引力的选择时，60%的学生都会坚持去图书馆。而当同时面对两个富有吸引力的选择时，更多的学生（80%）会选择去图书馆。</p></blockquote><hr><p>稀缺也会存在一种陷阱，稀缺让我们没有余闲来承担失误，没有过多的选择备选，就像小行李箱，放进去一个就得拿出来一个，正是这种选择的匮乏，促使了更多的不坚定，就像当只面对看书和听讲座两个选择，和面对看书、听讲座和看电影三个选择时，备选越多，越会坚定某一个选择。于是更少的选择，造成了更多的不合理选择，更多的失误。</p><blockquote><p>稀缺不仅意味着人们没有失误的空间，也意味着人们更有可能会出现失误。</p></blockquote><hr><p>“一个人的富有程度，与他所能舍弃之物的数量成正比”。如果很多年前看到这句话，我可能觉得富人是站着说话不腰疼，不过看了这里的描述，开始慢慢体会其中深意。舍弃之物越多，余闲越多，这时候难道不是富裕吗。反而是拥有的东西越多，可灵活支配的越少，稀缺感越大，反而是贫穷的。</p><blockquote><p>就像亨利·大卫·梭罗曾说过的那样，“一个人的富有程度，与他所能舍弃之物的数量成正比”。</p></blockquote><hr><p>◆ 50美元，在穷人和富人眼中的价值不一</p><p>以前就看过这样的例子，我们宁愿绕路30分钟节省10美元买一个价值100美元的DVD机，但是不太会绕路30分钟节省10美元买一个价值1000美元的笔记本电脑。现在开始逐渐明白，这就是穷人和富人的思维差异，贫与富都是相对的，既然可以负担1000美元的成本，那一定程度上来说是富有的，在富人眼里，10美元不会造成稀缺，即使不在此处多花这10美元，也会有别处花。但是对于花100美元成本的人而言，相对是贫穷的，10美元可能足以造成稀缺，所以会更加谨慎。</p><blockquote><p>这说明，我们所谓的节俭存在着一个违背常理的推论——我们在小物件上连几毛几分钱都会计较，而在大物件上却挥金如土。这样看来，我们所谓的节俭根本派不上用场。我们会花好几个小时在网络上东查西找，就只是为了从一双标价为150美元的鞋子上省出50美元；但我们却不会为了从一辆价值两万美元的汽车上省出几百美元，而花费几个小时的时间去做信息搜集工作。</p></blockquote><hr><p>10美元的消费是市场上的通货等价物，但是对于富人和穷人来说并不一样，对于富人来说，可能只有1美元那么少，对于穷人来说，可能有100美元那么多，这取决于他们认为的机会成本。所以看到这里，越发的同意作者在开篇所说，稀缺不是固有的现实，是我们看待现实的态度。</p><blockquote><p>我们之所以会对物品的价值感到模糊和混淆，是因为我们在资源充裕的情况下是不会进行权衡的，而且我们可能根本不知道应该如何进行权衡。为了对这一观点进行直观的分析，我们请实验对象试想下面这个场景。</p></blockquote><hr><p>◆ 管窥与借用</p><p>稀缺产生管窥心态，管窥心态促进了借用行为的发生，借用又反过来产生更大的稀缺，这就是由稀缺产生的贫穷陷阱。以金钱而言，在缺钱的时候基本上任何时候都是在想如何获得更多的钱解决当下问题，最快的方法就是借用，而不会看到稍微长远稳定的工作和劳动，可是借用只是看似解决了当下的问题，实则为下一个还款日埋下了更大的隐患。以时间而言同样，稀缺可能让人乐于熬夜，可熬夜会让第二天起得更晚。</p><blockquote><p>在稀缺状态下，我们为何会产生借用行为？之所以去借用，是因为我们有了管窥心态。而当我们借用时，就是给自己的将来挖下了更深的坑。也就是说，今天的稀缺将造就明天更大的稀缺。</p></blockquote><hr><p>◆ 停不下来的杂耍</p><p>对一些一直知晓的事实，却总会为我们带来突如其来的惊诧。本来一件事很早之前自己就安排好了要做，可是一直拖一直拖，直到最后一刻才着手开始，都说Deadline是第一生产力，真不假。这一切都源于我们的稀缺心态导致的管窥。我个人的解决办法，2分钟能解决的事马上做，10分钟能解决的事不隔夜，这样能尽可能把精力集中起来，而且尽量做重要且不紧急的事情上。</p><blockquote><p>你以前肯定也有过这种经历。当你专注于解决本周的吃饭问题时，就不会考虑下一周即将发生事情的细节。之后，当下一周到来之时，一些你有所预期的事情很可能会存在一些你意想不到的地方。你很可能早就准备买一张机票，却错过了提前一周购票才能享受的优惠。或者，你万分惭愧地向妻子低头认错，因为你早就答应陪她去看一场表演，但临时却买不到票了。工作上，在你脚打后脑勺地完成了一项任务之后，突然意识到另一项任务的完成时间只剩两天了。仿佛就在前不久，这项任务的截止日期还有好几周时间。你一直“知晓”的事实，现在却成了突如其来的惊诧。</p></blockquote><hr><p>这个角度还挺有意思，贫穷小贩宁愿借债也不愿意存钱，前面我们都在说因为稀缺出现管窥心态，导致短视，只能循环借用，掉入稀缺陷阱。可这里还有一个角度，有可能是他们没有地方存储省下来的钱，放家里担心被偷，银行又不提供服务，周末急用钱或存钱的时候有的地方还不开门。所以逐渐开始不存钱，有一些余闲就购置两个砖块，买一些建筑材料，这可能就是他们的存储方式，可是我们都知道，这种低流动性的物品很难短期内为他们创造财富，于是他们被迫更多的借用，再一次陷入稀缺陷阱。</p><blockquote><p>一种解释认为，小贩们宁愿借债也不愿意存钱，因为他们没有地方储存省下来的钱——一方面，银行拒绝为他们提供服务；另一方面，他们也会担心随处放置的现金的安全，因为这些钱很容易被偷，或者被家里的其他成员悄悄花掉。如果真的是这样，那么在拿到我们提供的现金后，他们应该会迅速地去购买一些耐用品，然后将这样东西保存好，并继续借债。最终，他们会再次落回稀缺陷阱之中。</p></blockquote><hr><p>这个比喻感同深受，有时候我们可能很难理解为什么给穷人消除了所有债务后，一段时间以后，他们还是会陷入稀缺陷阱。换做是时间，给一直非常繁忙的人去掉所有历史任务，他可获得短期内的时间余闲，但是一段时间以后，他还是会陷入繁忙之中。所以永远不要相信忙过这段时间就好了的托词，如果不改变心态，忙过了这段时间，紧接着会忙下一段时间。</p><blockquote><p>请想象，有个日理万机却总是完不成任务的人获赠了一份时间礼物：过期未完成的任务凭空消失，所有需要花时间解决的问题都被解决了。这位曾经不堪重负、如今很忙碌的人，可能会在一段时间内保持积极状态。但最终，他还是会跌上一跤：一项重大工作中的突发问题、因病休假、工作效率低下等，导致他突然之间又落后一步。</p></blockquote><hr><p>避免陷入稀缺陷阱的一个好方法是建立缓冲机制，让在任何关键时刻都有一定的余闲，不需要很多，但至少不会产生大量借用，这就是对自己的风险管理。</p><blockquote><p>顺便说一下，我们并不是说避免稀缺陷阱的唯一方法就是拥有足够平息所有突发事件的大笔财富，而帮助小贩们解决问题的唯一方法也并不是给予他们更多的钱。我们的讨论强调的是，我们要建立起针对突发事件的缓冲机制。如果小贩们能得到低成本贷款或建立活期储蓄账户，而且只在紧急事件发生时才使用，那么他们就有了关键时刻所需要的余闲。同样，针对一些突发事件的保险也能解决问题。当然，许多人都能意识到这些缓冲机制的好处。这些好处实际上远比我们预期的要大，它们不仅能用来进行风险管理，还可以用来保护我们免于再次跌落到稀缺陷阱之中。</p></blockquote><hr><p>◆ “最后一公里”问题</p><p>当为了某件事在疲惫于奔命，这会让我们很专注，但同时也降低了我们的带宽，管窥之下，不止会造成借用，还有短视，长期下去，降低的是对未知世界的认识和自己的认知能力。</p><blockquote><p>穷人最缺的就是带宽。整日为了糊口而疲于奔命，就会令这种至关重要的资源日渐减少。</p></blockquote><hr><p>◆ 包容穷人的不当行为</p><p>系统性的学习某一技能和某一方面的知识是有好处的，但是，在时间和金钱带宽有效的条件下，这种系统性的学习方法不太适宜，平均而言，一个工作的人比一个正在上学的人每年看的书会少很多，这就是现实，上学时，学习所需要的带宽几乎没有限制，但是工作后，学习的时间只能有目的性的留下余闲。</p><blockquote><p>在没有带宽限制的世界中，上述所有知识都是值得学习的。但在现实世界中，施格尔认为，她可以给出更好的解决办法。她请来当地最优秀的一群创业人士，对他们的理财方法进行了研究。这些创业人士并没有学过复杂的会计方法，而他们与那些未能成功创业人士之间的区别就是，他们做到了一件事情：遵从经验法则。</p></blockquote><hr><p>◆ 余闲的重要作用</p><p>为自己释放的留下一些余闲，这是避免让自己陷入稀缺陷阱最好的方式，对于每天都疲于奔命的人而言，如果要想挤出一些余闲，可能觉得自己要疯了，可是仔细想想，真的所有的事情都需要亲力亲为吗？留有余闲，不只是避免稀缺陷阱，还是一种风险管理，也是强迫自己思考的方式。</p><blockquote><p>我们之所以没有能力构建起余闲，是因为专注于当下必须完成的工作，预测不到未来可能发生的所有事情。当下的工作迫近而清晰，而未来的可能性并不给人以紧迫感，也难以想象。当无形的未来与具体的当下产生冲突时，余闲就成了奢侈品，这就是你觉得自己没有资格去挥霍的原因。</p></blockquote><hr><p>◆ 把重要事情拉入“管子”视野中</p><p>避免自己短视，首先让下一件事进入自己的管子之中，如此可以让自己的精力从重要且紧急的事上逐渐迁移到重要但不紧急的事情上，一旦不这样做，总有其他稀奇古怪的事情占用宝贵的资源，最后原本不紧急的事变得紧急，甚至不得不舍弃，掉入稀缺陷阱。</p><blockquote><p>我们认为，穷人之所以储存不下钱，一部分原因就在于他们的“管子”视野——储蓄是一件重要但并不紧急的事务，而这类事务基本上总是会被穷人遗留在“管子”视野之外。无论何时，总会有比储蓄更为紧要的事情等着被处理。于是，我们将储蓄设定为人们关注的重点问题，将其带回“管子”视野之内。</p></blockquote><hr><p>在带宽充裕的时候行动，因为在带宽不充裕的时候，已经没有了行动的能力，换句话说，在带宽充裕的时候，把重要且不紧急的事情令尽快安排上。</p><blockquote><p>同样，由于低收入工作者很难做到消费均摊，所以那些按月领工资的人和领取粮食补贴的人，很可能在月底时带宽最少，而在月初时带宽最多。若能在政策推行和项目设计时将时机因素考虑在内，将是十分明智的做法。</p></blockquote><hr><p>稀缺通常都来源于富足，就像一下子免去穷人所有的债务，一段时间以后他们还是会陷入贫穷，或者一下子免去忙碌着所有的历史任务，一段时间以后他们还是会疲于奔命。不管有多富足，如果短期的思维不变，还是会重返稀缺。</p><blockquote><p>从富足起步</p><p>在完善稀缺管理方法的同时，我们也应该记住稀缺通常是从资源充裕期开始的：截止日期临近之时的忙乱，常常源于几周之前没有对充裕的时间进行有效的利用；收获之前的几个月，农民们手头的钱总是不够用，这是因为上次收获之后，他们没有对现金进行很好的规划。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 专注红利 </tag>
            
            <tag> 管窥之见 </tag>
            
            <tag> 带宽 </tag>
            
            <tag> 塞德希尔·穆来纳森 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>量化投资概念与技术</title>
      <link href="2021/03/27/liang-hua-tou-zi-gai-nian-yu-ji-zhu/"/>
      <url>2021/03/27/liang-hua-tou-zi-gai-nian-yu-ji-zhu/</url>
      
        <content type="html"><![CDATA[<p>策略众多，难以面面俱到，只做引子。</p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8724.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 量化投资 </tag>
            
            <tag> 金融学 </tag>
            
            <tag> 数学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>正则化那些事</title>
      <link href="2021/03/22/zheng-ze-hua-na-xie-shi/"/>
      <url>2021/03/22/zheng-ze-hua-na-xie-shi/</url>
      
        <content type="html"><![CDATA[<h2 id="正则化"><a href="#正则化" class="headerlink" title="正则化"></a>正则化</h2><h3 id="泛化误差、方差、偏差"><a href="#泛化误差、方差、偏差" class="headerlink" title="泛化误差、方差、偏差"></a>泛化误差、方差、偏差</h3><p>只要使用足够复杂的模型，计算机理论上可以拟合任意复杂的数据模式，这种复杂的模型在训练数据集上表现很好，但是在测试数据集上表现通常会很差。所以机器学习的核就心是设计不仅能在训练数据上表现好，而且在测试数据集上也能表现好的模型，即降低训练集上训练误差的同时，还希望泛化误差很低。</p><p>如果模型在训练集上不能获得足够低的训练误差，则称之为欠拟合。如果训练误差已经比较低，但是泛化误差很大，则称之为过拟合，直观图示如下：</p><p><img src="fit.png" alt="图片来源：过拟合百度百科"></p><p>中间图表示模型正好拟合；左侧图表示模型欠拟合，此时伴随着较高的偏差；右侧图表示模型过拟合，此时伴随着较高的方差。</p><p>为了更好的理解拟合效果与偏差、方差之间的关系，我们可以将泛化误差的数学表达式分解如下：</p><p>$$E(f;D) = E_{D}[(f(x;D) - y_{D})^{2}] = E_{D}[(f(x;D) - \overline{f}(x))^{2}] + (\overline{f}(x)- y)^{2} + E_{D}[(y - y_{D})^{2}]$$</p><p>分解式的第一个式子即方差，它表示了不同的训练数据集训练出的模型输出值之间的差异。</p><p>分解式的第二个式子即偏差，它表示所有模型输出的平均值与真实值之间的差异。</p><p>分解式的第三个式子即噪声，它表示所有模型所能达到的期望泛化误差下界，刻画了学习问题本身的难度。</p><p>即，泛化误差可以表示为为方差、偏差和噪声之和，由于噪声来源于数据本身的不规则扰动，所以通常情况下，上分解式最后一项置0，泛化误差为方差和偏差之和。</p><p>所以对于欠拟合的模型，模型并不能很好的刻画真实数据，所有模型输出的平均值与真实值之间都还存在非常大大差异，即有较大的偏差。</p><p>对于过拟合的模型，模型输出的平均值与真实值之间差异较小，但是不同训练数据集训练出来的模型输出值差异较大，即较大的方差。</p><h3 id="正则化策略"><a href="#正则化策略" class="headerlink" title="正则化策略"></a>正则化策略</h3><p>上面有说到，一个好的模型需要泛化误差较低，但是训练模型时经常出现要么偏差过大、要么方差过大的情况，都会导致泛化误差过大。而正则化就是通过有利的“交易”，来显著降低方差而不过度增加偏差的方法。</p><p>网络上很多流行的方法认为正则化策略是通过约束和惩罚以趋向于选择简单的模型，以保证不同数据集训练模型的输出方差较小，但实际情况中，一个好的模型不仅仅是合适规模那么简单，毕竟在此时，虽然方差小了，但是偏差也大了。特别是在深度学习场景中，一个适当正则化的大型模型，可能才是泛化误差最小的模型。</p><p>正则化策略包含很多，前面所述网络流行的约束和惩罚和惩罚只属其中一种，而且并非所有的约束和惩罚都被设计为偏好简单模型。除此之外，通过数据增强、半监督学习、多任务学习、集成学习、参数共享等方法，也可以达到提高模型泛化能力的目的。</p><p>本文将和大家一起探讨正则化的常见策略，探究那些提高模型泛化性能的道与术。</p><h2 id="数据增强"><a href="#数据增强" class="headerlink" title="数据增强"></a>数据增强</h2><p>提高模型泛化性能最好的办法就是使用更多的数据，让不同训练数据集中的差异足够下，如此模型输出的差异也会很小，达到减小方差的目的。但是实际模型搭建过程中，我们拥有的有效数据通常是有限的（虽然我们都在说数据爆炸，但这其中大多数数据都不能直接使用）。为了解决这个问题，于是有了数据增强方法。</p><h3 id="数据集增强"><a href="#数据集增强" class="headerlink" title="数据集增强"></a>数据集增强</h3><p>对于一般分类任务而言，分类的目的就是让输入在各种变换过程中保持模式信息不变。对于需要进行密度分布估计的数据来说，该方法具有一定困难性。但是对于当前计算机视觉和NLP领域而言，该方法却是简单且有效的。如在对象识别领域，图像是高维的并且包括各种巨大的变化因素，其中许多可以轻易的模拟。如像素处理、几何变换、颜色变换、旋转反射、噪声注入、内核过滤混合图像、随机擦除、缩放、移动、翻转、剪裁等基于图像技术的数据增强方法，特征空间增强、对抗生成、GAN生成、风格迁移等基于深度学习的数据增强方法。在自然语言处理领域，如同义词词典、随机插入、随机交换、随机删除、语法树结构替换、加噪、情景增强、生成对抗、回译、扩缩句等方法。参考 <a href="https://www.jiqizhixin.com/articles/2019-12-04-10">机器之心-哈工大SCIR：深度学习领域的数据增强</a> </p><h3 id="向权重注入噪声"><a href="#向权重注入噪声" class="headerlink" title="向权重注入噪声"></a>向权重注入噪声</h3><p>通常情况下，人工设计的数据集增强方法可以大大减小机器学习过程中的泛化误差。除了数据集增强，一些噪声策略可以直接添加到模型权重中。如在循环神经网络中，这被称为关于权重的贝叶斯推断的随机实现。在某些假设条件下，施加于权重的噪声的目的是鼓励学习的函数保持稳定，和更传统的正则化形式相同，它促使找到的点只是极小点、还是平坦区域包围的极小点。这种向输入添加方差极小的噪声的方法一定程度等价于对权重施加参数惩罚。</p><h3 id="向输出目标注入噪声"><a href="#向输出目标注入噪声" class="headerlink" title="向输出目标注入噪声"></a>向输出目标注入噪声</h3><p>同样，对于输出目标也可以进行噪声输入，这种方法也叫标签平滑，它能防止模型追求确切概率而不影响模型学习正确分类。</p><h2 id="范数惩罚"><a href="#范数惩罚" class="headerlink" title="范数惩罚"></a>范数惩罚</h2><h3 id="范数"><a href="#范数" class="headerlink" title="范数"></a>范数</h3><p>在说L1范数和L2范数前，线整体了解一下范数，范数是一种更广泛的距离的概念，它满足距离定义的三个特性</p><ul><li>非负</li><li>自反</li><li>三角不等式</li></ul><p>不过，范数在定义上比距离多了一条数乘的运算法则，一般情况下，范数可以当作距离理解。</p><p>在数学中，范数分为向量范数和矩阵范数，简单而言，向量范数表示的是向量空间中向量的大小，矩阵范数表示从一个矩阵到另一个矩阵的变化大小。</p><p>所有范数组成了范数族，统一表示为L-P范数，表达式如下：</p><p>$$L_{p} = ||W||<em>{p} = (\sum</em>{i = 1}^{n}|w_{i}|^{p})^{1/p}$$</p><p>当p=1时为L1范数，当p=2时为L2范数。</p><h3 id="L1、L2范数惩罚"><a href="#L1、L2范数惩罚" class="headerlink" title="L1、L2范数惩罚"></a>L1、L2范数惩罚</h3><p>L1、L2范数本身其实也可以作为损失函数，不过此处主要介绍其作为正则化惩罚的问题。</p><p>通过前面对范数族的理解，显然L1可以表示为各个参数的绝对值之和，即</p><p>$$L_{1} = ||W||<em>{1} = \sum</em>{i = 1}^{n}|w_{i}|$$</p><p>同理L2范数可以表示为</p><p>$$L_{2} = ||W||<em>{2} = (\sum</em>{i = 1}^{n}|w_{i}|^{2})^{1/2}$$</p><p>这两个正则化策略都是向目标函数中添加一个正则项</p><p>L1和L2分别作为正则项的目标函数表示为</p><p>$$J_{1}(w; X, y) = \alpha||w||_{1} + J(w; X, y)$$</p><p>$$J_{2}(w; X, y) = \frac{\alpha}{2}w^{T}w + J(w; X, y)$$</p><p>对应的梯度就分别变成了</p><p>$$\nabla J_{1}(w; X, y) = \alpha w + \nabla_{w} J(w; X, y)$$</p><p>$$\nabla J_{2}(w; X, y) = \alpha sign(w) + \nabla_{w} J(w; X, y)$$</p><p>（其中：$sign(w)$ 表示简单的取 $w$ 各元素的正负号）</p><p>可以看到 L1是在原目标函数上添加可一个常数项，L2是添加了一个线性项。而且L1的形式我们不一定能得到 $Jw; (X, y)$ 二次近似的算术解，而L2是是可以的，而且L2计算起来也会更加方便。</p><p>L1相比L2，由于其只表示各元素的正负号，会导致最优值中的很多参数为0，产生更加稀疏的解。基于该特性，L1也常被用于进行特征选择。</p><h2 id="半监督学习"><a href="#半监督学习" class="headerlink" title="半监督学习"></a>半监督学习</h2><p>半监督学习通过先对输入空间进行具有聚集特性的样本进行相似表示再做分类处理，以提高分类器的泛化性能，比如。</p><p>在分类之前，先使用因子分析（主成分分析）对数据进行投影，或对于图结构的一些分类，在实际分类前先对图结构进行嵌入式的图表示（如GraphSage），对表示后的向量再进行分类，或者直接在GraphSage中使用交叉熵进行分类。</p><h2 id="多任务学习"><a href="#多任务学习" class="headerlink" title="多任务学习"></a>多任务学习</h2><p>多任务学习是通过合并几个任务中的样例来提高泛化性能的一种方法，可以理解为对参数进行了软约束。将模型的一部分为多个额外的任务共享，在一定程度上为单个模型增加了训练样本，而且被共享的部分更有可能被约束到更好的值，以此来提高泛化性能。</p><p>示意如下图所示，任务共享相同的输入，但涉及不同目标任务的情况。</p><p><img src="multi_task_learning.png"></p><p>该方法因为共享参数，还能提升计算性能。不过，该方法只有某些参数可以共享时候才能发挥好的效果，即某些任务之间存在合理的统计关系假设，否则强制使用会使得模型效果更差。对与常见的学习任务，底层先验知识通常用于解释数据本身的分布变化。</p><h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><p>集成学习的方法可以参考 <a href="http://booleflow.com/2021/01/23/hao-er-bu-tong-de-ji-cheng-xue-xi/">好而不同的集成学习</a> ，集成的方法主要包括平均法、投票法和学习法，训练方法主要有Bagging和Boosting。</p><p>Bagging通过分别训练几个不同的模型，然后让所有模型表决样例的输出，以此来提高泛化性能，最常用的模型如随机森林，其本质上就是很多决策树模型的集成来提高单个决策树模型的泛化性能。</p><p>神经网络能够找到足够多不同的解，意味着可以从模型平均中收益，正是因为任何机器学习方法都可以从模型平均中受益，这种方法通常不作为科学论文的baseline。不过在机器学习比赛中，用数种乃至数十种模型平均的方法获胜，常常是比较有效的方法。</p><p>当然，不是所有的集成都能让集成模型比单一模型更加正则化，例如Boosting就构建了一种比单个模型容量更好的模型。</p><h2 id="交叉验证"><a href="#交叉验证" class="headerlink" title="交叉验证"></a>交叉验证</h2><p>交叉验证是在机器学习建立模型和验证模型参数时常用的办法，Bagging为有放回采样，而交叉验证可以理解为无放回模型平均，即把得到的样本数据进行切分，组合为不同的训练集和测试集，用训练集来训练模型，用测试集来评估模型预测的好坏。在此基础上可以得到多组不同的训练集和测试集，某次训练集中的某样本在下次可能成为测试集中的样本，即所谓“交叉”。其提高泛化性能的原理与集成学习类似。</p><p>常用的交叉验证方法有 参考 <a href="https://www.cnblogs.com/pinard/p/5992719.html">交叉验证(Cross Validation)原理小结</a></p><ul><li>简单交叉验证：我们随机的将样本数据分为两部分（比如： 70%的训练集，30%的测试集），然后用训练集来训练模型，在测试集上验证模型及参数。</li><li>S折交叉验证（S-Folder Cross Validation）：S折交叉验证会把样本数据随机的分成S份，每次随机的选择S-1份作为训练集，剩下的1份做测试集。</li><li>留一交叉验证（Leave-one-out Cross Validation）：它是第二种情况的特例，此时S等于样本数N，这样对于N个样本，每次选择N-1个样本来训练数据，留一个样本来验证模型预测的好坏。</li><li>自助法（bootstrapping）：比如我们有m个样本（m较小），每次在这m个样本中随机采集一个样本，放入训练集，采样完后把样本放回。这样重复采集m次，我们得到m个样本组成的训练集。</li></ul><h2 id="稀疏表示"><a href="#稀疏表示" class="headerlink" title="稀疏表示"></a>稀疏表示</h2><p>权重衰减可以直接惩罚模型参数，L1正则化会产生更加稀疏的解以达到正则化的目的，还有一种策略是可以惩罚神经网络的激活单元，比如稀疏化激活。也就说，稀疏表示是使得每个神经元的输入单元变得稀疏，很多输入是0。含有隐藏单元的模型本质上都可以变得稀疏。</p><p>前面所说的L1惩罚是稀疏表示的一种方法，此外，从表示上的Student-t先验导出的惩罚和KL散度惩罚都可以进行稀疏表示。</p><h2 id="早停-提前终止"><a href="#早停-提前终止" class="headerlink" title="早停/提前终止"></a>早停/提前终止</h2><p>在不考虑计算性能的条件下，如果不断的提高模型参数，模型理论上可以拟合任意复杂度的数据。但是这种情况经常会导致随着训练时间的推移，训练集误差不断下降的同时，验证集的误差会逐渐增大，特别是在深度学习任务中，该结果在模型训练后期几乎是必定出现。这就意味着只要验证集误差不再下降，训练过程即可终止，返回模型参数。这种方法就叫早停，也叫提前终止，由于其简单和有效，算是深度学习任务中最流行的正则化形式。</p><p>通过验证集误差的U型曲线可以确定提前终止这种策略是有效果的。那么提前终止的正则化机制是什么呢？其实通过限制训练步数（时间）可以将参数空间限制在初始值的领域内，在二次误差的简单线性模型和简单的梯度下降情况下，提前终止相当于L2正则化的效果。对比图如下：</p><p><img src="early_stopping.png"></p><p>上图左侧是提前终止效果，右侧是L2正则化效果。左图虚线是从原点开始的SGD经过的轨迹，右侧虚线圆圈表示L2的轮廓。</p><p>提前终止简单易用，不过也会带来一些额外的开销，如训练期间需要定期评估验证集，这也是提前终止最大的代价，其次，还有一个额外代价是每次终止都需要保存参数副本，不过这种偶发的慢写入对训练性能影响不大。</p><h2 id="参数共享"><a href="#参数共享" class="headerlink" title="参数共享"></a>参数共享</h2><p>参数范数惩罚是正则化参数使其彼此接近的一种方式，而更流行的方法是使用约束强迫某些参数相等。如将各种模型或模型组件共享唯一的一组参数。和正则化参数相比，其显著优点是只需要将参数的子集存储在内存中，这可以显著减少模型占用的内存。最典型的应用就是卷积神经网络（CNN）。</p><p>例如，对于猫狗的图片，如果猫狗在图片上的位置发生移动，并不会影响结果的变化，CNN通过在多个图像位置共享参数来考虑该特性，相同权重的隐藏单元在在输入的不同位置上计算获得，这就意味着猫狗出现在图像中的第 $i$ 列还是第 $i + 1$ 列，CNN都可以检测到目标。</p><p>参数共享不仅降低了CNN模型都参数数量，还在不增加训练数据的同时显著增加了网络的大小，算是将领域知识整合在网络架构中的最佳范例。</p><h2 id="Dropout"><a href="#Dropout" class="headerlink" title="Dropout"></a>Dropout</h2><p>Droupout是一种计算计算方便同时又功能强大的一种正则化方法，可以认为是集成大量深层神经网络的Bagging方法。</p><p>前面有说到Bagging需要训练和评估多个模型，当每个模型都是一个很大的神经网络时，这意味着非常大的计算开销。而Droupout正好是提供了一种廉价的Bagging近似，能够训练和评估指数级数量的神经网络。子网络集成效果表示如下</p><p><img src="dropout.jpeg"></p><p>和bagging方法相比，bagging中每个模型是完全独立的，而在dropout中，所有模型共享参数，而且模型继承了父网络中的参数的子集，这使得在有限的存储空间中可以表示多个模型，这也是dropout最关键的地方。在Bagging中，每一个模型在相应训练集上训练到收敛，在dropout中，大部分模型都没有被显式地训练，因为父神经网络会很大，其子网络更是一个庞大的集合。相应的方法是训练一些子网络，参数共享的方法会使得剩余的子网络也能有不错的参数设定。</p><p>Dropout看似集成复杂，实则计算非常简单，当利用minibatch的算法随机梯度下降算法来训练时，产生n个随机二进制数与状态相乘即可，每个样本每次更新只需要 O(n) 的计算复杂度。</p><p>Dropout另一个优点是不怎么受限于模型结构和训练过程，基本上在所有分布式表示且可以用随机梯度下降训练的模型上都可以有很好的效果。</p><p>Droupout还有一个优点是来自隐藏单元的掩码噪声，这也是其强大的重要原因，所以Droupout也可以看作是通过噪声相乘构建新输入的过程，而且这个过程可以对输入内容高度智能化、自适应，这相比于传统的噪声注入，基本上不会破坏输入的原始信息。</p><h2 id="对抗训练"><a href="#对抗训练" class="headerlink" title="对抗训练"></a>对抗训练</h2><p>在独立同分布的数据集上，神经网络的表征能力已经和人不相上下，但是神经网络本质上还是基于数据特征去理解事例的，一些人类观察不到的原始样本于对抗样本之间的差异，网络却可能给出不同的预测。</p><p><img src="adversarial_training.jpeg"></p><p>如上图，在熊猫图片加了一些人眼不可见的干扰，形成新样本，而新的人眼仍可鉴定为熊猫的图片却会被机器以较大置信率鉴定为长臂猿。形成这样的结果主要是由于神经网络中的大部分组成还是线性的(如ReLU可以看成是分段线性)，而对于不同的输入，线性函数会受到较大的扰动，产生较大的改变。</p><p>为了解决这一问题，可以将对抗样本重新加到训练集中，使得神经网络倾向于对于数据集保持局部稳定而不至干扰过大，从而学习到更有效的信息，从这个角度上看，对抗样本算是一种输入数据集增强的方法。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p><a href="https://www.jiqizhixin.com/articles/2017-12-20">机器之心：一文概览深度学习中的五大正则化方法和七大优化策略</a></p><p><a href="https://www.zhihu.com/question/26485586">知乎：l1正则与l2正则的特点是什么，各有什么优势</a></p><p><a href="https://www.jiqizhixin.com/articles/2019-12-04-10">机器之心-哈工大SCIR：深度学习领域的数据增强</a></p><p><a href="https://windmising.gitbook.io/bible-deeplearning/0introduction-1">深度学习中的正则化</a></p><p><a href="https://developers.google.com/machine-learning/crash-course/regularization-for-sparsity/l1-regularization?hl=zh-cn">稀疏性正则化</a></p><p><a href="http://booleflow.com/2021/01/23/hao-er-bu-tong-de-ji-cheng-xue-xi/">好而不同的集成学习</a></p><p><a href="https://www.cnblogs.com/pinard/p/5992719.html">交叉验证(Cross Validation)原理小结</a></p><p><a href="https://zhuanlan.zhihu.com/p/41462329">深度学习中的正则化方法总结——深度学习第七章</a></p><p>《深度学习》，IanGoodfellow、YoshuaBengio、AaronCourville著，-第1版，–人民邮电出版社 </p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 正则化 </tag>
            
            <tag> 过拟合 </tag>
            
            <tag> 模型复杂度 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neo4j使用详解</title>
      <link href="2021/03/13/neo4j-shi-yong-xiang-jie/"/>
      <url>2021/03/13/neo4j-shi-yong-xiang-jie/</url>
      
        <content type="html"><![CDATA[<h2 id="安装neo4j"><a href="#安装neo4j" class="headerlink" title="安装neo4j"></a>安装neo4j</h2><h3 id="neo4j简介"><a href="#neo4j简介" class="headerlink" title="neo4j简介"></a>neo4j简介</h3><p>Neo4j是一个基于JAVA编写的NoSQL数据库，相比于 MySQL 之类的关系数据库(RDBMS)，能更灵活地表示数据，主要特点有：</p><ul><li>可以灵活地设计、扩展 schema</li><li>适合表示实体之间的关系（特别是当实体之间存在大量、复杂的关系时）</li></ul><p>Neo4j存储的图由顶点（节点node）、边（关系relationship）和属性（property）组成，顶点和边都可以设置属性（一个或多个），使用Cypher进行查询，同时支持scala、python等调用。</p><p><strong>开发者可参考：<a href="https://neo4j.com/developer/">nep4j developer</a></strong></p><h3 id="准备java环境"><a href="#准备java环境" class="headerlink" title="准备java环境"></a>准备java环境</h3><p>（如果机器有java环境，此步略）</p><p>在shell运行如下命令查看java版本</p><pre class="line-numbers language-shell"><code class="language-shell">java -version<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Neo4j基于Java环境，所以在安装neo4j之前先安装JAVA SE的JRE，去Oracle官网下载JDK（JDK包含JRE，JRE提供环境，JDK可以支持开发Java程序）。<a href="https://www.oracle.com/java/technologies/javase-downloads.html">下载JAVA SDK</a> </p><ul><li>JAVA版本需要与Neo4j版本对应，我使用的neo4j版本4.2.2，使用的JAVA版本jdk-11.0.9</li></ul><p>可以把JAVA JDK配置在环境变量也可以在运行时通过export指定（后面使用export指定的方法）。</p><h3 id="安装neo4j-1"><a href="#安装neo4j-1" class="headerlink" title="安装neo4j"></a>安装neo4j</h3><p>安装过程非常方便，下载tar包解压，按需修改config即可</p><p>下载neo4j，<a href="https://neo4j.com/download-center/#community">neo4j下载地址</a> ,社区版本是免费的，推荐。</p><p>下载完成后解压</p><pre class="line-numbers language-shell"><code class="language-shell">tar -axvf neo4j-community-4.2.2-unix.tar.gz<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="修改相应配置"><a href="#修改相应配置" class="headerlink" title="修改相应配置"></a>修改相应配置</h3><p>配置在conf/neo4j.conf，并不是全部都需要修改，看个人需要，我就改了一下端口（注：neo4j涉及三个端口），重点关注配置</p><pre class="line-numbers language-shell"><code class="language-shell"># 修改第22行load csv时l路径，在前面加个#，可从任意路径读取文件#dbms.directories.import=import# 修改35行和36行，设置JVM初始堆内存和JVM最大堆内存# 生产环境给的JVM最大堆内存越大越好，但是要小于机器的物理内存dbms.memory.heap.initial_size=5gdbms.memory.heap.max_size=10g# 修改46行，可以认为这个是缓存，如果机器配置高，这个越大越好dbms.memory.pagecache.size=10g# 修改54行，去掉改行的#，可以远程通过ip访问neo4j数据库dbms.connectors.default_listen_address=0.0.0.0# 默认 bolt端口是7687，http端口是7474，https端口是7473，不修改下面3项也可以# 修改71行，去掉#，设置http端口为7687，端口可以自定义，只要不和其他端口冲突就行dbms.connector.bolt.listen_address=:7687# 修改75行，去掉#，设置http端口为7474，端口可以自定义，只要不和其他端口冲突就行dbms.connector.http.listen_address=:7474# 修改79行，去掉#，设置http端口为7473，端口可以自定义，只要不和其他端口冲突就行dbms.connector.https.listen_address=:7473# 修改227行，去掉#，允许从远程url来load csvdbms.security.allow_csv_import_from_file_urls=true# 修改246行，允许使用neo4j-shell，类似于mysql 命令行之类的dbms.shell.enabled=true# 修改235行，去掉#，设置连接neo4j-shell的端口，一般都是localhost或者127.0.0.1，这样安全，其他地址的话，一般使用https就行dbms.shell.host=127.0.0.1# 修改250行，去掉#，设置neo4j-shell端口，端口可以自定义，只要不和其他端口冲突就行dbms.shell.port=1337# 修改254行，设置neo4j可读可写dbms.read_only=false<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><p>如果将JAVA配置在环境变量中，则可以直接运行start启动</p><pre class="line-numbers language-shell"><code class="language-shell">bin/neo4j start  # 启动bin/neo4j stop  # 停止bin/neo4j restart  # 重启bin/neo4j status  # 状态<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>如果JAVA没有配置在环境变量可以新建一个执行脚本，类似如下</p><pre class="line-numbers language-shell"><code class="language-shell">export JAVA_HOME="/xxx/jdk-11.0.9"export PATH=/xxx/neo4j-community-4.2.2/bin:/xxx/jdk-11.0.9/bin:$PATHneo4j $*<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h3 id="设置密码"><a href="#设置密码" class="headerlink" title="设置密码"></a>设置密码</h3><p>安装完Neo4j后 默认的初始用户名是:neo4j ，密码也是：neo4j</p><p>登录成功后，会要求重置 neo4j 密码，修改并确认新密码。也可以通过命令行修改密码，运行</p><pre class="line-numbers language-shell"><code class="language-shell">./cypher-shell  # 命令， 输入用户名，密码（初始默认用户名和密码为 neo4j）# 输入命令CALL dbms.security.changePassword('123456'); # 输入命令exit;  # 退出<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="数据导入"><a href="#数据导入" class="headerlink" title="数据导入"></a>数据导入</h2><h3 id="数据导入方法"><a href="#数据导入方法" class="headerlink" title="数据导入方法"></a>数据导入方法</h3><p>neo4j提供create、load、insert、import、Neo4j-import 共计5总导入方法。</p><p>常见导入形式对比</p><table><thead><tr><th align="left"></th><th align="left">CREATE语句</th><th align="left">LOAD CSV语句</th><th align="left">Batch Inserter</th><th align="left">Batch Import</th><th align="left">Neo4j-import</th></tr></thead><tbody><tr><td align="left">适用场景</td><td align="left">1 ~ 1w nodes</td><td align="left">1w ~ 10 w nodes</td><td align="left">千万以上 nodes</td><td align="left">千万以上 nodes</td><td align="left">千万以上 nodes</td></tr><tr><td align="left">速度</td><td align="left">很慢 (1000 nodes/s)</td><td align="left">一般 (5000 nodes/s)</td><td align="left">非常快 (数万 nodes/s)</td><td align="left">非常快 (数万 nodes/s)</td><td align="left">非常快 (数万 nodes/s)</td></tr><tr><td align="left">优点</td><td align="left">使用方便，可实时插入。</td><td align="left">使用方便，可以加载本地/远程CSV；可实时插入。</td><td align="left">速度相比于前两个，有数量级的提升</td><td align="left">基于Batch Inserter，可以直接运行编译好的jar包；可以在已存在的数据库中导入数据</td><td align="left">官方出品，比Batch Import占用更少的资源</td></tr><tr><td align="left">缺点</td><td align="left">速度慢</td><td align="left">需要将数据转换成CSV</td><td align="left">需要转成CSV；只能在JAVA中使用；且插入时必须停止neo4j</td><td align="left">需要转成CSV；必须停止neo4j</td><td align="left">需要转成CSV；必须停止neo4j；只能生成新的数据库，而不能在已存在的数据库中插入数据。</td></tr></tbody></table><p>此处给出Neo4j-import和load两种方法</p><h3 id="Neo4j-import导入"><a href="#Neo4j-import导入" class="headerlink" title="Neo4j-import导入"></a>Neo4j-import导入</h3><p>这里默认库式neo4j，所以在使用Neo4j-import之前需要将neo4j-community-4.2.2/data/databases/neo4j 下的文件清空。</p><p><strong>停止neo4j（neo4j stop）</strong></p><p>需要准备将数据准备为CSV格式，实体Node数据格式如下：</p><p><img src="node_ip_csv.png"></p><p>关系数据格式如下</p><p><img src="edge_ip_uid_csv.png"></p><p>导入详细配置如下</p><pre class="line-numbers language-shell"><code class="language-shell">neo4j-admin import [--mode=csv] [--database=<name>]                          [--additional-config=<config-file-path>]                          [--report-file=<filename>]                          [--nodes[:Label1:Label2]=<"file1,file2,...">]                          [--relationships[:RELATIONSHIP_TYPE]=<"file1,file2,...">]                          [--id-type=<STRING|INTEGER|ACTUAL>]                          [--input-encoding=<character-set>]                          [--ignore-extra-columns[=<true|false>]]                          [--ignore-duplicate-nodes[=<true|false>]]                          [--ignore-missing-nodes[=<true|false>]]                          [--multiline-fields[=<true|false>]]                          [--delimiter=<delimiter-character>]                          [--array-delimiter=<array-delimiter-character>]                          [--quote=<quotation-character>]                          [--max-memory=<max-memory-that-importer-can-use>]                          [--f=<File containing all arguments to this import>]                          [--high-io=<true/false>]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>我使用用的命令如下</p><pre class="line-numbers language-shell"><code class="language-shell">export JAVA_HOME="/xxx/jdk-11.0.9"export PATH=/xxx/neo4j-community-4.2.2/bin:/xxx/jdk-11.0.9/bin:$PATHneo4j-admin import --database=neo4j \             --nodes ./data/node_ip.csv \             --nodes ./data/node_mobile.csv \             --nodes ./data/node_userid.csv \             --relationships ./data/edge_mobile_userid.csv \             --relationships ./data/edge_ip_mobile.csv \             --relationships ./data/edge_ip_userid.csv \             --skip-duplicate-nodes=true \             --ignore-empty-strings=true<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>启动neo4j（neo4j start）即可。</strong></p><h3 id="load-csv-导入"><a href="#load-csv-导入" class="headerlink" title="load csv 导入"></a>load csv 导入</h3><p>对于数据量千万以下，个人推荐使用load csv 方法，将数据转化为csv后，不用停止neo4j，灵活方便。</p><p><strong>这里使用图的时候有一个需求：只查询近一段时间的关系数据，更早时间的不需要，采用的方法是例行化产生小时级划分的csv文件夹，按照load csv的方法，load指定文件夹的数据到neo4j中，更早时间的数据可以删除</strong></p><p>创建节点</p><pre class="line-numbers language-shell"><code class="language-shell"># 创建NodeIp node数据表CREATE CONSTRAINT ON (i:NodeIp) ASSERT i.id IS UNIQUE;LOAD CSV WITH HEADERS FROM 'file:///ppp/20210301/00/node_ip.csv' AS line FIELDTERMINATOR ','  MERGE (:NodeIp &#123; id:line.id ,name: line.name, lab: line.label&#125;);# 创建NodeUserid node数据表CREATE CONSTRAINT ON (i:NodeUserid) ASSERT i.id IS UNIQUE;LOAD CSV WITH HEADERS FROM 'file:///ppp/20210301/00/node_userid.csv' AS line FIELDTERMINATOR ','  MERGE (:NodeUserid &#123; id:line.id ,name: line.name, lab: line.label&#125;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>创建边（neo4j的关系是任意的，所以方向可忽略）</p><pre class="line-numbers language-shell"><code class="language-shell">LOAD CSV WITH HEADERS FROM "file:///ppp/20210301/00/edge_ip_userid.csv" AS line FIELDTERMINATOR ','MATCH (from:NodeIp&#123;id: line.startid&#125;),(to:NodeUserid&#123;id: line.endid&#125;) MERGE (from)-[r:ip_userid &#123;typ: line.typ, appname:line.appname, dtime:line.dtime, dt:line.dt, hour:line.hour&#125;]->(to);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>创建完成后如下</p><p><img src="ip_userid_graph.png"></p><h2 id="Cypher操作"><a href="#Cypher操作" class="headerlink" title="Cypher操作"></a>Cypher操作</h2><h3 id="CQL语言"><a href="#CQL语言" class="headerlink" title="CQL语言"></a>CQL语言</h3><p>CQL代表Cypher查询语言。 像Oracle数据库具有查询语言SQL，Neo4j具有CQL作为查询语言。详细可参考 <a href="https://www.w3cschool.cn/neo4j/neo4j_cql_return_clause.html">neo4j教程</a></p><p>在创建节点和边的过程中已经使用过CREATE、MATCH、MERGE、LAOD等语句。</p><pre class="line-numbers language-shell"><code class="language-shell"># NodeIp节点表，并显示前25行。MATCH (n:NodeIp) RETURN n LIMIT 25;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 加where条件MATCH (IP:NodeIp) WHERE IP.name = 'xxx.xxx.xxx.xxx'RETURN IP LIMIT 25;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 删除节点MATCH (IP:NodeIp) DELETE IP;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 添加或更新属性值MATCH (IP:NodeIp)SET IP.name = 'xxx'RETURN IP;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># 排序MATCH (IP:NodeIp)RETURN IP.nameORDER BY IP.name DESC;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-shell"><code class="language-shell"># in 运算符MATCH (IP:NodeIp) WHERE IP.name IN ['xxx','xxx']RETURN IP;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多可参考 <a href="https://www.w3cschool.cn/neo4j/neo4j_cql_return_clause.html">neo4j教程</a></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neo4j </tag>
            
            <tag> Cypher </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SiameseNetwork孪生神经网络原理及实现</title>
      <link href="2021/03/06/siamesenetwork-luan-sheng-shen-jing-wang-luo-yuan-li-ji-shi-xian/"/>
      <url>2021/03/06/siamesenetwork-luan-sheng-shen-jing-wang-luo-yuan-li-ji-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="Siamese-network"><a href="#Siamese-network" class="headerlink" title="Siamese network"></a>Siamese network</h2><p>Siamese一词表示暹罗双胞胎，其意为连体人，源于十九世纪泰国的一对连体婴，中文名译为孪生、连体。</p><p>顾名思义，该网络表示两个或多个神经网络在一定程度是“连体”的，可以是网络结构相连，也可以是权重相连。如下图表示网络结构相连，左右两个网络可以是同一个，也可以是不同网络，比如一个是CNN，另一个是LSTM，如果左右两边权重不共享，此时叫伪孪生网络，如下图所示</p><p><img src="pseudo_siamese_network.png" alt="伪孪生网络"></p><p>如果网络之间的权重是共享的，这里的连体通过<strong>权重共享</strong>实现，称为孪生网络，如下图所示：</p><p><img src="siamese_network.png" alt="孪生网络"></p><p>在实际实现时，为了方便可以使用同一个网络，如下pytorch代码所示：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiameseNetwork</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SiameseNetwork<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cnn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward_once</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>cnn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        output <span class="token operator">=</span> output<span class="token punctuation">.</span>view<span class="token punctuation">(</span>output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input1<span class="token punctuation">,</span> input2<span class="token punctuation">)</span><span class="token punctuation">:</span>        output1 <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_once<span class="token punctuation">(</span>input1<span class="token punctuation">)</span>        output2 <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_once<span class="token punctuation">(</span>input2<span class="token punctuation">)</span>        <span class="token keyword">return</span> output1<span class="token punctuation">,</span> output2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="功能与用途"><a href="#功能与用途" class="headerlink" title="功能与用途"></a>功能与用途</h2><p>孪生网络针对两个输入input1和input2，分别进入神经网络network1和network2，通过最后的loss计算，可以评价两个network后向量的相似度，即两个input输入的相似度。</p><p>孪生网络由于权重共享，所以一定程度上限制了network1和network2的差异不能太大，所以通常用来处理两个输入差异不是非常大的问题， 比如，对比两张图片、两个句子、两个词汇的相似度。对于输入差异很大的相似度，比如图片与相应的文字描述，文章标题与文章段落的相似度，这时候就需要使用伪孪生网络。</p><p>所以针对不同的情况，主要需要选择的是网络结构和对应的损失函数。</p><h2 id="损失函数"><a href="#损失函数" class="headerlink" title="损失函数"></a>损失函数</h2><p>siamese network的输入是两个经过network表示后的向量，在新的向量空间中，只要能判断两个向量的距离，让同类的距离越小，异类的距离越大就能达到目的。所以这里的距离可以有很多，比如欧式距离，余弦距离，指数距离都可以。</p><p>原论文中结构如下</p><p><img src="SiameseArchitecture.png" alt="siamese结构"></p><p>输入是 $X_{1}, X_{2},X^{‘}<em>{2}$，其中 $X</em>{1}$ 和 $X_{2}$ 属于同一类，$X_{1}$ 和 $X^{‘}<em>{2}$ 非同一类，$G</em>{w}$ 是network模型，其中 $W$ 为参数。</p><p>距离采用 $L_{2}$ 距离。</p><p>$$E_{w}(X_{1}, X_{2}) = ||G_{w}(X_{1}) - G_{w}(X_{2})||$$</p><p>损失函数采用Contrastive Loss</p><p>$$L(W) = \sum_{i = 1}^{P}l(W, (Y, X_{1}, X_{2})^{i})$$</p><p>$$l(W, (Y, X_{1}, X_{2})^{i}) = (1 - Y)l_{G}(E_{w}(X_{1}, X_{2})^{i}) + Yl_{I}(E_{w}(X_{1}, X_{2})^{i})$$</p><p>$Y$ 表示 $X_(1)$ 和 $X_{2}$ 是否是同一类，同类为0，不同类为1。$P$ 是输入的总样本数，$i$ 为当前样本的下标。</p><p>$l_{G}$ 表示为同类时的损失函数，$l_{I}$ 表示为同不同类时的损失函数。当为同类时，$l_{G}$ 尽可能小，当为不同类时，$l_{I}$ 尽可能大。</p><p>pytorch计算方式如下</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ContrastiveLoss</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Contrastive loss function.    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> margin<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ContrastiveLoss<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>margin <span class="token operator">=</span> margin    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>        euclidean_distance <span class="token operator">=</span> F<span class="token punctuation">.</span>pairwise_distance<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> keepdim <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        loss_contrastive <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>label<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>euclidean_distance<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                      <span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>margin <span class="token operator">-</span> euclidean_distance<span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> loss_contrastive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="三胞胎连体"><a href="#三胞胎连体" class="headerlink" title="三胞胎连体"></a>三胞胎连体</h2><p>常用的的孪生网络是基于双胞胎连体的，不过，基于三胞胎连体也是可以的，比如这篇论文就提出了Triplet network网络 <a href="https://arxiv.org/abs/1412.6622">Deep metric learning using Triplet network</a> 。网络结构如下</p><p><img src="triplet_network.png" alt="Triplet network structure"></p><p>输入是三个，一个正例两个负例，或一个负例两个正例。据作者实验，Triplet network在Mnist数据集上的表现是更优的。</p><p><img src="classification_accuracy.png" alt="Classification accuracy"></p><h2 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h2><p>完整代码如下，参考：<a href="https://github.com/harveyslash/Facial-Similarity-with-Siamese-Networks-in-Pytorch">Facial-Similarity-with-Siamese-Networks-in-Pytorch</a> </p><h3 id="基础准备"><a href="#基础准备" class="headerlink" title="基础准备"></a>基础准备</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">%</span>matplotlib inline<span class="token keyword">import</span> torchvision<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>datasets <span class="token keyword">as</span> dset<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>transforms <span class="token keyword">as</span> transforms<span class="token keyword">from</span> torch<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>data <span class="token keyword">import</span> DataLoader<span class="token punctuation">,</span>Dataset<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span class="token keyword">import</span> torchvision<span class="token punctuation">.</span>utils<span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> random<span class="token keyword">from</span> PIL <span class="token keyword">import</span> Image<span class="token keyword">import</span> torch<span class="token keyword">from</span> torch<span class="token punctuation">.</span>autograd <span class="token keyword">import</span> Variable<span class="token keyword">import</span> PIL<span class="token punctuation">.</span>ImageOps    <span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn <span class="token keyword">as</span> nn<span class="token keyword">from</span> torch <span class="token keyword">import</span> optim<span class="token keyword">import</span> torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>functional <span class="token keyword">as</span> F<span class="token keyword">def</span> <span class="token function">imshow</span><span class="token punctuation">(</span>img<span class="token punctuation">,</span>text<span class="token operator">=</span>None<span class="token punctuation">,</span>should_save<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    npimg <span class="token operator">=</span> img<span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>axis<span class="token punctuation">(</span><span class="token string">"off"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> text<span class="token punctuation">:</span>        plt<span class="token punctuation">.</span>text<span class="token punctuation">(</span><span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> text<span class="token punctuation">,</span> style<span class="token operator">=</span><span class="token string">'italic'</span><span class="token punctuation">,</span>fontweight<span class="token operator">=</span><span class="token string">'bold'</span><span class="token punctuation">,</span>            bbox<span class="token operator">=</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'facecolor':'white', 'alpha':0.8, 'pad':10&amp;#125;)</span>    plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>np<span class="token punctuation">.</span>transpose<span class="token punctuation">(</span>npimg<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">show_plot</span><span class="token punctuation">(</span>iteration<span class="token punctuation">,</span>loss<span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>plot<span class="token punctuation">(</span>iteration<span class="token punctuation">,</span>loss<span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Config</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    training_dir <span class="token operator">=</span> <span class="token string">"/content/siamese_model/training"</span>    testing_dir <span class="token operator">=</span> <span class="token string">"/content/siamese_model/testing/"</span>    train_batch_size <span class="token operator">=</span> <span class="token number">64</span>    train_number_epochs <span class="token operator">=</span> <span class="token number">100</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="读取数据"><a href="#读取数据" class="headerlink" title="读取数据"></a>读取数据</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiameseNetworkDataset</span><span class="token punctuation">(</span>Dataset<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>imageFolderDataset<span class="token punctuation">,</span>transform<span class="token operator">=</span>None<span class="token punctuation">,</span>should_invert<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>imageFolderDataset <span class="token operator">=</span> imageFolderDataset            self<span class="token punctuation">.</span>transform <span class="token operator">=</span> transform        self<span class="token punctuation">.</span>should_invert <span class="token operator">=</span> should_invert    <span class="token keyword">def</span> <span class="token function">__getitem__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        img0_tuple <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imageFolderDataset<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true">#we need to make sure approx 50% of images are in the same class</span>        should_get_same_class <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>         <span class="token keyword">if</span> should_get_same_class<span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#keep looping till the same class image is found</span>                img1_tuple <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imageFolderDataset<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>                 <span class="token keyword">if</span> img0_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>img1_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true">#keep looping till a different class image is found</span>                img1_tuple <span class="token operator">=</span> random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imageFolderDataset<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>                 <span class="token keyword">if</span> img0_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">!=</span>img1_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>        img0 <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img0_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        img1 <span class="token operator">=</span> Image<span class="token punctuation">.</span>open<span class="token punctuation">(</span>img1_tuple<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        img0 <span class="token operator">=</span> img0<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>        img1 <span class="token operator">=</span> img1<span class="token punctuation">.</span>convert<span class="token punctuation">(</span><span class="token string">"L"</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>should_invert<span class="token punctuation">:</span>            img0 <span class="token operator">=</span> PIL<span class="token punctuation">.</span>ImageOps<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>img0<span class="token punctuation">)</span>            img1 <span class="token operator">=</span> PIL<span class="token punctuation">.</span>ImageOps<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>img1<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>transform <span class="token keyword">is</span> <span class="token operator">not</span> None<span class="token punctuation">:</span>            img0 <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img0<span class="token punctuation">)</span>            img1 <span class="token operator">=</span> self<span class="token punctuation">.</span>transform<span class="token punctuation">(</span>img1<span class="token punctuation">)</span>        <span class="token keyword">return</span> img0<span class="token punctuation">,</span> img1 <span class="token punctuation">,</span> torch<span class="token punctuation">.</span>from_numpy<span class="token punctuation">(</span>np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">[</span>int<span class="token punctuation">(</span>img1_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">!=</span>img0_tuple<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dtype<span class="token operator">=</span>np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__len__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> len<span class="token punctuation">(</span>self<span class="token punctuation">.</span>imageFolderDataset<span class="token punctuation">.</span>imgs<span class="token punctuation">)</span>folder_dataset <span class="token operator">=</span> dset<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>Config<span class="token punctuation">.</span>training_dir<span class="token punctuation">)</span>siamese_dataset <span class="token operator">=</span> SiameseNetworkDataset<span class="token punctuation">(</span>imageFolderDataset<span class="token operator">=</span>folder_dataset<span class="token punctuation">,</span>                                        transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                      transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                      <span class="token punctuation">]</span><span class="token punctuation">)</span>                                       <span class="token punctuation">,</span>should_invert<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="测试数据"><a href="#测试数据" class="headerlink" title="测试数据"></a>测试数据</h3><pre class="line-numbers language-python"><code class="language-python">vis_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>siamese_dataset<span class="token punctuation">,</span>                        shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                        num_workers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                        batch_size<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">)</span>dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>vis_dataloader<span class="token punctuation">)</span>example_batch <span class="token operator">=</span> next<span class="token punctuation">(</span>dataiter<span class="token punctuation">)</span>concatenated <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>example_batch<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>example_batch<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>imshow<span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>concatenated<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>example_batch<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>numpy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="visualising_data.png" alt="visualising_data"></p><h3 id="网络结构"><a href="#网络结构" class="headerlink" title="网络结构"></a>网络结构</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SiameseNetwork</span><span class="token punctuation">(</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>SiameseNetwork<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>cnn1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReflectionPad2d<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Conv2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> kernel_size<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>BatchNorm2d<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span>        <span class="token punctuation">)</span>        self<span class="token punctuation">.</span>fc1 <span class="token operator">=</span> nn<span class="token punctuation">.</span>Sequential<span class="token punctuation">(</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span><span class="token number">100</span><span class="token operator">*</span><span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">500</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>ReLU<span class="token punctuation">(</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">,</span>            nn<span class="token punctuation">.</span>Linear<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">forward_once</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>cnn1<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        output <span class="token operator">=</span> output<span class="token punctuation">.</span>view<span class="token punctuation">(</span>output<span class="token punctuation">.</span>size<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>fc1<span class="token punctuation">(</span>output<span class="token punctuation">)</span>        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input1<span class="token punctuation">,</span> input2<span class="token punctuation">)</span><span class="token punctuation">:</span>        output1 <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_once<span class="token punctuation">(</span>input1<span class="token punctuation">)</span>        output2 <span class="token operator">=</span> self<span class="token punctuation">.</span>forward_once<span class="token punctuation">(</span>input2<span class="token punctuation">)</span>        <span class="token keyword">return</span> output1<span class="token punctuation">,</span> output2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="损失函数-1"><a href="#损失函数-1" class="headerlink" title="损失函数"></a>损失函数</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">ContrastiveLoss</span><span class="token punctuation">(</span>torch<span class="token punctuation">.</span>nn<span class="token punctuation">.</span>Module<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    Contrastive loss function.    Based on: http://yann.lecun.com/exdb/publis/pdf/hadsell-chopra-lecun-06.pdf    """</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> margin<span class="token operator">=</span><span class="token number">2.0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        super<span class="token punctuation">(</span>ContrastiveLoss<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>__init__<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>margin <span class="token operator">=</span> margin    <span class="token keyword">def</span> <span class="token function">forward</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> label<span class="token punctuation">)</span><span class="token punctuation">:</span>        euclidean_distance <span class="token operator">=</span> F<span class="token punctuation">.</span>pairwise_distance<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> output2<span class="token punctuation">,</span> keepdim <span class="token operator">=</span> <span class="token boolean">True</span><span class="token punctuation">)</span>        loss_contrastive <span class="token operator">=</span> torch<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">-</span>label<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>euclidean_distance<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span>                                      <span class="token punctuation">(</span>label<span class="token punctuation">)</span> <span class="token operator">*</span> torch<span class="token punctuation">.</span>pow<span class="token punctuation">(</span>torch<span class="token punctuation">.</span>clamp<span class="token punctuation">(</span>self<span class="token punctuation">.</span>margin <span class="token operator">-</span> euclidean_distance<span class="token punctuation">,</span> min<span class="token operator">=</span><span class="token number">0.0</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> loss_contrastive<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><pre class="line-numbers language-python"><code class="language-python">train_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>siamese_dataset<span class="token punctuation">,</span>                        shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>                        num_workers<span class="token operator">=</span><span class="token number">8</span><span class="token punctuation">,</span>                        batch_size<span class="token operator">=</span>Config<span class="token punctuation">.</span>train_batch_size<span class="token punctuation">)</span>net <span class="token operator">=</span> SiameseNetwork<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>criterion <span class="token operator">=</span> ContrastiveLoss<span class="token punctuation">(</span><span class="token punctuation">)</span>optimizer <span class="token operator">=</span> optim<span class="token punctuation">.</span>Adam<span class="token punctuation">(</span>net<span class="token punctuation">.</span>parameters<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>lr <span class="token operator">=</span> <span class="token number">0.0005</span><span class="token punctuation">)</span>counter <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>loss_history <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span> iteration_number<span class="token operator">=</span> <span class="token number">0</span>base_loss <span class="token operator">=</span> <span class="token number">999</span><span class="token keyword">for</span> epoch <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>Config<span class="token punctuation">.</span>train_number_epochs<span class="token punctuation">)</span><span class="token punctuation">:</span>    net<span class="token punctuation">.</span>train<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> data <span class="token keyword">in</span> enumerate<span class="token punctuation">(</span>train_dataloader<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        img0<span class="token punctuation">,</span> img1 <span class="token punctuation">,</span> label <span class="token operator">=</span> data        img0<span class="token punctuation">,</span> img1 <span class="token punctuation">,</span> label <span class="token operator">=</span> img0<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> img1<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">,</span> label<span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>zero_grad<span class="token punctuation">(</span><span class="token punctuation">)</span>        output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>img0<span class="token punctuation">,</span>img1<span class="token punctuation">)</span>        loss_contrastive <span class="token operator">=</span> criterion<span class="token punctuation">(</span>output1<span class="token punctuation">,</span>output2<span class="token punctuation">,</span>label<span class="token punctuation">)</span>        loss_contrastive<span class="token punctuation">.</span>backward<span class="token punctuation">(</span><span class="token punctuation">)</span>        optimizer<span class="token punctuation">.</span>step<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> i <span class="token operator">%</span> <span class="token number">100</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Epoch number &amp;#123;&amp;#125; Current loss &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>epoch<span class="token punctuation">,</span>loss_contrastive<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            iteration_number <span class="token operator">+=</span><span class="token number">10</span>            counter<span class="token punctuation">.</span>append<span class="token punctuation">(</span>iteration_number<span class="token punctuation">)</span>            loss_history<span class="token punctuation">.</span>append<span class="token punctuation">(</span>loss_contrastive<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> loss_contrastive<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> base_loss<span class="token punctuation">:</span>            torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/content/drive/img_siamese/siamese_model/model/siamese_model.ckpt'</span><span class="token punctuation">,</span>                        _use_new_zipfile_serialization<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 本版本是1.7，在低版本上加载需要_use_new_zipfile_serialization=False</span>            base_loss <span class="token operator">=</span> loss_contrastive<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span>torch<span class="token punctuation">.</span>save<span class="token punctuation">(</span>net<span class="token punctuation">.</span>state_dict<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'/content/drive/img_siamese/siamese_model/model/siamese_model_final.ckpt'</span><span class="token punctuation">,</span>            _use_new_zipfile_serialization<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>show_plot<span class="token punctuation">(</span>counter<span class="token punctuation">,</span>loss_history<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="loss.png" alt="loss"></p><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><pre class="line-numbers language-python"><code class="language-python">folder_dataset_test <span class="token operator">=</span> dset<span class="token punctuation">.</span>ImageFolder<span class="token punctuation">(</span>root<span class="token operator">=</span>Config<span class="token punctuation">.</span>testing_dir<span class="token punctuation">)</span>siamese_dataset <span class="token operator">=</span> SiameseNetworkDataset<span class="token punctuation">(</span>imageFolderDataset<span class="token operator">=</span>folder_dataset_test<span class="token punctuation">,</span>                                        transform<span class="token operator">=</span>transforms<span class="token punctuation">.</span>Compose<span class="token punctuation">(</span><span class="token punctuation">[</span>transforms<span class="token punctuation">.</span>Resize<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">,</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                                                                      transforms<span class="token punctuation">.</span>ToTensor<span class="token punctuation">(</span><span class="token punctuation">)</span>                                                                      <span class="token punctuation">]</span><span class="token punctuation">)</span>                                       <span class="token punctuation">,</span>should_invert<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span>test_dataloader <span class="token operator">=</span> DataLoader<span class="token punctuation">(</span>siamese_dataset<span class="token punctuation">,</span>num_workers<span class="token operator">=</span><span class="token number">6</span><span class="token punctuation">,</span>batch_size<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span>shuffle<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>dataiter <span class="token operator">=</span> iter<span class="token punctuation">(</span>test_dataloader<span class="token punctuation">)</span>x0<span class="token punctuation">,</span>_<span class="token punctuation">,</span>_ <span class="token operator">=</span> next<span class="token punctuation">(</span>dataiter<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span>x1<span class="token punctuation">,</span>label2 <span class="token operator">=</span> next<span class="token punctuation">(</span>dataiter<span class="token punctuation">)</span>    concatenated <span class="token operator">=</span> torch<span class="token punctuation">.</span>cat<span class="token punctuation">(</span><span class="token punctuation">(</span>x0<span class="token punctuation">,</span>x1<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>    output1<span class="token punctuation">,</span>output2 <span class="token operator">=</span> net<span class="token punctuation">(</span>Variable<span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>Variable<span class="token punctuation">(</span>x1<span class="token punctuation">)</span><span class="token punctuation">.</span>cuda<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    euclidean_distance <span class="token operator">=</span> F<span class="token punctuation">.</span>pairwise_distance<span class="token punctuation">(</span>output1<span class="token punctuation">,</span> output2<span class="token punctuation">)</span>    imshow<span class="token punctuation">(</span>torchvision<span class="token punctuation">.</span>utils<span class="token punctuation">.</span>make_grid<span class="token punctuation">(</span>concatenated<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'Dissimilarity: &amp;#123;:.4f&amp;#125;'</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>euclidean_distance<span class="token punctuation">.</span>item<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="testing00.png"></p><p><img src="testing01.png"></p><p><img src="testing02.png"></p><p><img src="testing03.png"></p><p><img src="testing04.png"></p><p><img src="testing05.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>Siamese Network原论文地址 <a href="chrome-extension://ikhdkkncnoglghljlkmcimlnlhkeamad/pdf-viewer/web/viewer.html?file=http%3A%2F%2Fyann.lecun.com%2Fexdb%2Fpublis%2Fpdf%2Fchopra-05.pdf">Learninga SimilarityMetricDiscriminatively, withApplicationtoFaceVerification</a></p><p>Pytorch实现 <a href="https://github.com/harveyslash/Facial-Similarity-with-Siamese-Networks-in-Pytorch">Facial-Similarity-with-Siamese-Networks-in-Pytorch</a></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> SiameseNetwork </tag>
            
            <tag> 相似度 </tag>
            
            <tag> pytorch </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《逆商：我们该如何应对坏事件》</title>
      <link href="2021/02/28/ni-shang-wo-men-gai-ru-he-ying-dui-pi-shi-jian/"/>
      <url>2021/02/28/ni-shang-wo-men-gai-ru-he-ying-dui-pi-shi-jian/</url>
      
        <content type="html"><![CDATA[<p><strong>《逆商：我们该如何应对坏事件》，保罗·史托兹著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>我们似乎对讨论智商和情商习以为常，可当讨论起逆商，感觉却有点神秘。提出一个解决问题的方案就可以看出一个人智商的相对高低，平常不经意的一句话就可以看出一个人情商的相对高低，可一个人做什么才能表达出自己逆商的高低呢，可能很难。逆商有一个前提条件——逆境，在逆境中表现出来的高智商和高情商，都可以认为是逆商的一部分。大家都不怎么讨论逆商，因为很难去定义逆境。</p><p>正是因为逆境很难定义，不同角度看待逆境的结果都不同，这就为在逆境中的不同表现赋予了更多的探索意义，也为如何提高这些表现提供了操作空间。</p><p>保罗•史托兹认为，逆商是由CORE四个维度构成的。CORE是Control（掌控感）、Ownership（担当力）、Reach（影响度）、Endurance（持续性）四个英文单词的首字母缩略词。掌控感有助于促使我们做成那些不太能做成的事情；担当力有助于我们从极具建设性和实用性的角度重新定义责任。限制逆境的影响范围也非常必要，逆境对生活的其他方面造成的影响越深，就越会感到无助和无措。持续性和影响范围有点类似，持续性越强，越难从逆境中走出，让人越无力做出改变。</p><p>在不同逆商的背景下，出现了三种人，分别是攀登者、扎营者和放弃者。这三种人都会遇到逆境，只是他们对待逆境的态度不同，一个是看到困难立马妥协；一个是对抗一会儿在放弃，让自己心安理得；一个人不到黄河心不死。显然我们都知道那种对人生更有价值，保罗•史托兹认为，逆商将是决定这三种人的关键因素。</p><p>要提高自己的逆商，保罗•史托兹认为需要做到四点，倾听自己的逆境反应（L），探究自己对结果的担当（E），分析自己能掌控和无法掌控的证据（A），用实际行动来获得对事件的掌控感。作者在书中举例了很多案例来说明这一套组合拳的效果。而且分别从对于个人、帮助他人和对于组织该如何提高逆商。</p><p>本书的观点，提高个人的逆商主要考自我驱动，深层次的认识掌控感、担当力，影响度和持续性。对于帮助他人和非暴力沟通有点相似，作为一个向导去和当事人沟通。个人觉得本书在提高组织逆商上有很强的工具价值，分别列出了毁坏组织逆商的22种方法和提升下属工作逆商的44种方法，像工具一样躺着那里，对于不同的组织，不能保证每一天都管用，但绝对开卷有益。 </p><hr><p>◆ 第1章 人生就是在攀越一个又一个逆境</p><p>如果用三维的认知地图来看，智商是长，情商是宽，逆商是高。智商和情商绘制了地图等轮廓，不影响从一个地方到另一个地方，但是绘制的结果却不足以表现真实，当逆商绘制出沟壑纵横，看起来才是真实的世界。</p><blockquote><p>有些人拥有高智商，情商也不错，却仍然无法发挥出其潜能。智商和情商似乎都无法决定成败。尽管如此，两者也都在某种程度上发挥着应有的作用，但依然还是引出以下这个问题：为何在同等聪明且适应力强的人中，有些人能坚持到底，有些人却停滞不前，甚至有些人直接放弃？</p></blockquote><hr><p>生活中不乏三类人，放弃者，扎营者，攀登者。放弃者不起进取，扎营者安于现状，只有攀登者能领略人生的真谛，不过这三类人至少有一个共同点，他们都知道需要攀登的目标，不同的是有的在山脚放弃，有的在半山腰放弃，有的到山顶才结束。除了这三类人，其实生活中有很大部分是压根不知道需要攀登的目标在哪里，这类迷茫者可能在错误的道路上坚持了很久，却一样碌碌无为。而且，攀登的道路正确与否都有幸存者偏差，就像爱迪生发明了电灯，我们认为他是攀登者，可是如果他最终也没能成功，我能还愿意认为他是攀登者吗，虽然他一生都在攀登，我们却可能会认为他之是一个扎营者。就像爱迪生一直不看好交流电，他认为交流电非常危险，从这个角度看，爱迪生就是一个交流电上的放弃者。</p><blockquote><p>分析一下在登山过程中遇到的三类人。这三类人对于攀登会有截然不同的反应，因此他们在生活中享受到的成功和喜悦的程度也不同。我们很容易在组织中、在交往对象中、在高中同学聚会上、在孩子的学校里、在新闻里——在各行各业里辨识这些人。</p></blockquote><hr><p>不要轻易的为任何人打标签，高低智商，高低情商，高低逆商，都可能只在一定时间段内适用。就逆商而言，我们显然会认为低逆商的放弃者，他们都应该处于社会的底层，可惜不是，他们存在于社会的很多组织中，比如学校、政府部门、企事业单位。所以即使是放弃者，他们曾经或者未来都有可能是一个攀登者，不妄下断言，既是尊重对方，也是给自己留后路。</p><blockquote><p>请注意：放弃者并非总是处在社会底层，喝着凌晨时分在街角的便利店购买的廉价酒。在社会中大多数地方，如学校、组织、家庭、街头，都能看到他们的身影。</p></blockquote><hr><p>攀登者毫无疑问可以获得更大的成功，但是我们真的有必要一味的追求，不权衡利弊吗？如果你为了实现A必须放弃B，真的有必要一直坚持吗？在A上可能是个攀登者，在B上难道不是一个放弃者吗？在不断内卷的当下，我们为了一个项目可能加班到深夜，放弃的是自己的健康，为了工作上可以高人一等，却忘记和家人静静的吃顿晚饭。我很尊重攀登珠峰的勇气，如果哪天珠峰上也安装了电梯，我可能也会上去看看。</p><blockquote><p>扎营者可能经历了很多逆境才爬到所在的位置。遗憾的是，逆境最终让扎营者开始权衡风险和奖赏，于是不再继续攀登。与放弃者一样，扎营者对于逆境的接受度也是有限的，会为自己找强大的理由来放弃攀登。</p></blockquote><hr><p>◆ 第2章 我们身处逆境时代</p><p>当携带武器和社会暴力成为像嚼口香糖一样寻常，制止暴力反而会成为笑话，有点讽刺。</p><blockquote><p>在1950年时，当你打开一份报纸，看到上面写着目前有20%的高中生会携带武器去学校！你会做何反应？最有可能的情况就是你会感到惊讶和害怕。你会跳起来，冲着身旁的人大喊：“快打电话给国民警卫队！”或者试想一下，要是现在有个老师在学校董事会议上站起来说：“我要汇报一个极其严重的问题，我们必须立刻解决。我的班上有孩子嚼口香糖！”那么众人会做何反应。人们会笑死！</p></blockquote><hr><p>科技让我们的生活更加便捷、高效，我们可能会觉得科技为我们所用，可仔细想一想，我们现在离开手机、离开电脑，离开汽车动力，离开智能家电，还能更好的生活吗，说不上我们成为了“智能”芯片的奴隶，不过的确已经离不开了。</p><blockquote><p>我们已经将自己对于生活中很多事情的控制权移交给千篇一律配备“智能”芯片的机器。对很多人来说，权力不在他们自己的手中，而在科技手上。结果就是无助感加剧，行动力减退。</p></blockquote><hr><p>一只对淌沼泽、爬峭壁这种高强度的拓展训练持怀疑态度，很多所谓的以培养协作意识、培养坚韧品质的拓展项目不过是领导或相关人力资源负责人的自我感动。整个过程下来，最大的收获可能是认识了更多的工作伙伴，而那些所谓的有目的的训练不过是一时鸡血。</p><blockquote><p>拓展训练等领导力和自我发展项目的有效性。这些项目让人去淌沼泽、爬峭壁，并且带上最少量的补给独自生存，项目结束时群情激昂。这种激昂状态叫做后群体兴奋（Post-Group Euphoria）。虽然拓展训练之类的项目有个很重要的作用，那就是让人们经历难关并挑战极限，但我发现，鸡血以及随之而来的大量改变生活的动力很快就消亡了。</p></blockquote><hr><p>◆ 第3章 构成逆商的三大支柱</p><p>很多成功学和心灵鸡蛋都说失败是成功之母，不过在习得性无助面前，大量的失败并不会带来成功，只会让做什么都没用的想法内化，消弱一个人的掌控感和行动力。能从大量的失败中在成功，有运气的成分，也有逆商的成分。如果一个人在述说自己以前多么失败，现在多么成功，那么他除了想被膜拜现在的成功外，可能还想被赞赏一下逆商。</p><blockquote><p>塞利格曼等人发现，这些狗学会了无助，这一行为几乎摧毁了它们采取行动的干劲。此后，科学家还发现，猫、鱼、狗、大鼠、蟑螂、小鼠和人类都能学到这一特性。习得性无助就是将“做什么都没有用”这一想法内化，从而削弱一个人的掌控感。</p></blockquote><hr><p>人们总是容易相信一个相对丰满的描述，21天养成一个习惯，为什么不是20天，为什么不是22天，习惯是逐步养成的，和20，21，22其实并没有必然关系，这不过是所谓的专家们让自己的“研究”更有可信度的包装，并且形成了不成文的规则，如果说成28天养成一个习惯也未尝不可。</p><blockquote><p>多年来，我在数百场讲座中听到十几个“专家”站在众人面前声称“养成一种习惯需要21天” “21天后你肯定能养成这个习惯”。于是我联系这些“专家”，对他们说我对此感兴趣，想要了解更多。我问他们这个21天创奇迹的出处是哪里，他们通常就会说：“把你的名片给我，我了解清楚后会给你打电话。”不用说，我从未接到过他们的电话。实际上，就连我打给他们的时候，也没人给出那个问题的可靠出处。</p></blockquote><hr><p>◆ 第4章 逆商和攀越逆境的能力</p><p>逆商是由CORE四个维度构成的。CORE是Control（掌控感）、Ownership（担当力）、Reach（影响度）、Endurance（持续性）四个英文单词的首字母缩略词。掌控感有助于促使我们做成那些不太能做成的事情；担当力有助于我们从极具建设性和实用性的角度重新定义责任。限制逆境的影响范围也非常必要，逆境对生活的其他方面造成的影响越深，就越会感到无助和无措。持续性和影响范围有点类似，持续性越强，越难从逆境中走出，让人约无力做出改变。</p><blockquote><p>逆商是由CORE四个维度构成的。CORE是Control（掌控感）、Ownership（担当力）、Reach（影响度）、Endurance（持续性）四个英文单词的首字母缩略词，</p></blockquote><hr><p>◆ 第5章 提高你的逆商和攀登能力的LEAD工具</p><p>LEDA本质是让我们理性的行动起来。Listen是认识现状，Explore是寻找解决方案，Analyze是对解决方案做实证研究，最后Do it。解决问题总是想不行，盲目的做也不行，有组织有计划的行动是个不错的选择。</p><blockquote><p>L= Listen，倾听自己的逆境反应：</p><p>这是高逆商反应还是低逆商反应？</p><p>在哪个维度得分最高或最低？</p><p>E= Explore，探究自己对结果的担当：</p><p> 我应该对结果的哪些部分担起责任？</p><p>我不应该对哪些部分担责？</p><p>A= Analyze，分析证据：</p><p>有什么证据可以表明我无法掌控？</p><p>有什么证据可以表明此次困境一定会蔓延到生活的其他方面？</p><p>有什么证据可以表明此次困境必然会持续过长时间。</p><p>D= Do，做点事情：</p><p>我还需要什么信息？</p><p>我可以做什么来获得对形势的一点点掌控感？</p><p>我可以做什么来限制困境的影响范围？</p><p>我可以做什么来限制当前困境的持续时间？</p></blockquote><hr><p>这个方法太有创意了，每次发现生活中的潜在逆境，就大喊一声“逆境”，或者把这个事件记录下来，就可以获得一美元。这可以帮助我们避免逆境的全力攻击，而且，一天下来，重新梳理今天遇到的“逆境”，会发现其实真正的逆境并没有那么多，很多不过是我们自己给自己加戏而已。</p><blockquote><p>要是我对你说，每次你发现生活中的潜在逆境并大喊一声“逆境！”，我就会给你一万美元，你会怎么做？你应对逆境的方式忽然就变得像一场游戏。你不会等着逆境的全力攻击，而会积极地环视四周，寻找逆境的端倪，准备着要兑现奖金。</p></blockquote><hr><p>担当是在遇到逆境时采取行动的原动力，走出逆境最好的方法就是解决它，掌控力是从更高的维度俯视它，让它可被解决，担当是由内而外激发行动的能力，影响度和持续性是也表示着走出逆境的速度。</p><blockquote><p>担当力</p></blockquote><p>你可能还记得担当力讲的是诚实并有建设性地探究自己应该对事情的哪些部分负责。担当力指的是即使逆境并非因你而起，你也有责任做点什么。担当并不意味着过分自责。简而言之，就是要担责解决问题或采取行动。</p><hr><p>◆ 第6章 停止灾难化</p><p>人们总是喜欢为结果找理由，不管是好结果还是坏结果，只要心中冒出这个结果，就会疯狂佐证，直到越陷越深，开始相信那个不相关的事物与结果有因果关系。</p><blockquote><p>你马上就开始将事件灾难化：“啊，不好！但愿没出事。要是她出了车祸，或是更加惨呢……”然后你就开始了。你拿起电话旁的胶带座，开始认真研究，想找出某个明显的细节。你看到了胶带的牌子、滚轴的尺寸、胶带座的产地，还发现底部缺了一条橡胶缓冲带。</p></blockquote><hr><p>谦卑，对万事万物怀有一颗敬畏之心，持有一份包容情怀，不管是诸事不顺还是人生得意，扩大自己的视界来更理性的认识世界，让更多的行动来阻止自己胡思乱想。</p><blockquote><p>当我们看到别人的不幸时，就能以更加谦卑的视角看待自己的不幸。做好事不仅能打断你的胡思乱想，还能对生理和心理产生一系列积极的影响，从而提振你的精神并增强免疫抗逆性。</p></blockquote><hr><p>◆ 第7章 提高他人的逆商和攀登能力</p><p>非暴力沟通的精髓之一，一个人遇到问题后的答案总是自己找到的，面对对方的困难，如果只是做一个只会倾听的情感共鸣机器，能让对方发泄情绪，但发泄完最终可能也没有解决问题，如果是做一个侃侃而谈的说教者，或许会让事情变得更糟，只有做一个向导，先真心的倾听，然后给对方提供一些不一样的看问题的角度，让对方解决问题具有更多的可能性，这才是沟通大师。</p><blockquote><p>要提问，不要说教</p><p>如果你拥有一个很强大的新技能或新信息，知道可以借此帮助你所关心的人，那么你会如何让他知道呢？假如你知道，为了帮助他，他需要先对此理解透彻，你会怎么做呢？你会直接就让他坐下来听你说，还是先做个示范，然后让他自己去试试？</p></blockquote><hr><p>以前一直对倾听持有一定的保留意见，直到看到这句话，让我对倾听有了新的认识。对于高逆商的人，他们会把倾听着作为共鸣板，利用对方的真知灼见来优化自己的行动策略。而对于低逆商的人，他们只会暂时借用倾听者的体力和精力来支撑自己，如果对方逆商也不够，或许会让两人都陷入灾难化的绝望之中，一旦双方精力用尽，情况会变得更糟。要成为高逆商的人，除了倾听，还要学会探究、分析和行动。</p><blockquote><p>倾听带来的好处会受限于逆商的高低。逆商高的人会把倾听者当作共鸣板，让对方把心中的一些事情吐露出来；同时，利用对方的真知灼见来优化自己的行动策略。</p><p>然而，逆商较低的人则倾向于借用倾听者的体力和精力来暂时支撑自己。或者他们会把倾听者拉入需求和绝望的循环之中，或者通过自我表露来强化自我价值感和无能为力的感觉。这个循环的产生是源于他们无法维持倾听者所带来的乐观精神和力量。这就很像把水倒进筛子里。久而久之，倾听者会觉得筋疲力尽或没有成效，而低逆商者则觉得越来越无望、心生依赖、没有动力。他们会因无法独立而日渐软弱。</p></blockquote><hr><p>◆ 第8章 高逆商组织：打造攀登者文化</p><p>摧毁阻止逆商的22种方法:</p><p>1.承诺多，兑现少</p><p>2.反复无常</p><p>3.记住：万事都有不足之处</p><p>4.展现受害者心态</p><p>5.躲避外部射来的子弹</p><p>6.只是口头支持担当和责任感</p><p>7.对所有可能有助于团队成功的事情视而不见</p><p>8.让团队看到打击他们自信的事情——重大失败</p><p>9.把成功描述成偶然事件</p><p>10.不惜一切代价地破坏幽默感</p><p>11.耗尽他们的精力</p><p>12.碾碎创造力</p><p>13.迅速严惩所有的独立尝试</p><p>14.摧毁任何的希望或乐观</p><p>15.让扎营者围绕在攀登者身边</p><p>16.故意让团队遭遇失败</p><p>17.奖励守规矩的人</p><p>18.营造一个严格、死板、无趣的环境</p><p>19.在热情萌芽之前就将之根除</p><p>20.逼着大家构想出使命和愿景，然后你通通忘掉</p><p>21.让员工有责无权</p><p>22.用“赋能”这个武器来让员工少花钱多办事</p><blockquote><p>哪些有意和无意的因素可以阻碍或阻止一个人提高工作中的逆商呢？领导者要想构建攀登者文化，需要避免哪些问题呢？领导者做什么会让攀登开展不起来呢？你可能有自己的答案，而我找出了以下22个答案。</p></blockquote><hr><p>提升下属工作逆商的44种方法，像工具一样躺着这里，不敢保证都对，但绝对开卷有益。</p><p>一、目标——我们为何在此</p><p>1.明确攀登的山峰</p><p>2.始终清楚地表达一个令人振奋、鼓舞人心、乐观向上的愿景</p><p>3.将所有系统与山峰保持一致</p><p>4.创建攀登者文化，让团队的山峰与组织的山峰保持一致</p><p>5.让个人目标与组织目标保持一致</p><p>6.让成功成为一段旅程而不是一枚药片</p><p>二、价值观——强化与逆商相关的价值观</p><p>7.只承诺你能够兑现的，然后兑现它</p><p>8.将毅力、韧性和持续进步纳入核心价值观</p><p>9.始终展现出驱动你的价值观</p><p>10.通过信任、沟通和真正的承诺来赋能团队</p><p>三、文化氛围——创建一个能够培养高逆商的环境</p><p>11.经常增添幽默，从而保持洞察力和健康</p><p>12.奖励那些平衡得好的人，并将其树立为榜样</p><p>13.培养创造力</p><p>14.指出并支持协同合作的时刻</p><p>15.营造并保持一种开放、有活力、协调促进的环境</p><p>16.抢抓一切机会来培养热情</p><p>17.遵循自证预言行事</p><p>18.为攀登提供支持</p><p>四、团队——找到并发展攀登者</p><p>19.招募并打造一支高逆商的攀登团队</p><p>20.找到并提供完成工作所需要的资源</p><p>21.展现并阐明每个团队成员对于整体的重要性</p><p>22.让团队成员认清和培养自己的强项，并尽力减少弱项的负面影响</p><p>23.允许人们践行自己的想法，但前提是不威胁到他人的生存</p><p>24.总是请大家参与和投入</p><p>25.培养并颂扬主人翁精神</p><p>五、沟通语言——强化逆商的意义</p><p>26.颂扬过往那些从困境中转化而来的成功</p><p>27.认可为攀登所做的重大而真诚的贡献</p><p>28.打造高逆商传奇</p><p>29.找到并颂扬高逆商的成功故事</p><p>30.使用攀登的语言</p><p>31.证明不可能的事情并非不可能</p><p>六、教练团队拥有高逆商</p><p>32.助力员工去打自己的仗</p><p>33.建立起真正的担当和责任</p><p>34.要求人们适当冒险，并对此进行奖励，就算最后惨败也无妨</p><p>35.对团队给予奖励，因他们创造的成绩而不是他们的守规矩</p><p>36.隔开逆境</p><p>37.提高标准，从而让团队快速成长</p><p>38.问问团队“你们成功路上的最大障碍是什么”，然后帮助他们扫清这些障碍</p><p>39.让人们明白“不问就没有”的道理</p><p>40.做到对事不对人</p><p>41.没有受害者，只有志愿者</p><p>42.利用LEAD工具来提高逆商</p><p>43.运用止念法来消除灾难化这个选项</p><p>44.定义、衡量、讨论和培养逆商</p><blockquote><p>提升下属逆商的44种方法</p><p>想一想你要怎么做才能在组织中培养出高逆商行为和高逆商文化，并且在这个过程中充分释放员工的潜能，让他们能够践行组织的使命。以下罗列的这些建议将分为几个类别：目标、价值观、文化氛围、团队、沟通语言和教练。</p></blockquote><hr><p>◆ 第9章 攀登者的底色</p><p>能力水平的五个阶段。</p><p>第一阶段：不知道自己不知道</p><p>第二阶段：知道自己不知道</p><p>第三阶段：知道自己知道</p><p>第四阶段：不知道自己知道</p><p>第五阶段：不知道自己特别在行</p><p>大多数人停留在了第二阶段和第三阶段，可能还会纠结自己知不知道，而且还浪费大量的时候去思考自己应不应该知道，比如学习某一个技能，看某一本书，一直在思考，却从来不行动，然后看起来是一个有理想的攀登者，却毫无疑问是一个扎营者。</p><blockquote><p>学习一项新技能：豪威尔的能力水平五阶段</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 攀登者 </tag>
            
            <tag> 逆商 </tag>
            
            <tag> 保罗·史托兹 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>文字点选验证码识别-darknet</title>
      <link href="2021/02/27/wen-zi-dian-xuan-yan-zheng-ma-shi-bie-darknet/"/>
      <url>2021/02/27/wen-zi-dian-xuan-yan-zheng-ma-shi-bie-darknet/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>（**本文代码已放在 <a href="https://github.com/booleqin/darknet_click_captcha">github</a>**）</p><p>点选验证大概形式如下</p><p><img src="captcha.png" alt="captcha"></p><p>整个验证形式包含两部分，白底图片中展示需要点击的文字，彩色图片中需要识别并人为点击的文字。</p><p>对于白底图片的文字，识别是简单的，通过百度通用OCR识别技术（每日可免费调用50000次）已经可以达到非常高的识别率。或者通过cnocr也能达到不错的识别率，但是对于彩底图片中的文字，百度通用OCR识别与cnocr识别的结果均不理性，初步测试能识别的文字仅有30%+。</p><p>本文使用使用darknet进行文字点选验证码识别，<a href="https://pjreddie.com/darknet/">darknet</a> 是一个基于YOLO算法的神经网络框架。</p><p><img src="darknet.png" alt="darknet"></p><p>计算环境，使用google colab，NVIDIA Tesla V100。</p><h2 id="识别思路"><a href="#识别思路" class="headerlink" title="识别思路"></a>识别思路</h2><ol><li>安装必要的环境<ol><li>darknet，用于使用YOLO进行目标检测和分类，安装过程很方便，wget相应package即可</li><li>labelImg，用户标注文字所在位置</li></ol></li><li>目标定位<ol><li>文字标注，点选验证码涉及两个文本，一个是白底图片中的文字，一个是彩底图片中的文字</li><li>训练，需要训练两个模型，分别是白底图片中的文字和彩底图片中的文字</li><li>预测，对目标文字所在位置进行预测，并批量化生成进行目标分类</li></ol></li><li>图片相似度匹配，正常情况下应该是对定位后的目标进行文字分类，不过先进行图片相似度匹配至少有如下特点<ol><li>不需要大量的标记工作，可直接匹配</li><li>比较灵活，如果后续验证形式不再是文字，变成表情、特定图片，通过图片相似度匹配也可以适应</li><li>缺点是匹配度可能不够高</li></ol></li><li>文字分类，文字分类需要大量的文字标记，初步预估标记的文字数量需要20万+，解决方案可以有<ol><li>先使用百度OCR或cnocr识别，人工复核，然后再对无法识别的文字进行人工标注</li><li>对已经标注的文字图片做数据增强，增加旋转、缩放、移位等。</li><li>先训练识别一部分，再对余下部分进行预测，对预测错误的进行部分标注，再训练模型，再预测</li></ol></li></ol><h2 id="darknet安装"><a href="#darknet安装" class="headerlink" title="darknet安装"></a>darknet安装</h2><pre class="line-numbers language-shell"><code class="language-shell">wget https://github.com/pjreddie/darknet/archive/master.zipunzip master.zip > unzip_log 2>&1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>修改编译文件</p><pre class="line-numbers language-shell"><code class="language-shell">vim darknet-master/MakefileOPENCV=1GPU=1CUDNN=1# 如果是在colab上，可以在命令行修改# %cd darknet-master# !sed -i 's/OPENCV=0/OPENCV=1/' Makefile# !sed -i 's/GPU=0/GPU=1/' Makefile# !sed -i 's/CUDNN=0/CUDNN=1/' Makefile<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>编译</p><pre class="line-numbers language-shell"><code class="language-shell">make<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果</p><h2 id="labelImg配置与使用"><a href="#labelImg配置与使用" class="headerlink" title="labelImg配置与使用"></a>labelImg配置与使用</h2><h3 id="labelImg"><a href="#labelImg" class="headerlink" title="labelImg"></a>labelImg</h3><p>使用labelImg标注文本所在位置。</p><h3 id="python环境"><a href="#python环境" class="headerlink" title="python环境"></a>python环境</h3><p>需要python3环境，推荐使用anaconda  <a href="https://www.anaconda.com/products/individual#Downloads">下载 anaconda</a> 推荐选择Graphical install（图形化安装界面）</p><h3 id="labelIng依赖"><a href="#labelIng依赖" class="headerlink" title="labelIng依赖"></a>labelIng依赖</h3><p>labelIng依赖pyqt5 lxml，可以只用anaconda 的pip安装</p><p>如果anaconda的python如果已经配置到环境变量中，可以直接直接使用pip install，如果没有配置到环境变量中，可以使用使用类似 /Users/xxx/opt/anaconda3/bin/python -m pip install</p><pre class="line-numbers language-shell"><code class="language-shell">pip install pyqt5 lxml# 如果上面的安装命令很慢，可以使用如下命令指定国内镜像安装pip install pyqt5 lxml -i https://pypi.tuna.tsinghua.edu.cn/simple# 然后编译运行make qt5py3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="启用标注工具"><a href="#启用标注工具" class="headerlink" title="启用标注工具"></a>启用标注工具</h3><pre class="line-numbers language-shell"><code class="language-shell">git clone git@github.com:tzutalin/labelImg.git# 由于labelImg会有默认类别，所以需要重新新建一个空文件cd /labelImg-master/data/mv predefined_classes.txt predefined_classes.txt.baktouch predefined_classes.txt# 回到labelImg原目录cd /labelImg-master/Users/xxx/opt/anaconda3/bin/python labelImg.py  # 如果在环境变量中可以直接用python labelImg.py<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="简单配置"><a href="#简单配置" class="headerlink" title="简单配置"></a>简单配置</h3><p>在命令行运行上述命令后（不要关闭），会自动打开一个页面</p><p>主要需要配置3个地方</p><p>1.【使用预设标签】 填 word</p><p>2.【打开目录】配置需要标注的文件所在目录</p><p>3.【更改存放目录】 也配置为需要标注的文件所在目录</p><p>3.标注类型改为yolo</p><p>修改后如下：</p><p><img src="labeling.png" alt="labelimg"></p><h3 id="开始标注"><a href="#开始标注" class="headerlink" title="开始标注"></a>开始标注</h3><p>创建区块（mac快捷键 w），选出一个框，【正好把文字框住】，点击保存 -&gt; 下一个图片 即可，在源目录下就会出现新增一个txt文件。如下。</p><p><img src="labelimg_img.png" alt="labelimg_img"></p><p>txt文件中包含5列数据</p><ul><li>第1列，是class数据-这里是word，在同目录的 classes.txt 中对应位置</li><li>第2列，位置的中心x坐标</li><li>第3列，位置的中心y坐标</li><li>第4列，相对宽度w</li><li>第5列，相对高度h</li></ul><pre class="line-numbers language-shell"><code class="language-shell">0 0.217391 0.247093 0.166667 0.2965120 0.251812 0.616279 0.134058 0.2441860 0.639493 0.572674 0.213768 0.331395<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="目标定位"><a href="#目标定位" class="headerlink" title="目标定位"></a>目标定位</h2><h3 id="训练"><a href="#训练" class="headerlink" title="训练"></a>训练</h3><h4 id="训练文件预处理"><a href="#训练文件预处理" class="headerlink" title="训练文件预处理"></a>训练文件预处理</h4><p>分别创建train和test文件目录（名称不用必须是train和test，在后面配置中指定即可），然后将标记好的数据按比例（一般8:2）分配到目录中，制作训练测试数据</p><pre class="line-numbers language-shell"><code class="language-shell">find `pwd`/train -name \*.jpg > train.listfind `pwd`/test -name \*.jpg > test.list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h4 id="模型配置文件"><a href="#模型配置文件" class="headerlink" title="模型配置文件"></a>模型配置文件</h4><p>模型配置文件用于配置YOLO到模型结构，这里使用yolov3-tiny.cfg中的结构，重命名为word.cfg，主要需要修改如下几个地方，其他地方酌情修改。</p><pre class="line-numbers language-shell"><code class="language-shell">filters=18# 值为3*(classes + 5)classes=1 #数据集类别（定位器只有1类）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="标签文件"><a href="#标签文件" class="headerlink" title="标签文件"></a>标签文件</h4><p>标签文件为word.labels，即labelImg标记目录下的 classes.txt 文件。</p><h4 id="数据集配置"><a href="#数据集配置" class="headerlink" title="数据集配置"></a>数据集配置</h4><p>数据集配置文件 word.data ，如下（backup是一个空目录，用于存放训练后的模型）：</p><pre class="line-numbers language-shell"><code class="language-shell">classes=1train=/Users/xxx/img_colour/train.listvalid=/Users/xxx/img_colour/test.listlabels=/Users/xxx/img_colour/word.labelsbackup=/Users/xxx/img_colour/backuptop=5<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="模型训练"><a href="#模型训练" class="headerlink" title="模型训练"></a>模型训练</h4><pre class="line-numbers language-shell"><code class="language-shell">./darknet detector train /Users/xxx/img_colour/word.data /Users/xxx/img_colour/word.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打印出来的日志如下</p><p><img src="detector_train_log.png" alt="detector_train_log"></p><p>相关指标解释</p><pre class="line-numbers language-shell"><code class="language-shell">Avg IOU：表示当前subdivision 内图片的评价IOU数字越大表明 精度越高Class：标注物体的正确率，约接近1越好Obj：目标越接近1越好No Obj：越接近0越好.5R：当前模型在所有 subdivision 样本中检测出的正样本与实际正样本的比值count：所有当前 subdivision 图片中包含正样本标签数量9998：当前迭代次数0.076459：总体损失0.106345 avg：平均损失0.001000 rate：当前学习率0.507720 seconds：当前批次花费时间319936 images：参与训练的图片总数（按batch size会有重复）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>训练结束后，模型会保存在backup目录下。</p><h3 id="预测"><a href="#预测" class="headerlink" title="预测"></a>预测</h3><p>预测可直接使用 ./darknet detect 命令（预测时word.cfg 中需要使用Testing模式，batch=1，subdivisions=1）</p><pre class="line-numbers language-shell"><code class="language-shell">./darknet detect /Users/xxx/img_colour/word.cfg /Users/xxx/img_colour/backup/word_final.weights /Users/xxx/img_colour/test/0a89c15c48_1.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用python封装的文件，核心代码如下。（github tool/detect_obj.py）</p><pre class="line-numbers language-python"><code class="language-python">net <span class="token operator">=</span> load_net<span class="token punctuation">(</span>    b<span class="token string">"/Users/xxx/img_colour/word.cfg"</span><span class="token punctuation">,</span>     b<span class="token string">"/Users/xxx/img_colour/backup/word_final.weights"</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>meta <span class="token operator">=</span> load_meta<span class="token punctuation">(</span>    b<span class="token string">"/Users/xxx/word.meta"</span><span class="token punctuation">)</span>r <span class="token operator">=</span> detect<span class="token punctuation">(</span>net<span class="token punctuation">,</span> meta<span class="token punctuation">,</span> b<span class="token string">"/Users/xxx/img_colour/test/0a89c15c48_1.jpg"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>预测结果如下</p><p><img src="detect_test.png" alt="detect_test"></p><p>对于白底图片文字和彩底图片文字的目标定位方法一样，不赘述。</p><h2 id="图片相似度匹配"><a href="#图片相似度匹配" class="headerlink" title="图片相似度匹配"></a>图片相似度匹配</h2><p>在测试过程中采用了很多图片相似度匹配方法，但是效果均不佳，推测主要原因是彩底图片上的文字在背景、粗细、角度等方面均有较大差异，所以匹配效果不好。如果考虑通过孪生网络识别图片相似性，可能有效，暂不谈。</p><h2 id="文字分类"><a href="#文字分类" class="headerlink" title="文字分类"></a>文字分类</h2><h3 id="切割目标文字"><a href="#切割目标文字" class="headerlink" title="切割目标文字"></a>切割目标文字</h3><p>切割目标文字的核心代码如下（github tool/detect_cuting.py）</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 随机字符串</span>complex_str <span class="token operator">=</span> <span class="token string">"sagbjlagdjvwifqwasdvxjkwfadvnwfkegasaodqwgqg"</span><span class="token keyword">def</span> <span class="token function">detect_cut</span><span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> cut_dir<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    识别定位框    """</span>    filelist <span class="token operator">=</span>  os<span class="token punctuation">.</span>listdir<span class="token punctuation">(</span>img_dir<span class="token punctuation">)</span>    <span class="token keyword">for</span> filename <span class="token keyword">in</span> filelist<span class="token punctuation">:</span>        img_path <span class="token operator">=</span> os<span class="token punctuation">.</span>path<span class="token punctuation">.</span>join<span class="token punctuation">(</span>img_dir<span class="token punctuation">,</span> filename<span class="token punctuation">)</span>        ret <span class="token operator">=</span> get_detect_ret<span class="token punctuation">(</span>img_path<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span>img_path<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># img = Image.open(img_path)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> ret<span class="token punctuation">:</span>            x_min<span class="token punctuation">,</span> x_max <span class="token operator">=</span> int<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            y_min<span class="token punctuation">,</span> y_max <span class="token operator">=</span> int<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> int<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">)</span>            cut_img <span class="token operator">=</span> img<span class="token punctuation">[</span>y_min<span class="token punctuation">:</span>y_max<span class="token punctuation">,</span> x_min<span class="token punctuation">:</span>x_max<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 生成随机加密串</span>            string_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                string_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>choice<span class="token punctuation">(</span>complex_str<span class="token punctuation">)</span><span class="token punctuation">)</span>            rstr <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>string_list<span class="token punctuation">)</span>            hl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>            cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>cut_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> cut_img<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 内存释放</span>            <span class="token keyword">del</span> cut_img            gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">del</span> img        gc<span class="token punctuation">.</span>collect<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>切割完成后进行标记，可以使用百度OCR和开源库CnOcr进行识别，不过这两者对于白底文字识别效果很好，对彩底文字识别效果并不佳。</p><h3 id="训练数据准备"><a href="#训练数据准备" class="headerlink" title="训练数据准备"></a>训练数据准备</h3><p>所以可以使用半监督+数据增强的方法进行训练，标记一部分，训练模型，再预测，再标记训练，循环进行，亲测，该方法更加有效。</p><p>数据增强，本次采用了5中数据增强方法，分别是灰度图、左旋、右旋、高斯噪声和emboss算子。</p><p>核心代码如下（github toole/data_augmentation.py）,更多图片处理方法可参考 <a href="http://booleflow.com/2020/10/31/cv2-tu-xiang-chu-li/">CV2图像处理</a>：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 灰度图</span>obj_gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_RGB2GRAY<span class="token punctuation">)</span>rstr <span class="token operator">=</span> f_name<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">"_"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>hl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>obj_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> obj_gray<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 旋转15度</span>image_rotated1 <span class="token operator">=</span> rotate_image<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>rstr <span class="token operator">=</span> new_strhl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>obj_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> image_rotated1<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 旋转-15度</span>image_rotated2 <span class="token operator">=</span> rotate_image<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">345</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">)</span>rstr <span class="token operator">=</span> new_strhl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>obj_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> image_rotated2<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 高斯噪声</span>image_gasuss <span class="token operator">=</span> gasuss_noise<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>rstr <span class="token operator">=</span> new_strhl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>obj_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> image_gasuss<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># emboss算子</span>image_emboss <span class="token operator">=</span> cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel_emboss<span class="token punctuation">)</span>rstr <span class="token operator">=</span> new_strhl <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>hl<span class="token punctuation">.</span>update<span class="token punctuation">(</span>rstr<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>new_str <span class="token operator">=</span> hl<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>cv2<span class="token punctuation">.</span>imwrite<span class="token punctuation">(</span>obj_dir <span class="token operator">+</span> <span class="token string">"/"</span> <span class="token operator">+</span> c <span class="token operator">+</span> <span class="token string">"_"</span> <span class="token operator">+</span> new_str <span class="token operator">+</span> <span class="token string">".jpg"</span><span class="token punctuation">,</span> image_emboss<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="文字分类模型训练"><a href="#文字分类模型训练" class="headerlink" title="文字分类模型训练"></a>文字分类模型训练</h3><p>训练方式与目标定位的训练方式类似，准备class.data 和 class.cfg 文件，这里cfg参考darknet19.cfg，重命名为class.cfg，主要作如下修改</p><p>由于时间关系，只标记类2313类。</p><pre class="line-numbers language-shell"><code class="language-shell">filters=4313  # 总共有多少类<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>训练</p><pre class="line-numbers language-shell"><code class="language-shell">./darknet classifier train /Users//xxx/classifier/class.data /Users//xxx/classifier/class.cfg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="预测-1"><a href="#预测-1" class="headerlink" title="预测"></a>预测</h3><p>和目标框定位的预测方法类似，只是使用的是classifier（预测时class.cfg 中需要使用Testing模式，batch=1，subdivisions=1）</p><pre class="line-numbers language-shell"><code class="language-shell">./darknet classifier predict /Users/xxx/classifier/class.data /Users/xxx/class.cfg /Users/xxx/classifier/backup/class.weights /Users/xxx/test/030a19f4ca982e877519ea179db37c29.jpg<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以使用python封装的结果（见github tool/classifier_pre.py）。</p><h2 id="预测服务部署"><a href="#预测服务部署" class="headerlink" title="预测服务部署"></a>预测服务部署</h2><p>完成的预测服务见github。</p><pre class="line-numbers language-shell"><code class="language-shell">curl -H "Content-type: application/json" -X POST http://host:port/captcha/distinguish -d '&#123;"model": "classifier", "basefile": "xxx", "objfile": "xxx"&#125;'<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="ret.png" alt="预测结果"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> YOLO </tag>
            
            <tag> darknet </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>政府政策干预供需关系</title>
      <link href="2021/02/06/zheng-fu-zheng-ce-gan-yu-gong-xu-guan-xi/"/>
      <url>2021/02/06/zheng-fu-zheng-ce-gan-yu-gong-xu-guan-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="政府政策"><a href="#政府政策" class="headerlink" title="政府政策"></a>政府政策</h2><p>市场本身具有一定的自我调节作用，但是由于<strong>外部性</strong>与<strong>市场势力</strong>的存在，市场有时候也会失灵，此时政府政策就有存在的必要了，政府政策主要的手段有<strong>价格控制</strong>和<strong>税收</strong>。</p><h2 id="价格控制"><a href="#价格控制" class="headerlink" title="价格控制"></a>价格控制</h2><h3 id="价格上下限"><a href="#价格上下限" class="headerlink" title="价格上下限"></a>价格上下限</h3><p>市场上的任何一个买者都希望价格更低，而卖者总是希望价格更高，这两个群体的利益在一定程度上是冲突的，在自由市场上这可能会达到一个相对问题的平衡，但是如果某一方获得了政府的支持，则有可能会出现<strong>价格上限</strong>（不允许价格上升到该价格水平之上）或<strong>价格下限</strong>（不允许价格下降到该价格水平之下）。</p><h3 id="价格上限影响市场结果"><a href="#价格上限影响市场结果" class="headerlink" title="价格上限影响市场结果"></a>价格上限影响市场结果</h3><p>设定了价格上限后，有可能会存在两种结果，分别是<strong>非限制性价格上限约束</strong>和<strong>限制性价格上限约束</strong>。顾名思义，非限制性约束就是限制的价格上限在市场均衡点以上，市场力量会使经济均衡变动，价格上限对市场价格和销售量不影响。相反，限制性约束的价格上限在均衡价格以下，供求力量趋于使价格均衡变动，但当市场价格达到价格上限时，按照政府政策价格就不能再上升了，此时会存在供给量小于需求量的情况，出现物品短缺。如下图所示。</p><p><img src="price_top_limit.png"></p><p>对于冰激凌市场而言，设置价格上限的动机可能是为了帮助冰激凌买者， 但并不是所有买者都能从中获益，的确，较低价格上限让一些买者可以用更低的价格获得冰激凌，但是同样由于价格较低，卖者不愿意生产更多的冰激凌，造成冰激凌短缺，卖者必须在大量买者中配给稀缺物品，导致很多人买者根本买不到冰激凌。</p><p>这种价格上限机制经常都难以取得政策初衷效果，而且这种限制经常会导致排长队等抵效等社会现象。</p><p>相比长期和短期，由于在长期内，商品更容易具有弹性，所以对于短期内没有弹性的商品，价格上限可能只会造成较小的短缺，但是随着时间加长，商品的弹性变强，商品的短缺也会加剧，如短期和长期的租金控制。</p><h3 id="价格下限影响市场结果"><a href="#价格下限影响市场结果" class="headerlink" title="价格下限影响市场结果"></a>价格下限影响市场结果</h3><p>设定了价格下限后，同样会有两种结果，分别是<strong>非限制性价格下限约束</strong>和<strong>限制性价格下限约束</strong>。当价格下限在市场均衡以下时，不影响。当价格下限在在均衡价格以上时候，会导致商品的供给量增加，但是需求量不足，导致商品过剩，如下图所示。</p><p><img src="price_lower_limit.png"></p><p>以最低工资为例，如果设定了最低工资标准，劳动供给量会大于需求量，结果会导致失业。而且实际上，有些年轻人为了获得市场认可，愿意以实习的名义进行工作而降低报酬，而实习不需要受最低工资标准限制，结果是，最低工资对青少年的限制往往比对其他劳动力成员一下影响更大。而且最低工资出现后，很可能影响到还在上高中的青少年会选择退学并参加工作，新退学的挤兑之前退学的，照成更多的失业。</p><h3 id="价格控制的效用"><a href="#价格控制的效用" class="headerlink" title="价格控制的效用"></a>价格控制的效用</h3><p>决策中进行价格控制是因为他们觉得市场是不公平的，价格控制的目标通常是为了保护穷人，但价格控制往往是损害了那些它本想帮助的人，租金控制可以保存低租金，但是无法鼓励修缮租房，并使找房变得困难。最低工资限制会增加一些工人的收入，但是也染其他人成为了失业者。</p><p>除了简单粗暴的价格控制，通常还采用来帮助穷人的方法有补贴。比如住房补贴和工资补贴。比如劳动收入的税收减免就属于工资补贴的一部分。下面就来看看税收。</p><h2 id="税收"><a href="#税收" class="headerlink" title="税收"></a>税收</h2><h3 id="税收归属"><a href="#税收归属" class="headerlink" title="税收归属"></a>税收归属</h3><p>价格控制是为了保护那些需要保护的人，税收是为了对那些有财力的人的财富进行部分社会再分配，所以通常我们会认为<strong>税收归属</strong>（税收负担在市场参与者之间进行分配的方式）应该是谁有钱谁负担，但实际上谁承受了税收负担都说不定。</p><h3 id="向卖者征税"><a href="#向卖者征税" class="headerlink" title="向卖者征税"></a>向卖者征税</h3><p>由于不向买者征税，所以整个市场的需求量是不变的，需求曲线不变。但是由于向卖者征税，卖者在同一水平下的盈利能力降低了，所以供给需求会相左移动。此时均衡价格会沿着需求曲线上移，同一个均衡价格下，购买量下降了。因此税收缩小了冰激凌市场的规模。</p><p>所以税收控制了市场活动，当对一种物品征税时，该物品在新均衡下销售量下降了。而且在新均衡下，买者为该物品支付得更多了，卖者得到的也更少了，最终买者和卖者共同分担了税收负担。</p><p><img src="sale_tax_revenue.png"></p><h3 id="向买者征税"><a href="#向买者征税" class="headerlink" title="向买者征税"></a>向买者征税</h3><p>由于不向卖者征税，供给需求不会移动，但是由于向买者征税，所以在任何水平下，需求量会下降，需求曲线会左移。此时均衡价格会沿着供给曲线向下移动，此时市场均衡的供给量下降了，市场规模减小，商品的价格虽然降低了，但是买者在该价格上还需要支付税收价格，实际支付的价格还是变高了。</p><p>所以对卖者征税和对买者征税对最终效果是相同的，无论向谁征税，在新的均衡点上，都是卖者和买者分担税收负担，都会缩小市场规模。对卖者征收还是对买者征收的唯一区别是谁把钱交给政府。</p><p><img src="buy_tax_revenue.png"></p><h3 id="弹性与税收归属"><a href="#弹性与税收归属" class="headerlink" title="弹性与税收归属"></a>弹性与税收归属</h3><p>对于供给富有弹性，而需求缺乏弹性的市场，当对这种市场征税时，卖者得到的价格并没有下降多少，只承担了一小部分的税收负担，但是买者支付的价格却大幅增加，承担了大部分税收负担。</p><p>对于供给缺乏弹性，而需求富有弹性的市场，则卖者需要支付大量的税收负担。</p><p>弹性衡量了在当前条件不变时，买方或者卖方离开市场的意愿，当征收税收时，相近替代品较少的一方不太愿意离开市场，从而必须承担更多的税收负担。所以，<strong>税收负担总是更多的落在缺乏弹性的一方</strong>。</p><p>以奢侈品税为例，奢侈品税初衷是向富人征税的一种方式，但是富人对奢侈品的需求是富有弹性的，相反，那些生产游艇、私人飞机、豪华轿车等奢侈品的生产商缺乏弹性，这回导致大量的税收负担落在了供给侧，而不是富人身上。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 价格弹性 </tag>
            
            <tag> 价格控制 </tag>
            
            <tag> 税收 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从深度学习到人机对抗</title>
      <link href="2021/02/06/cong-shen-du-xue-xi-dao-ren-ji-dui-kang/"/>
      <url>2021/02/06/cong-shen-du-xue-xi-dao-ren-ji-dui-kang/</url>
      
        <content type="html"><![CDATA[<p>本文为我在公司内部做技术分享时（面向人群不全是算法工程师）的PPT，去掉了部分敏感信息。</p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8724.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8725.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8726.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8727.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8728.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 深度学习 </tag>
            
            <tag> 卷积网络 </tag>
            
            <tag> 人机攻防 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《超市里的原始人》-分享PPT</title>
      <link href="2021/02/03/chao-shi-li-de-yuan-shi-ren-fen-xiang-ppt/"/>
      <url>2021/02/03/chao-shi-li-de-yuan-shi-ren-fen-xiang-ppt/</url>
      
        <content type="html"><![CDATA[<p>对内容进行简单整理分享</p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8724.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8725.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8726.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8727.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费主义 </tag>
            
            <tag> 进化论 </tag>
            
            <tag> 杰弗里·米勒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《人类简史：从动物到上帝》</title>
      <link href="2021/01/31/ren-lei-jian-shi-cong-dong-wu-dao-shang-di/"/>
      <url>2021/01/31/ren-lei-jian-shi-cong-dong-wu-dao-shang-di/</url>
      
        <content type="html"><![CDATA[<p><strong>《人类简史：从动物到上帝》，尤瓦尔·赫拉利著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>不得不说，瓦尔·赫拉利的思考真的充满了野心，敢于直接对人类命运进行深思熟虑的人并不多。对于生命哲学这样深晦的问题，应该没有人可以真正解答，赫拉利也不例外，不过读这本书，会促使我们开始认真的思考这些问题。</p><p>人类的发展，是一个从物理学到化学，再到生物学，最后到历史学的过程。本书主要讲述了历史学中的三大革命如何改变人类与其他生物，大约7万年前，“认知革命”（Cognitive Revolution）让历史正式启动。大约12000年前，“农业革命”（Agricultural Revolution）让历史加速发展。而到了大约不过是500年前，“科学革命”（Scientific Revolution）可以说是让历史画下句点而另创新局。</p><p>这三次革命虽然有利于人类发展，但同时也为其他物种带来了巨大的灾难，至少为其他物种带去了三次大灭绝。第一波的灭绝浪潮是由于采集者的扩张，接着第二波灭绝浪潮则是因为农民的扩张；这些教训，让我们得以从一个重要观点来看今日的第三波灭绝浪潮：由工业活动所造成的物种灭绝。有些环保人士声称我们的祖先总是和自然和谐相处，但事实可能并非如此，早在工业革命之前，智人就是造成最多动植物绝种的元凶。人类可以说坐上了生物学有史以来最致命物种的宝座。</p><p>从认知革命以来，智人一直就生活在一种双重的现实之中。一方面，我们有像是河流、树木和狮子这种确实存在的客观现实；而另一方面，我们也有像是神、国家和企业这种想象中的现实。</p><p>人类之所以能从黑猩猩分离出来，一个很重要的因素就在于那些虚构的故事，它像胶水一样把千千万万的个人、家庭和群体结合在一起，这种胶水，让我们成了万物的主宰。这也是本书重点探讨的一个概念——共同想象，就像踢足球，小猫小狗也会玩球，小孩子刚出生时也会玩球，但是会踢足球就没有那么简单，踢足球必须建立在一定的规则之上，而这些规则是足球参与者们的共同想象。</p><p>不管是基督宗教、民主还是资本主义，都只是由想象所建构出来的秩序。而要怎样才能让人相信这些秩序？第一，对外的说法绝对要坚持它们千真万确、绝非虚构。第二，在教育上也要彻底贯彻同一套原则。从人出生的那一刻起，就要不断提醒他们这套想象建构出来的秩序，要在一切事物中融入这套原则，不管是童话、戏剧、绘画、歌曲、礼仪、政治宣传、建筑、食谱还是时尚。</p><p>虽然这些想象建构的秩序只存在于我们的脑海里，但它可以与真实的世界紧紧结合、密不可分。多数人很难接受自己的生活秩序只是虚构的想象，但事实是我们从出生就已经置身于这种想象之中，而且连我们的欲望也深受其影响。于是，个人欲望也就成为虚构秩序最强大的守护者。想象建构的秩序并非个人主观的想象，而是存在于主体之间，存在于千千万万人共同的想象之中。</p><p>虽然说所有社会的背后都是由想象建构出来的秩序，但种种秩序却又各有不同。这些差异的原因为何？传统的印度社会是用种姓制度来分阶级，土耳其人用宗教，美国用种族，但为何如此？这些阶级制度开始时多半只是因为历史上的偶发意外，但部分群体取得既得利益之后，世世代代不断加以延续改良，才形成现在的样子。</p><p>这种共同想象之下，产生了统一人类的三种力量，金钱，帝国，宗教。金钱算是当前最广泛大一统的力量，帝国通常被限制于领土和暴力，而宗教算是一种对原始社会文化的继承，这种超人类秩序形成的价值观，来源于对未知的敬畏。</p><p>“民族”和“消费大众”就是现代所兴起的两大想象社群。所谓民族，是国家的想象社群。而所谓消费大众，则是市场的想象社群。我们说这些社群属于“想象”，是因为过去的村落社群都是成员彼此熟识，但现代不论民族或市场，成员都不可能像过去一样彼此熟悉。任何一个德国人，都不可能真正认识所谓德意志民族的8000万人；欧洲共同市场的5亿人口，也不可能都互相认识（欧洲共同市场后来发展成欧洲共同体，最后形成今日的欧盟）。</p><p>本书最后还探讨了快乐是什么，生命的意义是什么。人想要离苦得乐，就必须了解自己所有的主观感受都只是一瞬间的波动，而且别再追求某种感受。如此一来，虽然感受疼痛，但不再感到悲惨；虽然愉悦，但不再干扰心灵的平静。</p><p>7万年前，智人还不过是一种微不足道的动物，在非洲的角落自顾自地生活。但就在接下来的几千年间，智人就成了整个地球的主人、生态系统的梦魇。时至今日，智人似乎只要再跨一步就能进入神的境界，不仅有望获得永恒的青春，更拥有创造和毁灭一切的神力。</p><hr><p>◆ 第一部分 认知革命</p><p>直力行走让臀部变窄，但是人类对高智力的愈加向往使得婴儿的头越来越大。在这种条件下，人类需要在婴儿还非常小的时候就进行生产，所以相比其他动物，我们都是早产儿。俗话说，女性屁股大好生养，这听起来像是对女性的人格不尊重，不过从进化的角度好，较宽的臀部的确有利于婴儿头部的发育和降低生产风险。</p><blockquote><p>这点对妇女来说造成的负担更大。直立的步行方式需要让臀部变窄，于是产道宽度受限，而且别忘了婴儿的头还越来越大。于是，分娩死亡成了女性的一大风险。而如果早点儿生产，婴儿的大脑和头部都还比较小，也比较柔软，这位母亲就更有机会渡过难关，未来也可能再生下更多孩子。于是，自然选择（natural selection，又译“天择”或“自然淘汰”）就让生产开始提前。与其他动物相较，人类可说都是早产儿，许多重要器官的发育都还不够完善。</p></blockquote><hr><p>都说学会用火是人类进化史上的巨大进步，但是用火到底促进了什么呢。第一，用火让人类消化系统消化更少的能量，于是有更多的能量来思考，促进了大脑发育。第二，用火帮助我们驱赶甚至捕食大型食肉动物，减少了天敌，同时还增加了食物来源。第三，用火让我们不再惧怕黑暗和寒冷，让我们对生存环境的适应能力进一步增强。第四，用火让我们做更多自己原本能力之外的事，这就像升维，从原来一维的能力提升到二维，这带来的连锁反映足以使得人类与其他动物的优势越来越明显，最终从相对优势变成绝对优势。</p><blockquote><p>但人类用火的时候，可以说是控制了一项既听话而又有无穷力量的工具。</p></blockquote><hr><p>◆ 第二章 知善恶树</p><p>人类需要的灵活性让与其他动物的差异变得越发明显，语言并不是人类独有的，不过对灵活语言的熟练运用成了我们应对复杂自然环境和建设社会环境的条件。语言让更多的智人可以协作完成更复杂的活动，语言还促使了我们思考，而且随着语言越来越复杂，文字的出现就变得更加自然。从这个角度看，八卦可能是一开始推动人类语言发展的源动力。</p><blockquote><p>青猴能够向同伴大叫：“小心！有狮子！”但现代人能够告诉朋友，今天上午，在附近的河湾，她看到有一群狮子正在跟踪一群野牛。而且，她还能确切地描述出位置，或是有哪几条路能够抵达。</p></blockquote><hr><p>公司是什么，是工厂？是员工？是产品？似乎都不是，公司是一种我们的共同想象，塑造这种共同想象的有利手段就是法律，这是一种以国家立法为背书的标准。这种共同想象的还有一个典型例子就是货币，我们之所以承认货币就是因为其有国家经济为背书，这不以个人利益为转移，所以这也是我们的共同想象。</p><blockquote><p>简单说来，标致公司与这个世界其实并没有什么实体的链接。它究竟是不是真的存在？</p><p>标致公司只是我们的一个集体想象，这种想象在法律上称为“法律拟制”（legal fiction）。像是公司，我们没办法明确指着它，它不是一个实体对象，而是以一种法律实体的方式存在。</p></blockquote><hr><p>认知革命的出现让人类生活在了两重现实之中，而且大规模的群体活动基本上都基于共同想象完成，这种想象比历史进化的对客观现实的理解时间短得多。以前智人认识一棵树花了上万的时间，今天人类一起想象一个企业只花了百余年。</p><blockquote><p>换句话说，过去远古人类的行为模式可能维持几万年不变，但对现代智人来说，只要十几二十年，就可能改变整个社会结构、人际交往关系和经济活动。</p></blockquote><hr><p>智人和猩猩走向不同的进化历程的最大差异就是智人开始了认知革命，这种认知能力让智人可以有更多想象，可以有更复杂的应对计划，可以组织更多人的活动， 还能在大量陌生人之间进行社会活动。</p><blockquote><p>智人创造了秩序井然的模式，像是贸易网络、大规模庆祝活动、政治体制；而这些如果只有个人，是绝对做不到的。人类和黑猩猩之间真正不同的地方就在于那些虚构的故事，它像胶水一样把千千万万的个人、家庭和群体结合在一起。这种胶水，让我们成了万物的主宰。</p></blockquote><hr><p>◆ 第三章 亚当和夏娃的一天</p><p>社会分工提高了生产效率，让社会财富变多了，但是也让个人技能变得少了，今天的社会相比远古已经不可同日而语，但是同样，今天我们具备的知识多样性也并不如远古的采集者。</p><blockquote><p>就整体而言，现今人类所知远超过远古人类。但在个人层面上，远古的采集者则是有史以来最具备多样知识和技能的人类。</p></blockquote><hr><p>◆ 第四章 毁天灭地的人类洪水</p><p>后面有证据说明在澳大利亚的大型物种灭绝过程中，人类难辞其咎，这种演化过程就像物种入侵，又或者是高等文明对低等文明对掠夺。如果宇宙中真的有除人类在的其他智慧生命存在，我们到时候到底是进入澳大利亚的智人，还是被掠夺的其他生物呢。</p><blockquote><p>但不过几千年后，所有这些巨大的动物都已消失殆尽。在澳大利亚当时24种体重在50公斤以上的动物中，有23种都惨遭灭绝，许多比较小的物种也从此消失。整个澳大利亚的生态系统食物链重新洗牌，这也是澳大利亚生态系统数百万年来最重大的一次转型。智人是不是罪魁祸首？</p></blockquote><hr><p>动物的第一波灭绝浪潮是因为采集活动，第二波事因为农业活动，第三波是因为工业活动。不只是物种之间，就连人类种群内部，本身也是弱肉强食的世界，在人类内部，这每一次浪潮推动了社会进步，但是，主导这些活动的，不过是屈指可数的意见领袖，更多的人不过是炮灰罢了。</p><blockquote><p>第一波的灭绝浪潮是由于采集者的扩张，接着第二波灭绝浪潮则是因为农民的扩张；这些教训，让我们得以从一个重要观点来看今日的第三波灭绝浪潮：由工业活动所造成的物种灭绝。有些环保人士声称我们的祖先总是和自然和谐相处，但可别真的这么相信。早在工业革命之前，智人就是造成最多动植物绝种的元凶。人类可以说坐上了生物学有史以来最致命物种的宝座。</p></blockquote><hr><p>◆ 第二部分 农业革命</p><p>农业并非起源于某一个特定的地方，再传遍各地，其实各个地方都有各自的农业驯化品种，如中国最先驯化的是稻米，小米和猪，今天中国也是稻米和猪的主要消费国，虽然经过了上千年进化，今天的人们仍然保留里狩猎采集者的心，和远古农民的胃。</p><blockquote><p>学者曾经以为农业就是起源于中东，再传布到全球各地，但现在则认为农业是同时间在各地独自发展而开花结果，而不是由中东的农民传到世界各地。中美洲人驯化了玉米和豆类，但不知道中东人种了小麦和豌豆。南美人学会如何栽培马铃薯和驯养羊驼，但也不知道在墨西哥或地中海东部又发生了什么事。中国最早驯化的是稻米、小米和猪。</p></blockquote><hr><p>很难说农业再人类进化史上是好事还是坏事。农业让智人从树上下来，从流离失所变得有定居地，单位土地上可以养活的智人更多，这对于人类繁衍来说是好事。同时，农业也让智人不得不改变非常多原有的生活习性，这位原来的身体带来非常多的负担，同时人员聚集带来了更多的疾病，带来了更多的矛盾和暴力。所以农业本身很难说好或坏，不过有一点是肯定的，农业推动了人类发展的进程。</p><blockquote><p>研究古代骨骼发现，人类进到农业时代后出现了大量疾病，例如椎间盘突出、关节炎和疝气。此外，新的农业活动得花上大把时间，人类就只能被迫永久定居在麦田旁边。这彻底改变了人类的生活方式。其实不是我们驯化了小麦，而是小麦驯化了我们。“驯化”（domesticate）一词来自拉丁文“domus”，意思就是“房子”。但现在关在房子里的可不是小麦，而是智人。</p></blockquote><hr><p>震撼，这就是高等智慧生物对低等动物的掠夺吗？每一种生物的都是向着对自己最有利的方向发展，这其中会有非常多残忍血腥的地方，可是这就是无情的自然选择。我们甚至没有理由去斥责这些驯化手段的无情，毕竟我们今天之所以能存活，很大程度上依赖他们。我们能做的是什么，可能只是让他们尽可能的安乐一些。</p><blockquote><p>所以，整个历史上常用的方法就是干脆等到小牛小羊出生后不久就全宰了，如此一来人类就能霸占所有牛奶羊奶，等到它们停奶之后再重新怀胎即可。听来残忍，但甚至到现在这种做法仍然十分普遍。在许多现代的奶牛场里，奶牛通常只能活到5岁就会被宰杀。这5年中，它几乎一直在怀孕，为了维持最大的产奶量，在分娩后大约60~120天就要再次受精。至于它的小牛们，则是一出生没多久就被带走，母的被养大成为新一代的奶牛，而公的就进了肉类产业的手里。</p></blockquote><hr><p>◆ 第六章 盖起金字塔</p><p>从这个角度看，农业对社会进步是有促进作用的，当开始思考更长远的未来时，人类会产生更加复杂的社会活动，虽然这种复杂性需要更高的维护成本，不过这的确推动了社会进步，如果不是农业时代，就不会分离出国王，士兵，教会不同的角色，也不会有今天不同的领域和阶层。</p><blockquote><p>农业时代人类的空间缩小，但时间却变长了。一般来说，采集者不会花太多心思考虑下周或下个月的事，但农民却会想象预测着未来几年甚至几十年的事。</p></blockquote><hr><p>不管是巴比伦的汉莫拉比法典还是美国的独立宣言，都没有绝对的正确与否，主要是看是否适合特定环境下的社会规则。就连现在同为西方国家的国家也差异明显，美国为自由而战，法国为爱情而战，德国为友谊而战，这都是他们沉淀下来的社会规则。</p><blockquote><p>不管是《汉谟拉比法典》还是美国《独立宣言》，都声称自己说的是普遍且永恒的公平正义原则，但美国人认为所有人都是平等的，而巴比伦人显然并不这样认为。但事实上，他们都错了。不管是汉谟拉比还是美国的开国元勋，心中都有个想象的现实，想象着这个世界有着放诸四海皆准、永恒不变的正义原则（例如平等或阶级），但这种不变的原则其实只存在于智人丰富的想象力里，只存在于他们创造并告诉彼此的虚构故事中。这些原则，从来就没有客观的正确性。</p></blockquote><hr><p>我们不断捍卫的、拥护的、为之奋斗的到底是什么，那可能只是我们的共同想象，一个国家，一个公司，一种价值等价物，一种社会秩序，这些本来都不存在，在社会的演进过程中，这些想象从少数个体的思维中迸发出来，在宗教、暴力等的约束下，逐渐开始裂变传播。</p><blockquote><p>我们相信某种秩序，并非因为它是客观的现实，而是因为相信它可以让人提升合作效率、打造更美好的社会。这种由想象所建构的秩序绝非邪恶的阴谋或是无用的空谈，而是唯一能让大群人类合作的救命仙丹。但也别忘了，汉谟拉比也可以用同样的逻辑来捍卫他的阶级原则：“我知道所谓上等人、平民和奴隶在本质上其实并没有什么不同。但如果我们这么相信，就能创造出一个稳定繁荣的社会。”</p></blockquote><hr><p>有点细思极恐，我们从出生起就已经置身于虚构的想象之中，我们所有的行为、动机、欲望都来源这种想象，而且所产生的一些列行为又再次加强了这种想象，这不就是现在所说的内卷吗？如果真的有一天外星高等文明入侵，他们使用某种特殊手段改变我们的共同想象，比如用宇宙中丰富的砖石换取地球的植被资源，这导致的连锁反应就像多米勒骨牌，看似上不可催的共同想象可能不堪一击。</p><blockquote><p>多数人很难接受自己的生活秩序只是虚构的想象，但事实是我们从出生就已经置身于这种想象之中，而且连我们的欲望也深受其影响。于是，个人欲望也就成为虚构秩序最强大的守护者。</p></blockquote><hr><p>典型的消费主义陷阱。先问第一个问题，你现在都拥有了哪些商品？再问第二个问题，你现在快乐吗？</p><p>如果回答快乐，那推销者会告诉你，你看，你拥有了这些东西，你很快乐，所以你需要拥有更多这样的东西，你会更快乐。</p><p>如果回答不快乐，推销者会说，你都没拥有多少东西，当然不会快乐，你需要拥有它们，你就会快乐了。</p><p>其实不管拥有或是不拥有，都不过是我们的想象，甚至都算不上社会的共同想象，因为别人根本不会关心你拥有什么。</p><blockquote><p>消费主义告诉我们，想要快乐，就该去买更多的产品、更多的服务。如果觉得少了什么，或是有什么不够舒服的地方，那很可能是该买些什么商品（新车、新衣服、有机食品），或是买点什么服务（清洁工、心理咨询、瑜伽课）。就连每一则电视广告，也都是个小小的虚构故事，告诉你买了什么产品或服务可以让日子更好。</p></blockquote><hr><p>◆ 第七章 记忆过载</p><p>一直非常好奇人脑中的信息是如何存储，如何被处理，如何被检索，如何被触发的，这种高效的信息整理方式可以说吊打任何一个今天的计算机系统。如果这种信息整理方式能被应用在互联网或物联网中，那价值不言而喻，近两年非常火的图神经网络或许是找到了一点这方面的苗头，不过似乎离目标还有不少的差距。</p><blockquote><p>随着越来越多的事情通过文字记载，特别是行政档案数据变得无比庞杂，也就出现了新的问题。记在人脑里的信息找起来非常方便。以我自己为例，虽然我的大脑里藏着几千兆位的数据，但我可以几乎是立刻想起意大利首都的名字，再想起我在2001年“9·11”事件那天做了什么，还能马上想出从我家到耶路撒冷希伯来大学的路线。至今，大脑为何能做到这样仍然是一个谜，但我们都知道它的检索系统效率惊人。（只不过，找钥匙这件事可能是个例外。）</p></blockquote><hr><p>◆ 第八章 历史从无正义</p><p>一直以为今天社会上男女结婚时，南方给女方父母彩礼钱是为了报答父母的养育之恩，以后不能常伴左右，给予一些金钱的回报，属于孝道。而在更久远一些的社会演变中，女性被作为男性的财产，当女性被侵犯时，需要给女性的父母兄弟予以一定赔偿。虽然非常不认同这种归属关系的社会共同想象。不过演变到今天的彩礼是否真有这样一脉意义在其中也说不定，只是希望不要再有这样的认同。</p><blockquote><p>在许多社会中，妇女只是男人的财产，通常属于她的父亲、丈夫或兄弟。而在许多法律系统中，强奸罪是属于侵犯财产，换句话说，受害人不是被强奸的女性，而是拥有她的男性。因此，这些法律对于强奸罪的救济措施就是所有权移转：强奸犯付出一笔聘金给女方的父亲或兄弟，而她就成了强奸犯的财产。《圣经》还写着：“若有男子遇见没有许配人的处女，抓住她，与她行淫，被人看见，这男子就要拿50舍客勒银子给女子的父亲；因他玷污了这女子，就要娶她为妻。”</p></blockquote><hr><p>在远古社会，更强壮的肌肉和更大的力气能独占那些需要较多体力劳动的工作，于是让肌肉健壮者掌握了粮食的生产，进而转化为政治上的影响力。不过随着社会的进步，肌肉已经不再是决定社会地位的关键条件，甚至和社会权利呈现了一定的反比例关系，通常情况下，在今天，聪明才智和社交技巧比体力重要得多。</p><blockquote><p>事实上，人类历史显示，肌肉的力量和社会的权力还往往是呈反比。在大多数社会中，体力好的反而干的是下层的活。这可能反映着智人在食物链中的位置。如果真的一切只看体力，智人在食物链里就只能处在中间的位置。然而，智人靠着聪明才智和社交技巧，让自己跃升到了食物链的顶端。于是，在智人内部的权力链里，聪明才智及社交技巧也会比体力更重要。正因如此，如果想解释父权制这个历史上影响最广、最稳固不变的阶级制度，要说一切只是因为男人力气大于女人，实在叫人难以相信。</p></blockquote><hr><p>◆ 第三部分 人类的融合统一</p><p>早期智人都是从非洲走出来的，可是迁徙到不同的地方后，发展起来的文明却有非常大的差异，这说明早期智人建立文明社会非常依赖自然环境，必须因地制宜，随着人类的进步，改造自然的能力越来越强，所以很多相似的文明开始融合，迁徙到新的地方仍然可以继承就的文明。</p><blockquote><p>大约在公元前10000年，地球上有数千个人类文明。但到公元前2000年，这个数字已经只剩下数百个最多也只有两三千个。至于到了公元1450年，这个数字更是急遽下降。当时即将进入欧洲探险时代，地球上仍然有许多像是塔斯马尼亚这样独立的“小世界”，但将近九成的人类都已经紧密相连，活在由亚洲和非洲组成的“亚非世界”里。当时，绝大部分的欧亚非（包括撒哈拉沙漠以南的一大片地区）</p></blockquote><hr><p>◆ 第十章 金钱的味道</p><p>人们最开始见到黄金的时候可能并没有作者所说的那么痴迷，终究让黄金的价值表现出来的或许是物以稀为贵（不管是自然界本身的还是被垄断的），因为难得，所以珍贵，因为珍贵，所以高价值，这非常符合常理，当需要耗费更多的货币价值才能得到，那自然就可以用其去置换其他的高价值物品，包括声誉。</p><blockquote><p>看到西班牙人对黄金如此痴迷，他们实在是一头雾水。毕竟，黄金不能吃、不能喝、不能织，想当作工具或武器，质地又太软，究竟为什么西班牙人为之如此疯狂？面对当地人的疑惑，科尔特斯表示：“我们这群人有种心病，只有金子能医。”</p></blockquote><hr><p>全球金钱总和有60兆亿美元，但硬币和钞票只有不到6兆亿，也就是说，超过9成的金钱都在计算机系统中。从这个角度一定程度上能解释为什么今天商业世界中公司市值越来越高，钱越来越不值钱，因为相比几十年前，今天计算机中数字变大的边际成本几乎为零。</p><blockquote><p>事实上，就算是现在，大部分的钱也不是以硬币或钞票的方式存在。全球金钱总和为60兆美元，但所有硬币和钞票的金额加起来还不到6兆美元。换句话说，所有的钱有超过九成（超过50兆美元！）都只是显示在计算机上的数字而已。</p></blockquote><hr><p>经常能听说从信息的不对称中可以获得收益，不过只有信息不对称还不够，追其根本还是人们是否能形成对未接触的信息的共同想象。比如向一个长期居住在乡村的农民推销比特币和区块链，这之间存在信息不对称，而区块链同样也有价值，但是乡村的农民可能并不关注这些，毕竟他周围的人也不关注，没有形成共同想象。像数字货币，三年前让农民一下子接受用支付宝和微信支付进行蔬菜交易肯定是不可能的，不过今天这已经变得非常普遍。</p><blockquote><p>往来于印度和地中海之间的商人，开始注意到黄金的价差，于是在印度便宜购入黄金，再回到地中海高价出售。于是，印度市场上的黄金需求暴增，价格跟着水涨船高。与此同时，在地中海黄金供给大量增加，价格因此下降。不用多久，黄金在印度和地中海的价格就相去无几。正因为地中海人相信黄金有价，印度人也开始跟着相信。就算黄金对印度人来说仍然没有实际用途，光是因为地中海人重视黄金，就足以让印度人跟着重视起来。</p></blockquote><hr><p>◆ 第十一章 帝国的愿景</p><p>要成为帝国，需要两项特征，第一，需要统治很多民族，第二，疆域需要可扩展。第一个条件是帝国不可避免必须面对的问题，因为通常一个单一民族难以支撑其一个帝国。感觉第二个条件才是能否成为帝国的核心，就像设计一个计算机系统，可扩展性是非常重要的条件，它决定了扩张的边际成本。</p><blockquote><p>帝国是一种政治秩序，有两项重要特征。第一，帝国必须统治着许多不同的民族，各自拥有不同的文化认同和独立的领土。但多少民族才算数？两三个民族还不够，而二三十就算很多；要迈进帝国的门槛，其统治的民族数量，大概就介于两者之间。</p><p>第二，帝国的特征是疆域可以灵活调整，而且可以几乎无限扩张。帝国不需要改变基本架构和认同，就能够纳入更多其他国家和领土。说到今天的英国，如果不改变基本架构和认同，就很难再突破现有的疆界。但在1个世纪前，全世界几乎任何地方都有可能成为大英帝国的一部分。</p></blockquote><hr><p>帝国需要有大一统的文化，最基础的必须要有统一的语言，在这基础上才能建立更上层的度量衡。有了这些基础，让很多民族承认并接纳一个共同的文化想象，要么是利益，要么是暴力，而通常情况下，暴力是最高效的方法。</p><blockquote><p>中国的帝国大计执行得更为成功彻底。中国地区原本有许许多多不同的族群和文化，全部统称为蛮族，但经过两千年之后，已经成功统合到中国文化，都成了中国的汉族（以公元前206年到公元220年的汉朝为名）。中国这个帝国的最高成就在于它仍然生龙活虎。有些人可能会怀疑它究竟算不算帝国，但只要看看偏远地区的西藏、新疆等地，就能知道此话不假。现在有超过九成的中国人口无论是自认或是在他人眼中，都算是汉族。</p></blockquote><hr><p>◆ 第十二章 宗教的法则</p><p> 统一人类的三种力量，金钱，帝国，宗教。金钱算是当前最广泛大一统的力量，帝国通常被限制于领土和暴力，而宗教算是一种对原始社会文化的继承，这种超人类秩序形成的价值观，来源对未知的敬畏。</p><blockquote><p>我们今天常认为宗教造成的是歧视、争端、分裂，但在金钱和帝国之外，宗教正是第三种让人类统一的力量。</p></blockquote><hr><p>对于一个无神论者而言，我能比较容易的接受佛教、道教和儒家的一些观点，当然也不是完全认同，但是对于西方以神为信仰的传教士，虽然不认同他们的共同想象，但从心底里佩服，他们能让一个根本不存在的价值观深耕在人们心中，他们自己可能也说不好饭前祷告有什么用，但真的让非常多的人做到了。</p><blockquote><p>我们目前为止讨论到的所有宗教，都有一个共同的重要特征：相信的都是神灵或是其他超自然对象。然而，世界宗教史并不只是神的历史。在公元前1000年，亚非大陆开始出现全新的宗教及信仰类型。这些新型宗教信仰包括印度的耆那教（Jainism）和佛教，中国的道教和儒教，以及地中海的犬儒主义（Cynicism）和享乐主义（Epicureanism），共同的特征就是崇拜的并非神祇。</p></blockquote><hr><p>◆ 第四部分 科学革命</p><p>我们都知道科学革命让这个世界发生了变化，但可能很少去想象发生了多大的变化，如果是公元前，一个沉睡了500年的人醒来，可能会发现江山易主，但是科技、礼仪、国界可能并没有发生什么变化。但是如果让沉睡了200年的人被闹钟叫醒，他一定会感到非常陌生。这就是科技革命的力量。</p><blockquote><p>在过去500年间，人类的力量有了前所未有的惊人成长。公元1500年时，全球智人的人口大约有5亿，但今天已经到了70亿。人类在1500年生产的商品和服务总共约合现值2500亿美元，但今天每年人类生产的价值约为60万亿美元。在1500年，全人类每天总共约消耗13万亿卡路里，但今天每天要消耗1500万亿卡路里。（看看这些数字，人口增加了14倍，生产增加240倍，消耗的能量增加了115倍。）</p></blockquote><hr><p>人类可能永远也消灭不了贫穷，生物学上的贫穷可以通过技术迭代和社会进步解决，但是社会性贫穷肯定会一直存在，人与人之间永远不可能达到绝对的平等，这必然会导致资源分配不均，而随着马太效应加剧，这种社会性贫穷可能比以前更甚。</p><blockquote><p>而且确实，世界许多地方已经不再有最恶劣的贫穷形式。纵观历史，社会上有两种贫穷：（1）社会性的贫穷，指的是某些人掌握了机会，却不愿意释出给他人；（2）生物性的贫穷，指的是因为缺乏食物和住所，而使人的生存受到威胁。或许社会性的贫穷永远都会存在、无法根除，但在全球许多国家中，生物性的贫穷都已经成了过去式。</p></blockquote><hr><p>◆ 第十五章 科学与帝国的联姻</p><p>复制粘贴简单，因地制宜却很难，每个地方都有历史的包袱和负债，要改变其实并没有那么简单。大到每个时代、帝国，小到每个企业、个人，对其优劣，任何时候都不要惘下决断和预测，理解历史不是为了预测，是为了更好的看清现在。</p><blockquote><p>中国和波斯其实并不缺乏制作蒸汽机的科技（当时要照抄或是购买都完全不成问题），他们缺少的是西方的价值观、故事、司法系统和社会政治结构，这些在西方花了数个世纪才形成及成熟，就算想要照抄，也无法在一夕之间内化。之所以法国和美国能够很快跟上英国的脚步，是因为他们本来就和英国共享一套最重要的故事和社会结构。而中国和波斯总是追赶不及，则是因为整个关于社会的想法和组织就是不同。</p></blockquote><hr><p>◆ 第十六章 资本主义教条</p><p>理性的经济人绝大程度上都是为了未来的预期在谋划。如果对于未来预期好，则会加大对未来的投资力度，有更多的信任，有更多的资源，于是预期的好的现象出现了。相反，如果对未来预期差，就会缩减投资力度，减少投入资源，于是预期的差的现象也出现了。所以到底是预期正确，还是因为预期所导致的行动去对预期进行了自我证明。</p><blockquote><p>这其实是种双输的局面。因为信用有限，想要筹资创业就难上加难。因为创业停滞，经济就不会成长。因为经济没有成长，大家就认为经济不可能成长，即使是手上确实有资金的人，也不愿意提供信用贷款给别人。于是，对于经济停滞的预期，就确实造成了经济停滞的结果。</p></blockquote><hr><p>在资本主义里，资本和财富是不同的。资本是投入再生产的资源，它能再次做法社会的蛋糕，带来更大的价值。而财富也是那些浪费在了非生产性活动上的资源，纯属一种对资源的浪费。有句话说得好，金钱只有流动起来才有价值，所以要做一个拥有财富的人，还是做一个拥有资本的人。</p><blockquote><p>所谓的“资本主义”（Capitalism），认为“资本”（capital）与“财富”（wealth）有所不同。资本指的是投入生产的各种金钱、物品和资源。而财富指的则是那些埋在地下或是浪费在非生产性活动的金钱、物品和资源。例如，如果有位法老王，把所有的资源拿来盖了一座不具生产力的金字塔，他并不是资本主义者。某个海盗劫掠了一条西班牙运宝船，把一整箱闪闪发光的金币埋到加勒比海的某座小岛上，他也不是个资本主义者。但如果是某个辛勤工作的工厂工人，把收入的一部分拿去投资股票，他就算是个资本主义者。</p></blockquote><hr><p>21世纪的我们惊呼商业巨头的庞大，像苹果、谷歌、微软、脸谱、阿里、腾讯这些公司，用富可敌国来形容他们拥有的资源一点也不为过，似乎只有今天的经济环境才能孕育这样的庞然大物。其实不然，历史上出现过拥有更多财力和权利商业巨鳄，荷兰东印度公司的权利可以直接干预国际政治，英国东印度公司甚至拥有35万人的佣兵，密西西比公司、罗斯查尔德家族的财力可以影响到整个金融系统，相比而言，今天的巨头们还有很长到路可走。</p><blockquote><p>在今天，有人大声疾呼，认为21世纪的民间企业已经掌握了太多权力。但从现代早期的历史来看，我们早已看过放纵追求自我利益能到什么境界。</p></blockquote><hr><p>◆ 第十七章 工业的巨轮</p><p>工业革命的核心，其实就是能源转换的革命。从能源转化的角度看，第一次工业革命是发现前所未有的蒸汽动力。第二次工业革命进化出更高效的电力，并借助流水线进行大规模商用。第三次工业革命是将动力转化为算力，催生出半导体、计算机和互联网。第四次工业革命会通过算力催生出信息化和智能化，一种高度灵活、人性化、数字化的生产、服务模式。</p><blockquote><p>工业革命的核心，其实就是能源转换的革命。我们已经一再看到，我们能使用的能源其实无穷无尽。讲得更精确，唯一的限制只在于我们的无知。每隔几十年，我们就能找到新的能源来源，所以人类能用的能源总量其实在不断增加。</p></blockquote><hr><p>资本主义和消费主义在社会上一直都共同存在，有钱人在意的是资本，大多数普通人在意的是财富，资本在投资再创造过程中滚雪球，财富在消费购买中不断减值，在蛋糕没有变大的情况下，富人越富，穷人越穷。</p><blockquote><p>资本主义和消费主义的伦理可以说是一枚硬币的正反两面，将这两种秩序合而为一。有钱人的最高指导原则是——“投资！”而我们这些其他人的最高指导原则则是——“购买！”</p></blockquote><hr><p>◆ 第十八章 一场永远的革命</p><p>早期市场上存在可用于交换的商品、服务非常有限，每个人心里都能计算清楚相互之间的利益交换，就没有必要用货币进行复杂的度量，一个极端的例子，如果市场上只有两种商品，那通过以物易物将高效很多。看现在的社会，城市生活已经离不开货币，但是在一些比较偏远的乡村，相互之间帮忙、送蔬果是很平常的事，却很少用货币来进行交易。所以从这个角度来看，货币流通率越高，说经济发展越活跃，市场提供的商品和服务品类也越多。</p><blockquote><p>像是在传统的中世纪社会，如果邻居需要我帮忙盖屋子或是放羊，我并不会认为他应该付钱，而是在我有需要的时候再还我这份人情就好。同时，当地的领主可能会叫我们全村的人去帮他盖城堡，但他也是一分不付，而是在出现盗贼或野蛮人的时候提供保护。虽然在这些村庄里有许许多多的交易，但多半都不是金钱往来。当时市场机制已经存在，但十分有限。</p></blockquote><hr><p>国家、社群在意的一直都不是战争或和平，在意的永远是利益，当战争变得有利可图，很难会有人能抵挡诱惑，曾经的侵华战争足以说明这一点，当战争的成本变得高昂，和平就会成为主题，就像在核子末日下，任何大国都不愿意开启热核战争。这也说明，和平永远是属于强者，弱者只能成为战场。</p><blockquote><p>核子末日的威胁促进了和平主义；和平主义大行其道，于是战争退散、贸易兴旺；贸易成长，也就让和平的利润更高，而战争的成本也更高。随着时间过去，这个良性循环也就对战争造成另一个阻碍，而且可能最后看来会是最重要的阻碍：因为国际网络日渐紧密，使得多数国家无法再维持全然独立，所以其中任何一国片面宣战的机会也就大幅降低。</p></blockquote><hr><p>◆ 第十九章 从此过着幸福快乐的日子</p><p>这就是典型的边际递减效应，在饿的时候，吃了一个馒头，如果能再吃一个馒头，那必定会是非常快乐的，但是当吃了十个馒头，要再吃一个，可能并不会比变得快乐得多。</p><blockquote><p>目前有一项耐人寻味的结论：金钱确实会带来快乐，但是有一定限度，超过限度之后的效果就不那么明显。所以，对于在经济阶层底层的人来说，确实是钱越多就越快乐。</p></blockquote><hr><p>第一次看到这个关于快乐的概念是在古典老师的《拆掉思维里的墙》一书中，快乐不是因为获得了什么，获得更多的什么，快乐来源于对自己预期的满足，要想让自己快乐，先给自己定一个目标，知足常乐的意义或许就在这里了。</p><blockquote><p>关于快乐最重要的一项发现在于：快乐并不在于任何像是财富、健康甚至社群之类的客观条件，而在于客观条件和主观期望之间是否相符。如果你想要一辆牛车，而你也得到了一辆牛车，你就会感到满足。如果你想要一台全新的法拉利，而得到的只是一台二手的菲亚特，你就感觉不开心。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 尤瓦尔·赫拉利 </tag>
            
            <tag> 认知革命 </tag>
            
            <tag> 农业革命 </tag>
            
            <tag> 工业革命 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>弹性衡量供需变化程度</title>
      <link href="2021/01/31/dan-xing-heng-liang-gong-xu-bian-hua-cheng-du/"/>
      <url>2021/01/31/dan-xing-heng-liang-gong-xu-bian-hua-cheng-du/</url>
      
        <content type="html"><![CDATA[<h2 id="弹性"><a href="#弹性" class="headerlink" title="弹性"></a>弹性</h2><p>弹性是衡量买者与卖者对市场条件变化的反应程度，例如，当一个商品的价格上涨时，人们对这种商品的消费就会减少，但是这种消费会减少多少呢，就可以使用弹性来进行度量。</p><p>对需求与供给，分别有需求弹性与供给弹性。</p><h2 id="需求弹性"><a href="#需求弹性" class="headerlink" title="需求弹性"></a>需求弹性</h2><h3 id="需求价格弹性与其决定性因素"><a href="#需求价格弹性与其决定性因素" class="headerlink" title="需求价格弹性与其决定性因素"></a>需求价格弹性与其决定性因素</h3><p><strong>需求价格弹性</strong>衡量需求量对价格变动的反应程度，如果一个物品的需求量对价格变动的反应很大，则认为该物品的需求是富有弹性的，反之，如果一个物品的需求量对价格变动的反应很小，则认为该物品的需求缺乏弹性。</p><p>影响需求弹性的因素主要有：</p><ul><li><strong>相近替代品的可获得性</strong>：相近替代品可获得性强，消费者对该物品的价格就灰更加敏感，富有弹性。例如，黄油与人造黄油很容易互为替代，消费者可以很容易用其中一个替代另一个，富有弹性；但是鸡蛋就不同，鸡蛋没有相近替代品，需求弹性就要小很多。</li><li><strong>必需品与奢侈品</strong>：必需品的需求往往缺乏弹性，奢侈品的需求往往富有弹性。</li><li><strong>市场的定义</strong>：任何一个市场的需求弹性都取决于我们如何划定市场的边界，狭窄定义的市场的需求弹性往往大于宽泛定义的市场的需求弹性，因为狭窄市场的物品更容易找到替代品，例如：食物是一个宽泛的定义，往往缺乏弹性，冰激凌是一个狭窄定义的市场，往往富有弹性。</li><li><strong>时间范围</strong>：物品的需求往往在长期内更有弹性，因为在长期内更容易找到相近替代品。</li></ul><h3 id="需求价格弹性的计算"><a href="#需求价格弹性的计算" class="headerlink" title="需求价格弹性的计算"></a>需求价格弹性的计算</h3><p>需求价格弹性表示为需求量变动百分比除以价格变动量百分比。</p><p>$$需求价格弹性 = \frac{需求量变动百分比}{价格变动百分比}$$</p><p>例如，让一个商品的价格上升10%，需求量降低20%，由于需求与价格总是负相关的，所以需求弹性有时候会是负数，通常取绝对值表示，则需求价格弹性为</p><p>$$需求价格弹性 = |\frac{-20%}{10%}| = |-2| = 2$$</p><p>如上计算方式可以需求价格弹性，但是会存在一个问题，比如一个价格从 $p_{1}$ 变到 $p_{2}$ ，需求量从 $q_{1}$ 变到 $q_{2}$ ，会计算出一个价格弹性，但是价格从 $p_{2}$ 变到 $p_{1}$ ，需求量从 $q_{2}$ 变到 $q_{1}$ ，虽然变化相同，但是会计算出另一个不同的价格弹性，因为变动的百分比是基于不同的基础计算的。</p><p>为了避免这种问题，采用 <strong>中点法</strong> 计算，以初始水平与终点水平的平均值为基础计算变动百分比。</p><p>所以需求价格弹性计算就变成了</p><p>$$需求价格弹性 = \frac{(Q_{1} - Q_{2}) / [(Q_{1} + Q_{2}) / 2]}{(P_{1} - P_{2}) / [(P_{1} + P_{2}) / 2]}$$</p><h3 id="不同需求弹性的曲线"><a href="#不同需求弹性的曲线" class="headerlink" title="不同需求弹性的曲线"></a>不同需求弹性的曲线</h3><p>几种曲线分类：</p><ul><li>当弹性大于1，则需求是<strong>富有弹性</strong>的</li><li>当弹性小于1，则需求是<strong>缺乏弹性</strong>的</li><li>当弹性等于1，则需求是<strong>单位弹性</strong>的</li></ul><p>下图表示了5种需求价格弹性。</p><p><img src="price_elasticity_demand.png"></p><h3 id="需求价格弹性如何影响总收益"><a href="#需求价格弹性如何影响总收益" class="headerlink" title="需求价格弹性如何影响总收益"></a>需求价格弹性如何影响总收益</h3><p>总收益是买者支付使得卖者获得点量，总收益等于 $P \times Q$ ，即成交价格左左下角的面积。</p><p>有如下规律：</p><ul><li>当需求缺乏弹性（价格弹性小于1），价格与收益同方向变动，价格上升，总收益增加。或者换个角度理解，需求缺乏弹性，相近替代品的可获得性低，价格涨了照样需要消费，总收益自然增加。</li><li>当需求富有弹性（价格弹性大于1），价格与收益反方向变动，价格上升，总收益减少。</li><li>当需求单位弹性（价格弹性等于1），当价格变动时，总收益不变。</li></ul><p>对于同一条需求曲线先，各点的需求价格弹性不一定是相同的，一般对于需求曲线而言，左上角价格弹性大于右下角的价格弹性。</p><h3 id="其他需求弹性"><a href="#其他需求弹性" class="headerlink" title="其他需求弹性"></a>其他需求弹性</h3><p>除了需求价格弹性，还存在一些其他需求弹性。</p><p>衡量物品需求量对消费者收入变动反应程度可以使用<strong>需求收入弹性</strong>。</p><p>$$需求收入弹性 = \frac{需求量变动百分比}{收入变动百分比}$$</p><p>对于大多数物品而言，收入增加，需求量也会增加，需求量与收入同方向变动，这种正常物品的收入弹性为正数。</p><p>对于抵挡物品而言（如公共汽车），收入增加，需求量会减少，需求量与收入反方向变动，抵挡物品的收入弹性为负数。</p><p>衡量一种物品需求与另一种物品价格变动的反应程度可以使用<strong>需求的交叉价格弹性</strong>。</p><p>$$需求的交叉价格弹性 = \frac{物品1的需求量变动百分比}{物品2的价格变动百分比}$$</p><p>交叉价格弹性是正数还是负数取决于这两种物品是替代品还是互补品。</p><ul><li><strong>替代品</strong>：物品2价格增加，物品2需求量减少，物品1需求量会增加，交叉价格弹性为正数</li><li><strong>互补品</strong>：物品2价格增加，物品2需求量减少，物品1需求量会减少，交叉价格弹性为负数</li></ul><h2 id="供给弹性"><a href="#供给弹性" class="headerlink" title="供给弹性"></a>供给弹性</h2><h3 id="供给价格弹性与其决定性因素"><a href="#供给价格弹性与其决定性因素" class="headerlink" title="供给价格弹性与其决定性因素"></a>供给价格弹性与其决定性因素</h3><p><strong>供给价格弹性</strong>衡量供给量对价格变动的反应程度。如果供给量对价格变动的反应程度很大，则物品的供给对价格是富有弹性的，反之，则认为是缺乏弹性的。</p><p>供给价格弹性取决于卖者改变所生产的物品量的灵活性，改变越灵活，越富有弹性。通常情况下，供给在长期中的弹性强于短期。</p><h3 id="供给价格弹性的计算"><a href="#供给价格弹性的计算" class="headerlink" title="供给价格弹性的计算"></a>供给价格弹性的计算</h3><p>供给价格弹性用供给量变动百分比除以价格变动百分比。</p><p>$$供给价格弹性 = \frac{供给量变动百分比}{价格变动百分比}$$</p><p>如一个物品的价格上升10%，供给增加20%，则</p><p>$$供给价格弹性 = |\frac{20%}{10%}| = 2$$</p><p>同样由于变化方向的问题，相同的变化程度，直接用上式计算可能会导致价格弹性不同，也可用中点平均值作为基础进行计算。</p><h3 id="不同弹性的供给曲线"><a href="#不同弹性的供给曲线" class="headerlink" title="不同弹性的供给曲线"></a>不同弹性的供给曲线</h3><p>下图表示了5中供给价格弹性的曲线。</p><p><img src="price_elasticity_supply.png"></p><p>在一般市场中，供给弹性并不是不变的，通常会向右上角弯曲，故同一条供给曲线中，左下角的供给价格弹性大于右上角的供给价格弹性。</p><h2 id="供给、需求、弹性结合的实例"><a href="#供给、需求、弹性结合的实例" class="headerlink" title="供给、需求、弹性结合的实例"></a>供给、需求、弹性结合的实例</h2><ul><li>农业增产对农民并不一定是好事：当需求缺乏弹性，供给量增加，会引起价格大幅下降，导致总收益降低。</li><li>石油输出国不能一直保持石油的高价格：石油的需求和供给都缺乏弹性，短期内降低石油产量，可以提高石油价格，但是在长期中，供给与需求都会变得富有弹性，供给曲线同样的相左移动幅度，只会导致价格的小幅上升。</li><li>禁毒增加了与毒品相关的犯罪：对于吸毒者而言，毒品是缺乏弹性的，禁毒减少了毒品供给，价格会大幅上升，导致总收益增加，瘾君子为了更快得到钱，会造成更多的犯罪。与禁毒相比，禁毒教育可以减少与毒品相关的犯罪，因为禁毒教育减少了毒品的需求，降低了毒品价格，市场总收益也会减少。</li></ul><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 市场供给 </tag>
            
            <tag> 市场需求 </tag>
            
            <tag> 价格弹性 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>好而不同的集成学习</title>
      <link href="2021/01/23/hao-er-bu-tong-de-ji-cheng-xue-xi/"/>
      <url>2021/01/23/hao-er-bu-tong-de-ji-cheng-xue-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="集成学习"><a href="#集成学习" class="headerlink" title="集成学习"></a>集成学习</h2><h3 id="集成学习算法"><a href="#集成学习算法" class="headerlink" title="集成学习算法"></a>集成学习算法</h3><p>集成学习主要结合多个基学习器，以获得比单一学习器更加优越的泛化性能，也就是俗话所说的三个臭皮匠，顶个诸葛亮，相对比而言，单一学习器就是弱分类器（这并不代表只有弱分类器才有集成需求，其实现在很多分类器都是给予强分类器）。</p><p>不过通常而言，当把好的和坏的东西混杂在一起，那么平均结果会介于好与坏之间，而集成学习的目的是为了比最好的还好，所以用于集成学习的基学习器必须好而不同，如下图就表示了不同性能基学习器集成的效果。</p><p><img src="good_but_different.png"></p><p>那么集成学习的错误率应该是多少呢？</p><p>对于二分类问题，假设基分类器是 $h_{i}$ ，基分类器的错误率是 $\epsilon$ ，真实函数是 $f$​​ ，那么显然</p><p>$$P(h_{i}(x) \neq f(x)) = \epsilon$$</p><p>若有 $T$ 个分类器，超过 $\frac{T}{2}$ 的分为正样本，则集成为正样本，则</p><p>$$H(x) = sign(\sum_{i = 1}^{T}h_{i}(x))$$</p><p>假设基分类器的错误是相互独立的，那么集成的每个基分类器就变成了伯努利分布变量</p><p>$$P(H(x) \neq f(x)) = \sum_{k = 0}^{\frac{T}{2}}\begin{pmatrix} T \ k \end{pmatrix}(1 - \epsilon)^{k} \epsilon^{T - k} \leq exp(-\frac{T}{2}(1 - 2\epsilon)^{2})$$</p><blockquote><p>证明这个式子需要用到Hoeffding不等式</p><p>假设伯努利分布的概率为 $p$ ，n次以后，k次满足的概率为</p><p>$$P(H(x) \leq k) = \sum_{i = 0}^{k}\begin{pmatrix} n \ i \end{pmatrix}p^{i}(1- p)^{n - i}$$</p><p>对 $\sigma &gt; 0, k = (p - \sigma)n$ 则有Hoeffding不等式</p><p>$$P(H(n) \leq (p - \sigma)n) \leq exp(-2\sigma^{2}n)$$</p><p>令 $\frac{T}{2} = (p - \sigma)n$ 易证明上式</p></blockquote><p>上面有一个非常重要的假设，基学习器的误差必须相互独立，但是实际应用中，通常是不独立的，在准确性和多样性上总会存在冲突，所以集成学习的核心就是产生并结合“好而不同”的基学习器。</p><p>集成学习由于包含了多个学习器，所以即便个体具有很好的可解释性，但是集成后仍然是黑箱模型，难以直接解释，所以也衍生了一些二次学习的方法（如通过集成学习选择特征，然后再构造单模型）</p><p>当前主流的集成学习包含两大类</p><ul><li>基学习器之间存在强依赖关系，需要串行生成的序列化方法，代表为Boosting，主要关注降低偏差</li><li>基学习器之间不存在依赖关系，可同时生成的并行化方法，代表是Bagging，主要关注降低方差</li></ul><h2 id="学习器结合"><a href="#学习器结合" class="headerlink" title="学习器结合"></a>学习器结合</h2><h3 id="平均法"><a href="#平均法" class="headerlink" title="平均法"></a>平均法</h3><ul><li>简单平均法</li></ul><p>$$H(x) = \frac{1}{T}\sum_{i = 1}^{T}h_{i}(x)$$</p><ul><li>加权平均法</li></ul><p>$$H(x) = \sum_{i = 1}^{T}w_{i}h_{i}(x)$$</p><p>显然，简单平均法就是 $w_{i} = \frac{1}{T}$​ 的特例。</p><p>简单平均由于涉及数值运算，所以比较适合数值型输出，当个体学习器差异不大的时候，用简单平均法，单差异较大时，使用加权平均法。</p><h3 id="投票法"><a href="#投票法" class="headerlink" title="投票法"></a>投票法</h3><ul><li>绝对多数投票法</li></ul><p>当某标记过半时，则预测为该标记，否则拒绝预测。这种拒绝预测的机制，对于可靠性要求较高的学习任务是一个很好的方法，但是当学习任务必须要一个预测结果时，这种方法就不太好。</p><p>$$H(x) = \begin{cases}<br>c_{j}, &amp; \text{if} \sum_{i = 1}^{T}h_{i}^{j}(x) &gt; 0.5\sum_{k = 1}^{N}\sum_{i = 1}^{T}h_{i}^{k}(x)\<br>\text{reject}, &amp; \text{otherwise}<br>\end{cases}$$</p><ul><li>相对多数投票法</li></ul><p>预测为得票数最多的标记，当同时多个标记获得最高，则随机选择。</p><p>$$H(x) = c_{arg max_{j}\sum_{i = 1}^{T}h_{i}^{j}(x)}$$</p><ul><li>加权投票法</li></ul><p>加权投票就是相对多数投票法更加泛化一种方法</p><p>$$H(x) = c_{arg max_{j}\sum_{i = 1}^{T}w_{i}h_{i}^{j}(x)}$$</p><h3 id="学习法"><a href="#学习法" class="headerlink" title="学习法"></a>学习法</h3><p>当学习器很多时候，还可以使用学习法来进行集成，即训练另一个次级学习器来结合基学习器。最具代表性的为Stacking算法。</p><p>Stacking算法先从初始数据集训练初级学习器，然后生成一个新数据集用来训练次级学习器，在这新数据集中，初级学习器的输出被当作样例输入特征，而初始样本的标记仍然作为样例标记。</p><p>通常使用多响应线形回归作为次级学习算法。</p><h2 id="Boosting"><a href="#Boosting" class="headerlink" title="Boosting"></a>Boosting</h2><h3 id="Boosting的训练方法"><a href="#Boosting的训练方法" class="headerlink" title="Boosting的训练方法"></a>Boosting的训练方法</h3><p>Boosting是一种串行学习的方法，大概逻辑是先训练一个分类器，然后基于学习器对训练样本进行调整，让先前学错的样本得到更多的关注，然后基于调整后的样本分布来寻来呢下一个基学习器，直至达到设定的基学习器数量，最终对所有的基学习器进行加权结合。</p><p>这种通过改变训练样本权重，学习多个分类器的方法，也叫提升方法，Boosting中最具代表性的算是AdaBoost。</p><p>基于Boosting的方法，AdaBoost需要解决两个问题：</p><ol><li>如何在每一轮改变训练数据的权值和概率分布</li><li>如何将弱分类器组合成强分类器</li></ol><p>AdaBoost的解决方法是，对于第一个问题，提高在前一轮中分类错误的分类样本的权值，降低被正确分类的样本的权值，这就像一个很大的数据集被很多分类器分而治之。对于第二个问题，AdaBoost选择采用加权多数表决的方法，对于误差率小的分类器，权值更大，在表决中作用更大，对于误差率大的分类器，权值更小，在表决中作用更小。</p><h3 id="AdaBoost算法"><a href="#AdaBoost算法" class="headerlink" title="AdaBoost算法"></a>AdaBoost算法</h3><h4 id="权重更新"><a href="#权重更新" class="headerlink" title="权重更新"></a>权重更新</h4><p>AdaBoost可以理解为一种加性模型，即集成方法是一基学习器的线形组合，可以表示为</p><p>$$H(x) = \sum_{t = 1}^{T}\alpha_{t}h_{t}(x)$$</p><p>第一个基分类器 $h_{1}$ 是直接在初始数据上学习基学习算法，然后可以迭代的获得 $\alpha_{t}$ 和 $h_{t}$ 。</p><p>为了让该迭代过程可以顺利进行，需要定义一个损失函数（指数损失函数），当 $f(x)$ 和 $H(x)$ 符号相同是，损失很小，反之会很大。</p><p>$$loss_{exp}(H|D) = E_{x \backsim D}[e^{-f(x)H(x)}]$$</p><p>把 $H(x)$ 带入上式得</p><p>$$\begin{align} loss_{exp}(\alpha_{t}h_{t}|D_{t})<br>&amp; = E_{x \backsim D_{t}}[e^{-f(x)\alpha_{t}h_{t}(x)}] \\<br>&amp; = E_{x \backsim D_{t}}[e^{-\alpha_{t}} \cdot (f(x) = h_{t}(x)) + e^{\alpha_{t}} \cdot (f(x) \neq h_{t}(x))] \\<br>&amp; = e^{- \alpha_{t}}P_{x \backsim D_{t}}(f(x) = h_{t}(x)) + e^{\alpha_{t}}P_{x \backsim D_{t}}(f(x) \neq h_{t}(x)) \\<br>&amp; = e^{-\alpha_{t}}(1 - \epsilon_{t}) + e^{\alpha_{t}}\epsilon_{t}<br>\end{align}$$</p><p>令上式对 $\alpha_{t}$ 的偏导为0则有</p><p>$$\alpha_{t} = \frac{1}{2}\ln(\frac{1 - \epsilon_{t}}{\epsilon_{t}})$$</p><p>这就是分类器的每次权重更新公式。</p><h4 id="概率分布变化"><a href="#概率分布变化" class="headerlink" title="概率分布变化"></a>概率分布变化</h4><p>AdaBoost是希望在 $H_{t - 1}$ 之后的 $h_{t}$ 能纠正 $H_{t - 1}$ 的错误，可以写成最小化如下目标函数</p><p>$$loss_{exp}(H_{t - 1} + h_{t}|D) = E_{x \backsim D}[e^{-f(x)(H_{t - 1}(x) + h_{t}(x)}]$$</p><p>理想的基学习器</p><p>$$\begin{align} \ h_{t}(x)<br>&amp; = arg min_{h} loss_{exp}(H_{t - 1} + h | D) \\<br>&amp; = arg max_{h} E_{x \backsim D}[\frac{e^{-f(x)H_{t - 1}(x)}}{E_{x \backsim D}[e^{-f(x)H_{t - 1}(x)}]}f(x)h(x)] \\<br>&amp; = arg min_{h} E_{x \backsim D_{t}}[\cdot (f(x) \neq h(x)]<br>\end{align}$$</p><p>即，理想的 $h_{t}$ 是在分布 $D_{t}$ 下最小化分类误差，于是 </p><p>$$D_{t + 1}(x) = \frac{D(x)e^{-f(x)H_{t}(x)}}{E_{x \backsim D}[e^{-f(x)H_{t}(x)}]}$$</p><p>这就得到了样本分布的更新公式</p><h3 id="Boosting学习"><a href="#Boosting学习" class="headerlink" title="Boosting学习"></a>Boosting学习</h3><p>前面有说Boosting集成的方法是串联基学习器，让每个学习器都好而不同，这里的不同为对特定的样本分布进行学习，如何获得不同的样本有两种方法，分别是</p><ul><li>重赋权法：训练的每一轮根据样本分布为每个训练样本重新赋予一个权重</li><li>重采样法：训练的每一轮根据样本分布对训练集重新采样进行学习</li></ul><p>为了保证每次学习都是好的，Boosting算法在训练的时候每一轮都需要检查当前的基学习器是否满足基本条件（也就是说当前分类器是否比随机猜测的效果好 $\epsilon &lt; 0.5$ ），如果不满足，则抛弃当前基学习器。对于重赋权法可能会出现基学习器不足T的情况，最后集成的基学习器远远不足设定的T，若采用重采样法则可获得重启动以避免早停。</p><h2 id="Bagging"><a href="#Bagging" class="headerlink" title="Bagging"></a>Bagging</h2><h3 id="Bagging学习方法"><a href="#Bagging学习方法" class="headerlink" title="Bagging学习方法"></a>Bagging学习方法</h3><p>相比Boosting，Bagging的逻辑会简单一些，它没有复杂的权重更新和分布变化。Bagging基于自助采样法获取每次都训练样本，如对于一个含有 M 数量都样本，每次都有放回的采样 m 和样本进行训练，经过 T 次采样后，可以获得 T 个基训练器，再将这些基训练器进行结合。</p><p>结合的时候，对于分类问题，Bagging采用少数服从多数的简单投票法，如果两个类的票数相同时，则随机选择一个。对于回归问题，则采用简单平均的方法。</p><p>这种简单投票和简单平均的方法，让整个集成模型的计算复杂度可以同阶等于训练一个单分类器的计算复杂度，因为集成模型的计算复杂度为（ $T(O(m) + O(s))$，前者是基学习器的复杂度，后者是投票或平均的复杂度，后者 T 相对样本而言会小很多）。</p><p>而且，自助采样还有一个优点，每次基学习器的样本只使用了63.2%（有放回抽样的会再次被抽到的概率）的初始训练集样本，剩下的36.8%的样本可用作验证集来提高模型的泛化性能，这种泛化能力非常有用，比如对于决策树基模型，可以用来剪枝，对于神经网络基模型，可以用来辅助早停。从偏差和误差的角度看，Bagging也更加关注方差，在有样本扰动的情况下集成的模型也更加稳定。</p><h3 id="随机森林"><a href="#随机森林" class="headerlink" title="随机森林"></a>随机森林</h3><p>随机森林（Random Forest， RF）是以决策树为基构建的Bagging集成，同时在此基础上引入了随机属性的选择。即使用自助采样去获得样本，同时使用随机采样去获得属性。</p><p>决策树的属性划分是在所有属性集合中去选择一个最优属性（选择方法有信息增益、信息增益率、基尼系数等，详细选择方法可参考 <a href="http://booleflow.com/2021/01/16/jue-ce-shu-yuan-li-jie-xi/">决策树原理解析</a> ）。而在RF中，先在属性集合中随机选择一个子集，然后从这个子集中选择最优属性，推荐的子集数量为2的对数（$k = \log_{2}d$）。</p><p>由于除了样本选择，RF还引入了属性选择，所以与一般Bagging相比，RF在训练开始时，性能稍差，毕竟单个子集属性构成的决策树性能会较低，但是随着基学习器数量的增加，RF的泛化误差会比一般的Bagging更低。</p><h2 id="集成学习的多样性"><a href="#集成学习的多样性" class="headerlink" title="集成学习的多样性"></a>集成学习的多样性</h2><h3 id="误差-分歧分解"><a href="#误差-分歧分解" class="headerlink" title="误差-分歧分解"></a>误差-分歧分解</h3><p>前面花很大篇幅说来集成学习“好而不同”中的“好”，下面从数学的角度看“不同”对分类误差的影响。</p><p>对于单个分类器，其分歧可以表示为</p><p>$$A(h_{i}|x) = (h_{i}(x) - H(x))^{2}$$</p><p>集成的分歧可以表示为</p><p>$$\bar{A}(h_{i}|x) = \sum_{i = 1}^{T}w_{i}A(h_{i}|x) = \sum_{i = 1}^{T}w_{i}(h_{i}(x) - H(x))^{2}$$</p><p>这里的分歧表示了学习器在样本 $x$ 上的不一致性，一定程度上可以表示多样性。</p><p>个体学习器 $h_{i}$ 和集成 $H$ 的平方误差可以表示为</p><p>$$E(h_{i}|x) = (f(x) - h_{i}(x))^{2}$$</p><p>$$E(H|x) = (f(x) - H(x))^{2}$$</p><p>那</p><p>$$\bar{A}(h_{i}|x) = \sum_{i = 1}^{T}w_{i}E(h_{i}|x) - E(H|x) = \bar{E}(h_{i}|x) - E(H|x)$$</p><p>所以</p><p>$$E(H|x) = \bar{E}(h_{i}|x) - \bar{A}(h_{i}|x)$$</p><p>也就说最后 $H$ 的误差受到 $h_{i}$ 的误差和集成的分歧的影响，个体学习器误差越小，分歧越大，则最后的误差越小。</p><h3 id="多样性度量"><a href="#多样性度量" class="headerlink" title="多样性度量"></a>多样性度量</h3><p>典型的多样性度量方法是比较两两相似/不相似，常用的方法有，对于如下分布（a + b + c + d = m）</p><table><thead><tr><th>预测列联表</th><th>$h_{i} = +1$</th><th>$h_{i} = -1$</th></tr></thead><tbody><tr><td>$h_{j} = +1$</td><td>a</td><td>c</td></tr><tr><td>$h_{j} = -1$</td><td>b</td><td>d</td></tr></tbody></table><ul><li>不合度量</li></ul><p>$$dis_{ij} = \frac{b + c}{m}$$</p><ul><li>相关系数</li></ul><p>$$p_{ij} = \frac{ad - bc}{\sqrt{(a + b)(a + c)(c + d)(b + d)}}$$</p><ul><li>Q-统计量</li></ul><p>$$Q_{ij} = \frac{ad - bc}{ad + bc}$$</p><ul><li>k- 统计量</li></ul><p>$$p_{1} = \frac{a + d}{m}$$</p><p>$$p_{2} = \frac{(a + b)(a + c) + (c + d)(b + d)}{m^{2}}$$</p><p>$p_{1}$ 为两个分类器取得一致的概率，$p_{2}$ 为两个分类器偶然达成一致的概率。</p><p>$$k = \frac{p_{1} + p_{2}}{1 - p_{2}}$$</p><p>若 $h_{i}$ 和 $h_{j}$ 完全一致，则 $k = 1$，如果仅是偶然一致，$k = 0$。</p><h3 id="多样性增强"><a href="#多样性增强" class="headerlink" title="多样性增强"></a>多样性增强</h3><p>增强多样性，一般的思路是对输入样本、输入属性、输出表示和算法参数进行扰动。</p><p>前面所说的AdaBoost对样本权重的变化就属于数据样本扰动，RF对样本的不放回抽样和属性的随机选择就分别数据样本扰动和属性扰动。</p><p>输出扰动即对输出标记作变动，如随机改变一些样本的标记，或将分类输出转化为回归输出等。</p><p>算法扰动比如在神经网络中，初始权值、droupout、正则等都属于这一大类。</p><h2 id="集成学习的优点"><a href="#集成学习的优点" class="headerlink" title="集成学习的优点"></a>集成学习的优点</h2><p>集成学习至少有三个优点</p><ol><li>统计学角度：多学习器可以获得一个相对稳定的假设空间，以减少泛化误差</li><li>计算角度：集成可降低陷入局部最优的可能性</li><li>表示角度：多学习器可以让假设空间有所扩大，有可能学到更好的近似</li></ol><p>如下图所示</p><p><img src="benefits_of_integration.png"></p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>统计学习方法，李航，-第2版，–清华大学出版社，2019</p><p>机器学习，周志华，-第1版，–清华大学出版社，2016</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 集成学习 </tag>
            
            <tag> Boosting </tag>
            
            <tag> Bagging </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>决策树原理解析</title>
      <link href="2021/01/16/jue-ce-shu-yuan-li-jie-xi/"/>
      <url>2021/01/16/jue-ce-shu-yuan-li-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="决策树模型"><a href="#决策树模型" class="headerlink" title="决策树模型"></a>决策树模型</h2><p>决策树模型分为分类树和回归树，两者都是if-then的树形原理，最大的区别为，对于分类树，最后一层叶子结点才是分类标签，其他时候的结点都不是，而回归树不同，回归树的每一个结点都是待回归属性。直观如下图所示</p><p>![](decision_tr                                                                                                                        ee.png)</p><p>这里主要介绍决策分类树原理，回归树构造方式差不多。</p><p>决策树模型的逻辑是，从根节点出发，对实例的每一个特征进行判断，根据判断结果，将实例分配到其子节点中，此时，每个节点又对应着该特征的一个取值，如此递归的对实例进行判断和分配，直至将实例分配到叶子结点中，其基本楼诚遵循简单且直观的“分而治之”的策略。</p><p>本质而言，决策树模型是一个 if - then 的规则集合，根节点到叶子结点的每一条路径构建成了一条规则。这个规则有一个重要的性质——互斥且完备：</p><ul><li>完备性：每个实例<strong>都</strong>有一条规则路径所覆盖</li><li>互斥性：每个实例<strong>只</strong>有一条规则路径所覆盖</li></ul><p>构建决策树规则路径的依据是条件概率，这一条件概率分布定义在特征空间的一个划分上，决策树的路径就是一个划分单元，决策树分类时将该节点的实例强行分配到条件概率大的一个类别中。</p><h2 id="决策树学习"><a href="#决策树学习" class="headerlink" title="决策树学习"></a>决策树学习</h2><p>决策树学习的本质是从训练数据集中归纳出一组分类规则，这种决策规则有可能一个也没有，也可能有很多个，这时候需要选择一个与数据集矛盾较小的决策树规则，同时又需要很好的泛化效果。</p><p>决策树使用损失函数来表示这一目标，这个损失函数通常是正则化的极大似然函数。决策树的学习策略就是以损失函数为目标函数的最小化。由于从很多决策树中选择决策树是一个NP难问题（多项式复杂程度的非确定性问题，无法按部就班的直接求解，通常使用验证解的方式近似求解），所以决策树学习算法通常是递归的选择特征对数据集进行分割，以达到最好的分类结果。</p><p>学习算法原理：构造根节点，将所有训练数据集都放到根节点，选择一个最优特征，将训练数据集分割成子集，使得训练集在当前按条件下有最好的分类。如果这些子集已经可能很好的分类，那么构建叶节点，如果还不能很好的分类，继续对其分割，构造相应的结点，如此递归进行，直至所有训练数据集被基本正确分类，或者没有合适的特征为之。</p><p>经过以上过程，决策树可能对训练集有了很好的分类能力，但是对未知数据不一定同样有很好的分类效果，所以，为了避免过拟合现象，还需要对生成的树进行剪枝，将树变得更简单，以实现更好的泛化能力。</p><p>从上面可以看出，一个决策树学习算法需要包含特征选择、决策树生成和决策树剪枝过程。常用的学习算法有ID3（Quinlan 在1986年提出），C4.5（Quinlan 在1993年提出）和CART（Breiman 在1984年提出）。</p><h2 id="特征选择"><a href="#特征选择" class="headerlink" title="特征选择"></a>特征选择</h2><h3 id="特征选择问题"><a href="#特征选择问题" class="headerlink" title="特征选择问题"></a>特征选择问题</h3><p>特征选择的目的是选择具有分类能力的特征，如果利用一个特征进行分类与随机分类没有区别，则这个特征就不具备分类能力。</p><p>选择哪个特征更好，这就需要一个选择特征的准则，通常选择特征的准则有信息增益与信息增益比（也叫信息增益率）。</p><p>在介绍信息增益前，先理解熵与条件熵的概念。</p><h3 id="熵"><a href="#熵" class="headerlink" title="熵"></a>熵</h3><p>熵常用在信息论和概率统计中，是一种表示随机变量不确定性的度量。</p><p>设 $X$ 为一个取有限个值的离散随机变量，其概率分布为：</p><p>$$P(X = x_{i}) = p_{i}, i = 1, 2, \cdots, n$$</p><p>则随机变量 $X$ 的熵 为</p><p>$$H(X) = -\sum_{i = 1}^{n}p_{i}\log p_{i}$$</p><p>从上式能看出熵与 $X$  的取值无关，只依赖于 $X$ 的分布，所以 $X$ 的熵也可以写为</p><p>$$H(p) = -\sum_{i = 1}^{n}p_{i}\log p_{i}$$</p><p>对于上式有：</p><ul><li>若 $p_{i} = 0$ ，则定义 $0 \log 0 = 0$。</li><li>对数以 2 为底熵的单位为比特（bit）</li><li>对数以 e 为底熵的单位为纳特（nat）</li><li>易验证，$0 \leq H(p) \leq \log n$</li></ul><p>假设一个伯努利分布 $X$ ，</p><p>$$P(X = 1) = p, P(X = 0) = 1 - p, 0 \leq p \leq 1$$</p><p>熵为</p><p>$$H(p) = -p \log_{2} p - (1 - p) \log_{2} (1 - p)$$</p><p>显然，当 $p = \frac{1}{2}$ 时，$H(p) = 1$，熵最大，随机不确定性越大，当 $p = 0$ 或 $p = 1$ 时，熵最小。</p><h3 id="条件熵"><a href="#条件熵" class="headerlink" title="条件熵"></a>条件熵</h3><p>对于随机变量 $(X, Y)$ ，其联合概率分布为</p><p>$$P(X = x_{i}, Y = y_{i}) = p_{ij}, i = 1, 2, \cdots, n; j = 1, 2, \cdots, m$$</p><p>条件熵 $H(Y|X)$ 就表示在已知随机变量 $X$ 的条件下随机变量 $Y$ 的不确定性。定义在条件 $X$ 下 $Y$ 的条件概率分布的熵对 $X$ 的数学期望</p><p>$$H(Y|X) = \sum_{i = 1}^{n}P(X = x_{i})H(Y|X = x_{i})$$</p><p>信息增益就表示在得知特征 $X$ 的条件下类别 $Y$ 的不确定性程度。</p><h3 id="信息增益"><a href="#信息增益" class="headerlink" title="信息增益"></a>信息增益</h3><p>熵 $H(X)$ 与条件熵 $H(Y|X)$ 之差称为互信息，决策树学习中信息增益就等价于训练数据集中类与特征的互信息，对于训练数据集 $D$ 和特征 $A$ ，信息增益可以表示为</p><p>$$g(D, A) = H(D) - H(D|A)$$</p><p>注：前面说过，决策树使用正则化的极大似然函数来作为损失函数，此时的概率不是确定的，而是通过似然函数估计出来的，所以此时的熵 $H(D)$ 和条件熵 $H(D|A)$ 分别称为经验熵和经验条件熵。</p><p>信息增益的特征选择方法为：对训练集计算其每个特征的信息增益并比较大小，选择信息增益最大的特征。</p><p>信息增益的算法如下：</p><blockquote><p>输入：训练数据集 $D$ 和特征 $A$ </p><p>输出：特征 $A$ 对训练数据集 $D$ 的信息增益 $g(D, A)$</p><p>（1）设有 $k$ 个类 $C_{k}$ （$|C_{k}|$ 为 $C_{k}$ 的1范数，表示样本个数），计算数据集 $D$ 的经验熵 $H(D)$</p><p>$$H(D) = -\sum_{k = 1}^{K}\frac{|C_{k}|}{|D|} \log_{2} \frac{|C_{k}|}{|D|}$$</p><p>（2）计算特征 $A$ 对数据集 $D$ 的经验条件熵 $H(D|A)$</p><p>$$H(D|A) = \sum_{i = 1}^{n}\frac{|D_{i}|}{|D|}H(D_{i}) = - \sum_{i = 1}^{n}\frac{|D_{i}|}{|D|}\sum_{k = 1}^{K}\frac{|D_{ik}|}{|D_{i}|} \log_{2}\frac{|D_{ik}|}{|D_{i}|} $$</p><p>（3）计算信息增益</p><p>$$g(D, A) = H(D) - H(D|A)$$</p></blockquote><h3 id="信息增益比"><a href="#信息增益比" class="headerlink" title="信息增益比"></a>信息增益比</h3><p>以信息增益作为划分训练数据集的特征，存在偏向于选择取值较多的特征的问题，为了矫正这个问题，可以使用信息增益比。</p><p>$g_{R}(D, A) = \frac{g(D, A)}{H_{A}(D)}$</p><p>其中 $H_{A}(D) = -\sum_{i = 1}^{n}\frac{|D_{i}|}{|D|} \log_{2}\frac{|D_{i}|}{|D|}$ ，$n$ 为特征 $A$ 取值的个数。</p><p>信息增益比本质： 是在信息增益的基础之上乘上一个惩罚参数。特征个数较多时，惩罚参数较小；特征个数较少时，惩罚参数较大。</p><p>不过还是有一个缺点，信息增益比会偏向于选择取值较少的特征，所以出现一种表示样本纯度的方法。</p><h3 id="基尼系数"><a href="#基尼系数" class="headerlink" title="基尼系数"></a>基尼系数</h3><p>基尼系数的表示为</p><p>$$Gini(p) = \sum_{k = 1}^{K}p_{k}(1 - p_{k}) = 1 - \sum_{k = 1}^{K}p_{k}^{2}$$</p><p>显然对于二分类问题，基尼系数为</p><p>$$Gini(p) = 2p(1 - p)$$</p><p>对于给定一个样本集合D，其基尼系数为</p><p>$$Gini(D) = 1 - \sum_{k = 1}^{K}(\frac{|C_{k}|}{|D|})^{2}$$</p><p>同样，条件熵也可以定义为</p><p>$$Gini(D, A) = \sum_{v = 1}^{V}\frac{|D^{v}|}{|D|}Gini(D^{v})$$</p><p>直观而言， $Gini(D)$ 反应了从数据集 $D$ 中随机抽取两个样本，其类别标记不一致的概率，因此，$Gini(D)$ 越小，数据集的纯度越高。</p><h2 id="决策树的生成"><a href="#决策树的生成" class="headerlink" title="决策树的生成"></a>决策树的生成</h2><h3 id="ID3算法"><a href="#ID3算法" class="headerlink" title="ID3算法"></a>ID3算法</h3><p>ID3算法的核心是在决策树各个节点上应用信息增益准则选择特征，递归的构建决策树。</p><blockquote><p>输入：训练数据集 $D$ ，特征集 $A$ ，阈值 $\epsilon$ </p><p>输出：决策树 $T$ </p><p>（1）若 $D$ 中所有实例都属于同一个类 $C_{k}$ ，则 $T$ 为单节点树，将 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（2）若 $A = \emptyset$ ，则 $T$ 为单节点树，并将 $D$ 中的实例数最大的类 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（3）否则，计算特征 $A$ 对数据集 $D$ 的<strong>信息增益</strong>，选择信息增益最大的特征 $A_{g}$ </p><p>（4）如果 $A_{g}$ 的信息增益小于阈值 $\epsilon$ ，则置 $T$ 为单节点树，并将 $D$ 中实例数最大的类 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（5）否则，对 $A_{g}$ 的每一可能值 $a_{i}$ 依 $A_{g} = a_{i}$ 将 $D$ 划分为若干非空子集 $D_{i}$ ，将 $D_{i}$ 中实例数最大的类作为标记，构建子节点，由节点及其子节点构成树 $T$ ，返回 $T$ </p><p>（6）对第 $i$ 个子节点，以 $D_{i}$ 为训练集，以 $A - {A_{g}}$ 为特征集，递归调用 (1)~(5) ，得到子树 $T$ ，返回 $T$ </p></blockquote><h3 id="C4-5算法"><a href="#C4-5算法" class="headerlink" title="C4.5算法"></a>C4.5算法</h3><p>C4.5算法与ID3算法类似，只是使用信息增益比替换了信息增益。</p><blockquote><p>输入：训练数据集 $D$ ，特征集 $A$ ，阈值 $\epsilon$ </p><p>输出：决策树 $T$ </p><p>（1）若 $D$ 中所有实例都属于同一个类 $C_{k}$ ，则 $T$ 为单节点树，将 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（2）若 $A = \emptyset$ ，则 $T$ 为单节点树，并将 $D$ 中的实例数最大的类 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（3）否则，计算特征 $A$ 对数据集 $D$ 的<strong>信息增益比</strong>，选择信息增益比最大的特征 $A_{g}$ </p><p>（4）如果 $A_{g}$ 的信息增益比小于阈值 $\epsilon$ ，则置 $T$ 为单节点树，并将 $D$ 中实例数最大的类 $C_{k}$ 作为该节点的类标记，返回 $T$ </p><p>（5）否则，对 $A_{g}$ 的每一可能值 $a_{i}$ 依 $A_{g} = a_{i}$ 将 $D$ 划分为若干非空子集 $D_{i}$ ，将 $D_{i}$ 中实例数最大的类作为标记，构建子节点，由节点及其子节点构成树 $T$ ，返回 $T$ </p><p>（6）对第 $i$ 个子节点，以 $D_{i}$ 为训练集，以 $A - {A_{g}}$ 为特征集，递归调用 (1)~(5) ，得到子树 $T$ ，返回 $T$ </p></blockquote><h3 id="CART分类树算法"><a href="#CART分类树算法" class="headerlink" title="CART分类树算法"></a>CART分类树算法</h3><p>CART算法（classification and regression tree），是一种分类回归树，对于其分类能力而言，整个算法过程与ID3和C4.5相似，不过与ID3和C4.5不同的是，CART使用基尼系数(Gini index)来选择划分属性。</p><p>根据训练数据集，从根节点开始，递归的对每个节点进行操作，构成一个二叉决策树。</p><p>对于节点的训练数据集 $D$，计算现有特征对该数据集的基尼系数，此时，每个特征 $A$ 的每个取值 $a$ ，都可以分割为 $D^{1}, D^{2}$ 两部分，然后计算 $A = a$ 时的基尼系数。在所有可能的特征 $A$ 和所有可能的切分点 $a$ 中，选择基尼系数最小的特征及其对应的切分点作为最优特征与最优切分点。根据最优特征与最优切分点，从现在节点生成两个子节点，将该节点的训练数据集 $D$ 依特征分配到两个子节点中去。</p><p>如此递归到进行，直到满足停止条件，生成CART分类决策树。</p><p>算法的停止条件有</p><ul><li>节点中的样本个数小于设定阈值</li><li>样本集的基尼系数小于设定阈值</li><li>没有更多特征可分</li></ul><h3 id="CART回归树算法"><a href="#CART回归树算法" class="headerlink" title="CART回归树算法"></a>CART回归树算法</h3><p>CART算法既可以用于创建分类树，也可以用于创建回归树，分类是是选择最优的特征，回归实质上就是在特征维度对样本空间进行划分，不过这种特征划分就像前面所说的NP难问题，所以采用启发式的方法解决。典型CART回归树的目标函数为</p><p>$$\sum_{x_{i} \in R_{m}}(y_{i} - f(x_{i}))^{2}$$</p><p>谷，求解最优的切分变量 $j$ 和最优分点 $s$ 就变成求解下面的目标函数</p><p>$$\underset{j, s}{\min}[\underset{c_{1}}{\min}\sum_{x_{i} \in R_{1}(j, s)}(y_{i} - c_{1})^{2} + \underset{c_{2}}{\min}\sum_{x_{i} \in R_{2}(j, s)}(y_{i} - c_{2})^{2}]$$</p><p>所以我们只要遍历所有特征的的所有切分点，就能找到最优的切分特征和切分点。最终得到一棵回归树。</p><h2 id="决策树的剪枝"><a href="#决策树的剪枝" class="headerlink" title="决策树的剪枝"></a>决策树的剪枝</h2><p>决策树生成算法递归的生成决策树，理论上可以分类任何的训练数据，但对未知的测试数据分类很可能不准确，即过拟合，需要对决策树进行简化，去掉一些子树或叶节点，即剪枝。</p><p>决策树剪枝对基本策略分为预剪枝和后剪枝。</p><ul><li>预剪枝：在决策树生成过程中，对每个节点在划分前先进行估计，若当前划分不能带来决策树泛化能力的提升，则停止划分。</li><li>后剪枝：先从训练集生成一颗完整的决策树，然后自下而上的对非叶节点进行考察，若将该节点对应的子树替换成叶节点能提高泛化性能，则进行替换。</li></ul><p>预剪枝让很多分支都不会出现，这不仅降低了过拟合的风险，还降低了模型训练过程中的计算开销，但是有些分支的当前划分虽不能提高泛化性能，甚至使得泛化性能下降，但是后续的划分却有可能导致新能提升，所以预剪枝同时也带来的欠拟合的风险。</p><p>后剪枝的欠拟合风险相较于预剪枝而言会很小，泛化性能通常也优于预剪枝，但后剪枝是在生成一颗完全决策树后自底向上进行的，因此训练开销上比预剪枝大很多。</p><h2 id="附录"><a href="#附录" class="headerlink" title="附录"></a>附录</h2><h3 id="附录1-贷款申请样本数据表"><a href="#附录1-贷款申请样本数据表" class="headerlink" title="附录1: 贷款申请样本数据表"></a>附录1: 贷款申请样本数据表</h3><table><thead><tr><th>ID</th><th>年龄</th><th>有工作</th><th>有自己的房子</th><th>信贷情况</th><th>类别</th></tr></thead><tbody><tr><td>1</td><td>青年</td><td>否</td><td>否</td><td>一般</td><td>否</td></tr><tr><td>2</td><td>青年</td><td>否</td><td>否</td><td>好</td><td>否</td></tr><tr><td>3</td><td>青年</td><td>是</td><td>否</td><td>好</td><td>是</td></tr><tr><td>4</td><td>青年</td><td>是</td><td>是</td><td>一般</td><td>是</td></tr><tr><td>5</td><td>青年</td><td>否</td><td>否</td><td>一般</td><td>否</td></tr><tr><td>6</td><td>中年</td><td>否</td><td>否</td><td>一般</td><td>否</td></tr><tr><td>7</td><td>中年</td><td>否</td><td>否</td><td>好</td><td>否</td></tr><tr><td>8</td><td>中年</td><td>是</td><td>是</td><td>好</td><td>是</td></tr><tr><td>9</td><td>中年</td><td>否</td><td>是</td><td>非常好</td><td>是</td></tr><tr><td>10</td><td>中年</td><td>否</td><td>是</td><td>非常好</td><td>是</td></tr><tr><td>11</td><td>老年</td><td>否</td><td>是</td><td>非常好</td><td>是</td></tr><tr><td>12</td><td>老年</td><td>否</td><td>是</td><td>好</td><td>是</td></tr><tr><td>13</td><td>老年</td><td>是</td><td>否</td><td>好</td><td>是</td></tr><tr><td>14</td><td>老年</td><td>是</td><td>否</td><td>非常好</td><td>是</td></tr><tr><td>15</td><td>老年</td><td>否</td><td>否</td><td>一般</td><td>否</td></tr></tbody></table><h3 id="附录2-使用信息增益选择最优特征"><a href="#附录2-使用信息增益选择最优特征" class="headerlink" title="附录2: 使用信息增益选择最优特征"></a>附录2: 使用信息增益选择最优特征</h3><p>对附录1中的数据D，根据信息增益选择最优特征，那首先计算经验熵 $H(D)$.</p><p>$$H(D) = - (\frac{9}{15}log_{2}\frac{9}{15} + \frac{6}{15}log_{2}\frac{6}{15}) = 0.971$$</p><p>以 $A_{1}, A_{2}, A_{3}, A_{4}$ 分别表示年龄，有工作，有自己房子和信贷情况，可以得到</p><p>$$g(D, A_{1}) = H(D) - [\frac{5}{15}H(D_{1}) + \frac{5}{15}H(D_{2}) + \frac{5}{15}H(D_{3})] = 0.083$$</p><p>其中 $D_{1}, D_{2}, D_{3}$ 分别为取值为青年、中年、老年的样本。</p><p>类似可得</p><p>$$g(D, A_{2}) = H(D) - [\frac{5}{15}H(D_{1}) + \frac{10}{15}H(D_{2})] = 0.324$$</p><p>$$g(D, A_{3}) = 0.420$$</p><p>$$g(D, A_{4}) = 0.363$$</p><p>可得 $A_{3}$ 信息增益最大，为最优特征。</p><h3 id="附录3-使用基尼系数选择最优特征和最优切割点"><a href="#附录3-使用基尼系数选择最优特征和最优切割点" class="headerlink" title="附录3: 使用基尼系数选择最优特征和最优切割点"></a>附录3: 使用基尼系数选择最优特征和最优切割点</h3><p>以 $A_{1}, A_{2}, A_{3}, A_{4}$ 分别表示年龄，有工作，有自己房子和信贷情况</p><p>以 1，2，3 表示青年，中年和老年</p><p>以 1，2 表示有工作和有自己房子的是和否</p><p>以 1，2，3 表示信贷情况非常好，好喝一般</p><p>则</p><p>$$Gini(D, A_{1} = 青年) = \frac{5}{15}(2 \times \frac{2}{5} \times (1 - \frac{2}{5})) + \frac{10}{15}(2 \times \frac{7}{10} \times (1 - \frac{7}{10})) = 0.44$$</p><p>$$Gini(D, A_{1} = 中年) = 0.48$$</p><p>$$Gini(D, A_{1} = 老年) = 0.44$$</p><p>$$Gini(D, A_{2} = 有工作) = 0.32$$</p><p>$$Gini(D, A_{3} = 有自己房子) = 0.27$$</p><p>$$Gini(D, A_{4} = 非常好) = 0.36$$</p><p>$$Gini(D, A_{4} = 好) = 0.47$$</p><p>$$Gini(D, A_{4} = 一般) = 0.32$$</p><p>得</p><p>所有特征中划分中，$Gini(D, A_{3} = 有自己房子) = 0.27$ 最小，所以 $A_{3}$ 为最优特征，是有自己房子为最优切分点。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>统计学习方法，李航，-第2版，–清华大学出版社，2019</p><p>机器学习，周志华，-第1版，–清华大学出版社，2016</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 决策树 </tag>
            
            <tag> 熵 </tag>
            
            <tag> 信息增益 </tag>
            
            <tag> 信息增益比 </tag>
            
            <tag> 基尼系数 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《赢》</title>
      <link href="2021/01/02/ying/"/>
      <url>2021/01/02/ying/</url>
      
        <content type="html"><![CDATA[<p><strong>《赢》，杰克·韦尔奇 苏茜·韦尔奇著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><hr><p>◆ 第1章 使命和价值观</p><p>使命和价值观不只是宏观的定义，不是大字标语，是实际工作中的准则，是制定业务目标时的方向，是遇到问题抉择时的优先级。如果一个公司有多条价值观，那最好对它们也排个优先级，如果没有，那对员工遇到问题需要抉择时就没有指导作用了。</p><blockquote><p>商学院也是制造混乱的根源之一，它们经常让学生写文章，阐述使命的含义，然后对价值观进行讨论。这其实是一种极其无用的训练方法，毫无针对性。许多公司也这样来培训他们的高层管理人员，通常的做法是杜撰一条听起来很崇高的标语，并悬挂在公司大厅里。</p></blockquote><hr><p>这很像OKR中的O，设定一个目标，这个目标不是容易实现的，但是分解到具体的路径上，似乎又是可能的。并且在整个公司内部，是透明的，大家都清楚的知道要做什么，遇到问题优先级是什么。不过这时候领导人需要极高的判断力，因为领导的O定偏了，那就整个方向都偏了。</p><blockquote><p>1981—1995年，我们提出的目标是成为“世界上最有竞争力的企业”，让公司的每个业务领域都能在市场上占据第一名或第二名的位置，任何不能达到该要求的业务都必须整改、出售或关闭。</p></blockquote><hr><p>大公司需要建立一个自下而上通道，就像一栋楼的电梯，任何员工不必真的到达任何一层去影响公司结构，但是任何领导和员工都会坐电梯，在电梯里的言论是自由的，员工在这里亲耳听到公司的决策，领导在这里接受一线的声音。</p><blockquote><p>但在规模较大的公司里，听取多方意见就要困难得多。</p></blockquote><hr><p>国内一家大型互联网公司内部结构也有一点这种感觉，赚钱的业务与花钱的业务一定要自上而下的统一在一起，而且CEO不能一边倒。</p><blockquote><p>在90年代的绝大部分时间里，安达信不过是一家自己同自己较劲的公司。咨询部门一直在补贴审计部门，当然他们并不乐意这样做。同样，你可以确信审计部门对于咨询部门那种虚张声势的作风也不感冒。面对如此矛盾的状况，大家该如何回答企业的根本问题呢？“我们的使命究竟是什么？”“什么样的价值观才是最重要的？”“我们应当采取什么样的行动纲领？”员工岗位不同，他们的答案也迥然相异。</p></blockquote><hr><p>◆ 第2章 坦诚</p><p>想到机器学习中的聚类算法，让类内的相关性很强，让类间的相关性很弱。一个优秀的公司文化是让公司内的员工信奉同一个文化价值观，奔着相同的目标，尽可能达到很好的相关性，体会公司归属感带来的优越性。</p><blockquote><p>请先忘记外界的竞争吧，因为你最大的敌人就是企业内部人与人之间不良的交往方式。</p></blockquote><hr><p>坦诚直接对公司的发展来说是好事，因为它降低沟通成本，提升效率，让很多业务变得透明。可是对于个人来说可能并非全是好事，作者是美国人，在美国人看来，直截了当可能比较习以为常。但在国内，沟通是一门艺术，千万不要小觑说话的力量。</p><blockquote><p>我的老板们经常告诫我不要过分直率。现在，我在GE的生涯结束了，但我要告诉你，是坦诚精神帮助GE获得了巨大的成功。</p></blockquote><hr><p>◆ 第3章 考评</p><p>我们都在追求更高的回报，可是不管是高管，经理人还是普通员工，想想自己的薪水，自己真的为企业创造了这么多的价值吗，如果自己是老板，愿意为当下自己做的事开出什么样的价格。</p><blockquote><p>水平中等的孩子则要改进自己的弱项，前进一步，有时候他们做到了，并且提高了整个球队的水平。而那些不能入选的孩子通常会转移到其他的运动、嗜好之中，寻找自己喜爱和擅长的别的项目。不是人人都能够成为伟大的棒球手，也不是每个伟大的棒球手都能够成为著名的医生、计算机程序员、木匠、音乐家或者诗人。我们每一个人都有自己所擅长的方面，而我也坚信，当我们找到自己最适合做的事情时，将是最快乐、最满足的。</p><p>在体育竞技场上是这样，在商业竞技场上也同样如此。</p><p>憎恨以及不憎恨该制度的原因</p><p>我可以在下面几页中详细解释很多人喜爱区别考评制度的各种原因，可是恰恰相反，我将要列出对这个制度提出的最常见的批评。</p></blockquote><hr><p>◆ 第5章 领导力</p><p>员工的成功，是让老板更成功，老板的成功，是让所有员工能成功。</p><blockquote><p>在你成为领导者以前，成功只同自己的成长有关。</p><p>当你成为领导者以后，成功都同别人的成长有关。</p></blockquote><hr><p>为一件已经成功或失败的事寻找理由并不是什么高明的做法，因为在混沌的世界里，为一件已经发生了的事找理由并不难，难的是通过已知预测未知。红袜队的确是赢了，那么回测这种赢的逻辑，下一年赢的会是谁？</p><blockquote><p>当波士顿红袜队终于打破了86年的魔咒，赢得职业棒球联赛的冠军时，美国人随便打开电视或者翻开报纸，都能看到关于为什么2004年是“红袜年”的事后分析。到处都充满了预示，从中场外野手约翰尼·戴蒙的发型到月食的出现！</p></blockquote><hr><p>在一个未知的领域，因为自己缺乏判别的标准，很容易被人忽悠，所以我们需要至少一技之长用以傍身，多技扩展认知地图。</p><blockquote><p>“我们会认真考虑这个问题的。”他们向我保证。我是个无知的外行，爱管闲事罢了，他们只需要稍微抚慰我一番。</p></blockquote><hr><p>◆ 第6章 招聘</p><p>不管什么时候都需要控制住自己的情绪，同时考虑到他人的情绪，找到自己的位子，让别人信赖。</p><blockquote><p>能够控制怒火、承受压力和挫折，或者反过来，在自己功成名就的美妙时刻，能够喜悦但不失谦逊地享受成功的乐趣。成熟的人知道尊重别人的情感，他们充满自信但并不傲慢无礼。</p></blockquote><hr><p>遭遇失败挫折以后一般都会有复盘，目的不是给每个人的失误下定义，是如何避免下次犯同样的错误，如何未雨绸缪。</p><blockquote><p>我特别喜欢那些曾经被完全击倒，却又能站起来，并且在下一个回合里能以更强的姿态出现的人。</p></blockquote><hr><p>不管是公司设定的，还是自己看到的，天花板的存在就已经限制的思维狂奔，定好方向不设限。</p><blockquote><p>一条简单的法则是：在招聘员工时，不要给他们提供职业生涯的“终极职位”，</p></blockquote><hr><p>◆ 第7章 人员管理</p><p>人力资源部致力于为企业建设更加有效的人员管理机制，很好奇人力资源部的绩效考核是如何的？</p><blockquote><p>牧师—父母型的人力资源负责人看得出，员工头脑中隐藏着某种等级观念——那是每家公司都有的无形的政治关系图。</p></blockquote><hr><p>非常优秀并且财务自由的人他们可能不需要金钱的奖励，但奖励他们金钱，是在另一个维度向大众赞扬他们的荣誉，因为在大众眼中，金钱在一定程度上成为了等价物。</p><blockquote><p>奖牌和公众的赞扬的确是不可或缺的。但如果没有金钱，这些东西的影响力会逊色不少。</p></blockquote><hr><p>每个人本身都是独一无二的，但在具体的角色上，没有人是不可替代的，企业愿意为自己支付的成本，就是替代自己所需要的成本。</p><blockquote><p>最理想的做法是，在明星离开的8小时内任命他的替代者。这个迅疾的行动会把信息明确传递给整个公司——没有人是公司离不开的，没有哪个个人能够凌驾于公司之上。</p></blockquote><hr><p>◆ 第10章 危机管理</p><p>很多名言都告诉我们不要在相同的地方摔倒两次，不过实际行动中，永远不会遇到相同的两种情况，所以要将已经犯过的错升华提炼为可转移的方法论。</p><blockquote><p>寻求免疫</p></blockquote><hr><p>不要抱着这样的想法，这次失败没关系，反正也是第一次做，下次好好做一个就行。相同的事情再次尝试的成本太高，勿走回头路。</p><blockquote><p>不要依赖痛苦的经验来增强你的免疫力——除非不得已而为之。</p></blockquote><hr><p>◆ 第11章 战略</p><p>谋定后动，把主线捋清楚以后就动，不要在心里把所有的可能全臆想一遍，到时候就无处下手了。</p><blockquote><p>如果你想赢，那么在涉及战略的时候，就要少点沉思，而敏于行动。</p></blockquote><hr><p>不管做什么都是一个选择的过程，不只是一个我们能直接意识到的人生决择，战略选择，早上几点起床，如何与人沟通，如何安排今天的晚饭等都是选择，就连写下这条感想，拟定大意是选择，如何表达是选择，连标点符号都是选择。只是我们在尽可能的让选择合理，结果可控。</p><blockquote><p>战略其实就是对如何开展竞争的问题做出清晰的选择。不管你的生意有多大，资金有多雄厚，你也不可能满足所有人的所有要求。</p></blockquote><hr><p>战略方向至少要是三维的。要有一定的长度，经常变动的方向不足以成为方向；要有一定的深度，在同行业之间形成竞争壁垒；要有一定的宽度，在资源范围内形成生态闭环。</p><blockquote><p>如果大方向对头，又有一定的宽度，则战略并不需要经常改变。</p></blockquote><hr><p>◆ 第13章 有机的成长</p><p>做一个件新的事，要让做事的人知道自己做的事是重要的，因为历史没做过，很容易彷徨，由内而外的动力和外部资源一样重要。</p><blockquote><p>首先，他们没有给新项目足够的投资，特别是对于业务第一线的人员。</p><p>其次，他们对新项目的前景和重要性宣传得太少。事实上，很多人不但没有为新项目的潜力欢呼，反而保持秘而不宣的态度。</p><p>最后，他们限制了新项目的自主权。</p></blockquote><hr><p>每天吃着互联网圈的瓜，给自己设定角色，想象自己遇到那种情况会怎么办，滴滴的客服，百度的公关，ofo的运营，多闪的产品经理，前面的事已经被决定，无法改变，那么从此刻开始，可以怎么做。</p><blockquote><p>通常情况下，你会发现自己没有从总部获得足够的资金，也没有得到最好的人手。你需要竭尽所能去战斗！</p></blockquote><hr><p>◆ 第14章 企业并购</p><p>股市中散户之所以亏损，在很大程度上也是受到这种心理的影响。最平常的就是都会有一个基准的预期，高了会跌下去，所以有点涨幅就卖掉，低了会拉起来，所以即使亏了很多也觉得很快会涨起来。卖和买的时候，明知道自己设置的值差成交价还有一段距离，但就是会很狂热的交易。</p><blockquote><p>我迫不及待地付给了他们3亿美元。</p><p>我究竟在想什么？</p><p>当然，我什么都没想。这就是狂热的力量。</p><p>在名义上，我们拥有这家公司，但是该公司的意志和目标却是完全独立的。</p><p>在接下来的几年中，我们艰难前行，试图与Intersil“合并”。通常，当我们提出建议，让CEO改进其运营体系，例如有关人力资源管理的时候，他会把我们扔在一边。“你们不懂这个行业，让我们自己干吧，你们只需要关心季末的利润就行了。”</p><p>客气点说，这种态度并不让人愉快，对经营也没有帮助。</p></blockquote><p>-–</p><p>并购的主要目的不是为了控制某一家公司，而是获得人才。收购者提供资源，让被收购者在符合收购者发展战略的主线上继续自己的业务深耕。这个大型公司内部孵化单独的攻坚项目类似，并购获得的机会比内部孵化更多，因为在取得成果前不需要付出成本，但也使得并购当时付出得更多。</p><blockquote><p>我们要与“征服者综合征”做斗争，要把并购想象成获得人才宝库的机会。</p></blockquote><hr><p>◆ 第15章 六西格玛</p><p>客户心理有预期，与预期相差越小，用户越满意，如果超出预期的部分能变成新的预期，那就是进化。</p><blockquote><p>六西格玛不是关于平均数的问题，而是关于方差或波动的问题，并且要在你与顾客的界面上进行改进。</p></blockquote><hr><p>◆ 第16章 合适的工作</p><p>国内这种方式并不一定可行，当窗户纸被捅破，后续做事就会有很多细腻的情感成分掺杂其中。</p><blockquote><p>拿着这个条件，我跟GE摊了牌，但最后还是听从公司的劝告留了下来。当然，达成的条件是GE需要把我的薪水涨到与竞争对手的开价同等的水平。</p></blockquote><hr><p>在已有岗位上努力工作，让自己变得有价值，在获得肯定晋升的同时，也是下一个工作的砝码，不要把工作看成是被企业家奴役压榨，这是我们实现自己价值的必然路径。</p><blockquote><p>如果你想寻找更好的工作，那么最快捷的方法就是在原先的岗位上干出出色的业绩。</p></blockquote><hr><p>◆ 第18章 糟糕的老板</p><p>受害者是因为某些事而处于被动地位而无法反击的托词，在精英面前，把自己表现为受害者得不到任何的同情，只会受到很多的轻视。</p><blockquote><p>不管遇到多么糟糕的老板，你都不能让自己表现为一名受害者。</p></blockquote><hr><p>◆ 第19章 工作与生活的平衡</p><p>眼中要有格局，不要贪图眼前的小利，看看今天的作为能为一年后自己带来什么，如果带不来本质的变化，那就把时间用来做更有用的事吧！</p><blockquote><p>他们把休假日全都攒起来，他们递交的单据显示，自己在节假日里有多少个半天或者全天用来加班；他们提醒老板和同事，公司有关于加班的规定；他们是打小算盘的专家，用自己的表现一再证明，他们来这里工作并不是出于兴趣或者热情，而只是在记录工作了多长时间。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 领导力 </tag>
            
            <tag> 杰克·韦尔奇 </tag>
            
            <tag> 苏茜·韦尔奇 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《这就是OKR：让谷歌、亚马逊实现爆炸性增长的工作法》</title>
      <link href="2021/01/02/zhe-jiu-shi-okr-rang-gu-ge-ya-ma-xun-shi-xian-bao-zha-xing-zeng-chang-de-gong-zuo-fa/"/>
      <url>2021/01/02/zhe-jiu-shi-okr-rang-gu-ge-ya-ma-xun-shi-xian-bao-zha-xing-zeng-chang-de-gong-zuo-fa/</url>
      
        <content type="html"><![CDATA[<p><strong>《这就是OKR：让谷歌、亚马逊实现爆炸性增长的工作法》，约翰·杜尔著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><hr><p>◆ 上篇 OKR的基本特征与实践</p><p>这里说OKR在小型，中型，大型企业中都能取得不错的效果，但是回到实际中，就和传统KPI对比，它能为组织结构带来了什么样的变化。OKR的透明能解决大企业多节点导致的信息损失问题，但透明也强迫战略执行一盘棋，是否能让业务之间像齿轮一样紧密咬合。小企业中人较少，员工可能每天都能和CEO交流，这样的情况下上下的目标都会比较明确，那OKR真的就会比KPI好吗？</p><blockquote><p>我们更需要一种可信任的工具，能够在曲折的前进道路上为我们指明方向，带我们走向创新。</p><p>在规模比较小的初创企业中，员工需要朝着共同的方向努力。对这些企业而言，OKR是一种生存工具。尤其是在科技行业，年轻的企业必须迅速成长。只有这样，才能在资本枯竭之前获得足够的后续发展资金。显然，结构化的目标可以给投资人提供一个衡量成功的标准：我们计划生产这款产品，并通过跟25位客户的沟通进一步明确了目标市场，同时也调研了他们愿意支付的价格。</p><p>在中等规模和快速扩张的组织中，OKR则是通用的执行语言。OKR明确了预期：需要（尽快）做什么，以及具体谁来执行。OKR让员工的垂直目标和水平目标都能够保持一致。</p><p>在大型企业中，OKR就像闪烁的路标，能够在不同部门的员工之间建立联系，赋予一线员工特定的自主权，让他们能够提出新的解决方案。</p></blockquote><hr><p>什么样的格局和魄力才能有这样的预期，这已经不是简单的逻辑推断可以确定的目标，不免想起是否从小到大能做得很稳，但难以突破，从大到小则会走得更快，但风险难估。</p><blockquote><p>按照一家赢利的科技公司的正常成长速度，100亿美元的收入意味着1000亿美元的市值。这是微软、IBM（国际商业机器公司）和英特尔三家公司市值的总和，这显然是一个比独角兽公司更稀有的存在。</p></blockquote><hr><p>◆ 第2章 OKR之父</p><p>表面上强调OKR和奖金激励分开，其实很难分开，它本身是度量员工能力的一种方式，领导在给员工评判绩效的时候潜意识已经使用了OKR，而且在人的意识里，越不想用，对决定的影响越大。</p><blockquote><p>为了鼓励员工承担风险，防止消极参与，最好将OKR和奖金激励分离开来</p></blockquote><hr><p>◆ 第3章 “粉碎行动”——英特尔公司的故事</p><p>从英特尔的OKR看出，部分人或团队在制定OKR时候可能过度的与其他方法进行了区分，相比国内常用的KPI，认为OKR是目标和实现路径，过于弱化数字的作用。其实英特尔的KR中基本上都有数字进行量化。</p><blockquote><p>在早些时候，也就是在第一次“粉碎行动”之后不久，鲍勃·诺伊斯和安迪·格鲁夫在圣何塞的凯悦嘉寓酒店举行了“粉碎行动”启动仪式。</p></blockquote><hr><p>在大型公司中，建立上下层的直梯很重要也很难，一是组织结构的复杂性铸起交流壁垒，二是人太多，每个人的认知场景不同。比较有效的可能是有一个定期面对面的机会，员工尽可能的陈述事实，然后提出自己力所能及的行动。</p><blockquote><p>那个工程师说的是对的，我们需要改变。</p></blockquote><hr><p>◆ 第4章 利器1：对优先事项的聚焦和承诺</p><p>O可能是不太容易量化的，但是可拆解的，拆解的目标是可衡量的，把所有的KR都完成了，O自然而然就可以完成。这样说来O其实也是可以量化的，只是难以单一量化。感觉就像在传统的绩效指标上加了一个定语。</p><blockquote><p>关键结果应该是明确的、具体的、可衡量的，产出和投入的组合（匹配）对其有所帮助。最后，完成所有关键结果的关键和前提是实现目标。</p></blockquote><hr><p>◆ 第5章 聚焦：Remind的故事</p><p>一定时期内最重要的事情只有一件，每个人都知道，但是我们的时间难免会被各种事情撕成碎片，时刻提醒自己需要聚焦的目标，以外界的强刺激来影响自律是一个好方法。</p><blockquote><p>OKR使我们聚焦于能够将公司提升至更高层次的事情，这给了我们巨大的帮助。</p></blockquote><hr><p>◆ 第7章 利器2：团队工作的协同和联系</p><p>协同的关键前提是理解，理解自己的同时理解别人，而理解别人首先需要了解别人。OKR的的透明正式解决了这个问题，同时梳理O和KR也能更好的理解自己。</p><blockquote><p>答案就在于聚焦的、透明的OKR。OKR将每个人的工作与团队工作、部门项目及整体的组织使命联系起来。</p></blockquote><hr><p>◆ 第12章 利器4：挑战不可能</p><p>承诺型目标与愿景型目标相互结合能稳步前进得更远，在解决固有工作的同时，留出20%的时间思考更大的格局，这一次的愿景型目标可能就是下一次的承诺型目标。</p><blockquote><p>谷歌将他们的OKR分为两类，一类称为承诺型目标，另一类称为愿景型（或挑战性）目标，二者有着本质的不同。</p></blockquote><hr><p>◆ 第13章 延展：谷歌浏览器的故事</p><p>从2000万到5000万，再到1.11亿，简单的文字之间已经能感觉到强大的战斗力，当对看似天方夜谭的目标进行拆解重塑，会发现原来潜力如此巨大。</p><blockquote><p>拉里和我最终将目标确定为1.11亿用户，这是一个堪称经典的挑战性目标。为了实现这个目标，我们必须重塑Chrome的商业模式，探索新的增长模式。我们再次被迫开始思考，我们需要什么样的方法来实现这个目标？2月份，我们扩展了与OEM（原始设备制造商）厂商的分销协议。3月，我们开展了“超快Chrome”营销活动，以提高产品在美国的认知度。5月，我们通过推出适用于OS X和Linux操作系统的浏览器，拓展了我们的目标用户。最后，我们的浏览器不再仅限于Windows平台的用户使用。</p><p>进入第三季度后，结果仍然不能确定。然而就在几周后，在第三季度末，我们的用户总数从8700万激增到1.07亿。而在这之后不久，我们就达到了1.11亿的周活跃用户，我们终于实现了我们的目标。</p></blockquote><hr><p>◆ 第14章 延展：YouTube的故事</p><p>上周刚复习完柯维的高效能人士七个习惯，巨石理论来源于其中要事第一部分，很多道理我们都明白，到实践时总会遇到更多的问题，不过庆幸的是，就像柯维所说，当我们的思维变化了，也就为质变创造了条件。</p><blockquote><p>“巨石理论”是由史蒂芬·柯维提出来的。假设你有几块石头，一堆鹅卵石和一些沙子，你的任务是尽可能地把所有东西都装进一个一加仑的广口瓶中。如果你先放沙子，再放入鹅卵石，那么再想放石头时你会发现瓶子已经没有空间留给它们了。然而，当你先放石头，再放鹅卵石，最后放沙子，你会发现一切如你所愿——沙子将石头之间的缝隙填满了。</p></blockquote><hr><p>2013年，那还是一个视频相对比较匮乏的时代，人们还愿意在观看上花费更多的时间，而现在，人们的时间被撕碎，愿意看10分钟幽默视频来学习打领结的人越来越少，如果在更上一层来看，短视频的出现好像就是水到渠成的事。话说回来，现在大产品中增长最快的垂类，可能就是下一个风口。</p><blockquote><p>但是，没有什么是一成不变的。就如在2013年，“观看时长”是衡量YouTube用户体验的最佳方式，而现在我们已经开始在寻找其他变量了，比如，视频及照片的网络增量、用户的观看满意度，以及对社会责任的关注等。</p></blockquote><hr><p>◆ 下篇 OKR引领组织变革</p><p>读到这里，好像能解决开始认为OKR难以与奖金激励分开的问题了，它们分不开，也不必完全分开，OKR是含有一定权重的要素，O是具有挑战性的，即使达到80%，并不能说明好还是不好，这只是一个角度，当把这种思维深耕到激励机制中，那分不分开就没那么重要了。</p><blockquote><p>谷歌一向谨慎地将原始目标得分与薪酬决策分离开来。在每个循环之后，他们的OKR数据就从系统中清零了！</p><p>目前，我们还没有发明出任何一个公式，可以用于准确解释人类复杂的行为，因为对他人的判断都存在主观性，掺杂着个人因素。在今天许多工作场景中，OKR和薪酬是“好朋友”，它们结伴而行，永不分开，但它们也无须“生活”在一起，这样可能更健康一些。</p><p>随着企业管理向持续绩性效管理过渡，OKR和CFR大多变得独立于薪酬和正式评价之外</p></blockquote><hr><p>◆ 第21章 未来的目标</p><p>本书中的案例可能会有一些夸大OKR效能的成分，部分案例看起来甚至有一些不舒适，但整体而言，OKR中的透明，承诺，协同，可追踪等关键技巧还是非常受用，现在正在切身体验OKR，书中的很多方法都让我受益匪浅。</p><blockquote><p>第21章　未来的目标</p><p>目标是推动我不断向前的动力。</p><p>——穆罕默德·阿里（美国著名拳击手）</p><p>有想法很容易，但关键是执行，没有执行，一切都是空中楼阁。</p><p>如果你已经阅读了这本书，就会非常了解OKR和CFR的功能，它们可以帮助组织的各个部门去攀登自己业务的顶峰。你也已经知晓了它们如何激励员工，如何培养领导者，以及如何凝聚团队去做更伟大的事情。通过衡量最重要的事情，也就是直击要害，OKR帮助波诺和盖茨基金会一同发起了解决非洲贫困、抵抗疾病的运动。我们正在驱动谷歌以“10倍速”的力度对未来进行大胆探索，以实现让人们自由获取世界各国信息的伟大目标。OKR和CFR也正在帮助Zume比萨专卖店通过使用机器人制作并烘烤比萨，将热气腾腾、新鲜出炉的比萨送到您家门口。</p><p>以上发生的事情令我们兴奋，但我认为这只是刚刚开始。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 管理 </tag>
            
            <tag> OKR </tag>
            
            <tag> 约翰·杜尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《免费：商业的未来》</title>
      <link href="2021/01/02/mian-fei-shang-ye-de-wei-lai/"/>
      <url>2021/01/02/mian-fei-shang-ye-de-wei-lai/</url>
      
        <content type="html"><![CDATA[<p><strong>《免费：商业的未来》，克里斯·安德森著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>本书写于09年之前，10年过去，现在看免费，已经不是未来的商业，它已经在我们身边遍地开花，各种免费的产品，免费成就的企业，一个个免费的领域充斥着我们周边，克里斯安德森对未来的洞察力可见一斑。免费并非没有收益，作者看来，所有从免费中获得收益的无外乎就是4类，直接交叉补贴（螺丝钉的钱螺母赚），三方市场（羊毛出在猪身上），免费加收费（普通版的专业版）及其他（礼品经济，劳动交换与盗版等），作者在最后还罗列了50个在10年前就已经存在的免费商业模式，现在看来同样有意义。最好的免费与付费依赖模式就是让其互相搭上便车，实现飞轮效应。最后作者也提到，免费并非绝对的免费，它也有成本，有时候是以我们自己没有看到的价值作为了交换，有时是以未来的资源或平衡作为交换，而后者，可能直接导致更大的灾难。</p><hr><p>◆ 专家推荐三 技术经济学新规则</p><p>边际效应的差异导致与规模经济的本质区别，这也是导致互联网时代越来越多免费产品产生的前提条件，免费就是羊毛出在猪身上，把狗给急死了。</p><blockquote><p>信息产品和服务具有“非常特别”的成本结构。它们是高固定成本、低边际成本的。</p></blockquote><hr><p>◆ 序言</p><p>当大家对一个主题的看法不一致时，才有讨论的必要，讨论的目的并不一定要说明某一方的对错，是让大家都知道对方的理由，最后以更高的姿态理解这一主题。世上很多问题并非只有单纯的yes or no，很大程度上取决于角度。</p><blockquote><p>如果某个主题能把大家分为两个对立的阵营（一个阵营认为这一主题“大错特错”，另一个阵营认为该主题“一目了然”），那这绝对是一个很好的主题。我希望阅读本书的人，尽管在翻开这本书的时候属于两个阵营中的某一个，但是在最后合上这本书的时候，能成为超脱于这两个阵营以外的人。</p></blockquote><hr><p>这种营销在人们还相信世上没有免费午餐的上个世纪会比较奏效，刚开始可以获得一个免费的剃须刀，这就已经刺激到用户，不管以后是否会为随弃性刀片买单。而当下这种方式可能就不那么有效了，人们对免费的概念已经内化到了骨子里，会考虑更长远一些的免费。</p><blockquote><p>有趣的是，吉列公司免费赠送剃须刀的例子却很少有人知晓，唯一有记载的例子就是公司在20世纪70年代推出了Trak二代剃须刀，向消费者免费派放便宜的剃须刀和不可重复使用的随弃式刀片。</p></blockquote><hr><p>◆ 免费101 如何理解“免费”</p><p>通过语言词汇的演变过程来看词语的意思，能更加深刻的理解其真实含义。词语产生于什么背景，想描述什么概念，通过时间选择留存下来的，也会有时代的影子。</p><blockquote><p>因此，我们可以说“免费”来源于“自由”的社会概念，兼有奴隶制和收费这两种背景。</p><p>在这本书中我们要谈的是在这一背景下产生的“免费”概念，就像免费畅饮啤酒或是免费午餐的概念。</p></blockquote><hr><p>不止是免费，商业本身就是为了掌控资源运作模式，产品是资源，人是资源，时间是资源，市场也是资源，免费的交叉补贴只是庞大资源运作体系当中的一部分，交叉补贴可能更强调补贴方与被补贴方之间的平衡。</p><blockquote><p>看清楚林林总总的免费归根结底都表现为同一实质——让钱在不同的产品之间、人之间、现在和未来之间、不与钱打交道的市场和金钱市场之间转移。经济学家把它称做“交叉补贴”。</p></blockquote><hr><p>这里把免费分为了4类，直接交叉补贴（螺丝钉的钱螺母赚），三方市场（羊毛出在猪身上），免费加收费（普通版的专业版）及其他（礼品经济，劳动交换与盗版等）。</p><blockquote><p>我们把免费分为这几种模式的必要性不言自明，而且这种分类方法的效果也很好。没有任何一种分类方法会十全十美，遇到特例和几种模式交叉的情况也是很正常的。</p></blockquote><hr><p>结合损失厌恶的背面，在边际成本很小（甚至忽略不计）的行业里已经出现很多类似案例。一个100天的计划，先交100块钱，如果能坚持100天，则全额退，中途未坚持的需要扣减。边际成本低让企业不亏钱，损失厌恶的背面让企业赚更多钱。</p><blockquote><p>在丹麦，有一家健身俱乐部给会员提供了一种服务：只要你一周内能至少去俱乐部一次，那么你就不需要付费；但是，如果你某一周没能去俱乐部，那么你就要付当月的健身费用。这个商业理念真是很好。如果你每周都去俱乐部的话，你自己感觉很好，而且对这家俱乐部的印象也会很好。但是总会有某一周你因为太忙而没能去俱乐部，这样一来你就需要掏钱，但是你只会责怪自己这周没能去俱乐部。和那些你掏了钱却又不常去俱乐部的会员不同，成了这家俱乐部的会员之后，你的本能就是不要失去会员资格，你对这家俱乐部的忠诚度也增强了。</p></blockquote><hr><p>说一句有用的废话，商业的终极目标就是掌控资源，而每个资源都有其被多数人赋予的商业逻辑，打破这种多数人逻辑的，要么死得很惨，要么异军突起。优秀的商业模式都在大家现在不怎么认可而以后会蜂拥而至的地方。</p><blockquote><p>在上述每一个案例中，聪明的公司都让正常的金钱流动方向发生了逆转，它们或者是让某样东西免费，或者是在本应其他公司付账的时候买单。这些点子其实并没有什么很高的技术含量，不过想到这些点子需要你用企业家的思维来创造性地看待价格。</p></blockquote><hr><p>◆ 免费心理学：你感觉免费如何？</p><p>付费是一种0或1的不同心理状态，而付费的多少只是1与n的差异。相对而言，0和1不同状态的跨越更难，当一个用户愿意付费时，在一定程度上已经认可了内容，价格的高低只是个人愿意接受的成本而已。值不值得掏钱是第一系统能直观评估的，人们感知更加强烈，掏多少钱这需要调配第二系统进行思考，大多数人这方便都相对薄弱。</p><blockquote><p>不论订户付了多少钱，他填写支票或者输入信用卡号的时候，都是一种消费行为，这种行为也会让广告商改变对这个订户的看法。哪怕你用支票支付了1美分，也表明你想要这份杂志，当杂志送到你家的时候你会去好好翻阅它。实际上，和一些会被人当成垃圾邮件的免费杂志相比，对于那种订户主动订阅的杂志，广告商愿意支付的广告费有可能是前者的五倍。</p></blockquote><hr><p>我们经常会遇到很多近乎免费的说法，实则近乎免费和真正免费有着本质的区别。即使是一美分，也会把很多尝试者挡在门外，在付一美分之前需要跨越的是内心那个值不值得付费的心理障碍。</p><blockquote><p>因此，你一旦想要收费的话，不论收费有多低，那么都会造成一个心智交易成本障碍，而大多数人都不愿耗费精力翻越这个障碍。相反，免费则能帮助消费者加速做出购买决定，使得更多人决定要尝试一下某种新商品。免费看似放弃了得到的一部分直接收入，但是它却带来了更多的尝试者。</p></blockquote><hr><p>是否存在这样一种商业模式，一个书咖，里面提供各种图书阅读，咖啡饮品，智能生活体验，每个人都可以随意进入免费阅读，免费体验。会员制度按照月度，季度，年度划分。用户可发表阅读感想，体验收获，每周进行一轮线上线下投票。每周选出某分区内的10位最佳（最佳感想，最活跃……）免费赠送店内物品。会员用户可获得赠品，非会员用户可参与，但不能获得赠品。如此免费吸引更多尝试者，会费制和品牌营销盈利。</p><blockquote><p>疑问：为什么一家店里的东西能够全部免费？</p></blockquote><hr><p>◆ 太便宜，无所谓了：在网站上，如果某样东西每年都贬值一半，那么价格降到零就是不可避免的</p><p>现在看着都还有点为其后怕，这真的是一种面向未来的赌博，当把时间作为要素加在商业中后，结果就会变得非常不可控，想在时间上弯道超车，很容易就飞出赛道了，</p><blockquote><p>他们的奇招收到了奇效。因为提前让价格曲线下降，美国飞兆半导体公司成功地把成本降到了1.05美元，并占据了超高频电视频道调谐器90%的市场份额。两年之后，他们又把1211晶体管的价格压低到了50美分，实现了公司赢利。</p></blockquote><hr><p>◆ “信息想要免费”：界定数字化时代的一个小插曲</p><p>同样使用边际成本来度量。生产信息需要成本，但是如果是人人都能得到同样版本的，那单个信息的成本除以所有人，边际成本就会小得几乎忽略，而个性化定制的每一个信息成本都是不可忽略的，就不得不收费。</p><blockquote><p>商品化的信息（人人都能得到同样版本）想要变得免费，而客户定制化（你得到对你而言独特、有意义内容）的信息则想要变得昂贵。</p></blockquote><hr><p>悖论是不同角度看到的事实，矛盾又何尝不是呢，只是不同的认知角度看到的事实而已，同样在数学中，计算数学中1+1等于2，几何学中给定一个角度，1+1小于2。</p><blockquote><p>悖论和矛盾是不一样的。矛盾会使得矛盾双方停滞不前，而悖论则使双方都能继续前进，因为每当你承认悖论某一方有言之有理，那么你就会留意到悖论另一方的言之有物。</p></blockquote><hr><p>◆ 和免费竞争：微软几十年前就学会了，而雅虎在几个月前才刚起步</p><p>不止微软对Linux，任何一个头部玩家对初始玩家都可能有这样的态度。头部玩家都有自己的优越感，相较于求变，他们更愿意求稳，对很多新动态往往持否定态度；当初始玩家已经在瓜分市场蛋糕时，市场曾经的主导者开始愤怒；愤怒带来的经常是不惜一切代价的打压，不多商谈尝试各种方式如何投入资源抢回市场；这种场景要扳回局面一般比较困难，新玩家分食蛋糕是因为和旧玩家的差异，同时旧玩家要迎战新玩家除了相对丰富的资源外，在企业成长模式上有很大劣势，因为旧玩家的整个架构体系都构建在原有模式下，突破困难，逐渐绝望；当自己已经无法阻挡对方时，开始重新回到自己位置，接纳这个市场的新成员。</p><blockquote><p>这次会议比李纳斯·托瓦兹开始研究Linux要晚了10年，比蒂姆·奥雷利组织的开源软件峰会也晚了4年，比生产Linux软件的VA Linux公司和红帽公司在纳斯达克上市后股价疯涨引发的“Linux泡沫”也晚了3年。到了2002年，尽管微软公司占据了网站服务器操作系统市场的半壁江山，而Linux系统也占据了25%的市场份额。</p></blockquote><hr><p>大企业在摸爬滚打中形成了自己独有的商业结构，这是立足的优势，但深厚的根基难以被别人撼动的同时，也束缚了自己，这就是创业者的机会。大企业不断孵化新业务，成长后独立拆分运营，背靠大树与同赛道对手竞争，可能是较好的方式。</p><blockquote><p>雅虎所遇到的问题也是免费世界里的典型困境。新加入网络竞争的公司总比早先进入的公司更有优势。一方面，早先进入的公司有固定的收入流，因此害怕新的业务模式会影响原先的客户。另一方面，因为雅虎这样的公司客户数目更多，因此如果要给上亿的用户提供和Gmail一样的服务，资金投入将是一个天文数字。</p></blockquote><hr><p>◆ 去货币化：Google和21世纪经济模式的诞生</p><p>这种效应很可怕，这是免费的破坏性，当市场上恒等式不成立的时候，需要面对的风险就会变得不易控制，羊毛出在猪身上，狗是怎么死的可能都不知道。</p><blockquote><p>微软将《大英百科全书》视为资产的东西转变为一种债务。尽管微软从中赢利达1亿美元，但它却使整个市场市值缩水超过6亿美元。微软每赚一美元，就从其竞争对手那儿抢走了6美元。微软赚到手的每一美元都会给这个市场带来与其收益不对等的“阵痛”，而它正是通过收缩市场规模来赢利。</p></blockquote><hr><p>市场上的要素是具有依赖关系，它并不是我们熟知的正态分布，这种依赖关系会使得强者愈强，弱者愈弱，马太效应亦来自于此。</p><blockquote><p>由于市场份额的微小差别可以被放大，在任何领域中排名第一的公司与排名第二及之后的公司间存在的差距通常会非常大。</p></blockquote><hr><p>◆ 新媒体模式：免费媒体并非新鲜事物，但其仍具有新鲜之处，即免费模式向其他在线领域的拓展</p><p>现在很多捆绑销售倍受诟病，根本原因在于附加的并非用户需要的，Controlinveste的产品捆绑不止增加了报纸的发行量，还获得了更好的口碑和更多的广告商，因为捆绑的银器解决了用户的实际需求。</p><blockquote><p>但它又是如何做到赢利的呢？两种方法：其一，银器比我们想象得更便宜，特别是成批购买时；其二，从超额完成的报纸销售量中获得的边际利润也远高于我们的估算。</p></blockquote><hr><p>这种模式风险还是很大的，线上免费与线下付费的两种模式强依赖时，变现流程被拉长，虽然基数变大了，但同时被漏斗过滤掉的比例也会更多，而且过多的依赖也会让这种模式变得更加脆弱。</p><blockquote><p>“网娃”模式是“免费”与“付费”的巧妙结合。它的主要吸引力在哪？毛绒玩具还是游戏？很难说，但如果没有另一个做伴，它们都无法取得成功。在某种意义上，这仅仅是20世纪经济学和21世纪经济学一前一后对同一问题做出的合乎规律的表达：现实世界（如毛绒玩具）需要花钱，而虚拟世界（如网络游戏）则是免费的。</p></blockquote><hr><p>◆ 免费经济的“底盘”有多大：用美元和美分来衡量远远不够</p><p>这里作者认为在自行车租赁市场上，让用户掏一次大钱相比让用户次次掏小钱更加容易，用户愿意付年费时可能只是因为当时特别需要，付费的多少并不会阻挡过多用户，而每次不用付费让用户体验到了似乎免费的感觉。</p><blockquote><p>人们更愿意支付固定的年租金自由骑行而不愿时时为计时租赁费困扰。</p></blockquote><hr><p>按照这种方式计算的免费所创造的经济效益是偏大的，互联网中的很多免费之间、付费与免费之间是高度依赖的，很多时候A存在了，B就会存在，而这时候A可能付费，B可能就是免费的。</p><blockquote><p>在15年里花1万亿小时建设互联网就相当于在相同时间内13800万人全职工作。如果说将其中40%的工作量投入“免费”生产——Facebook和Myspace网页、博客、无数论坛的帖子和评论，这就需5500万人（约为德国的劳动人口总数）。如果为他们支付薪水，他们的报酬又是多少？姑且按2万美元算，那每年仅薪水支出一项就将超过1万亿美元。</p><p>简而言之，免费经济的规模堪与一个国家相比，而非微不足道。</p></blockquote><hr><p>◆ 免费经济学：一个老掉牙的笑话何以摇身一变成为数字经济学的定律</p><p>免费之所以能在信息时代一直存在下去，是因为信息产品一旦生产出来，其边际成本会随着用户的增加而不断减小，甚至趋近于零。</p><blockquote><p>在一个竞争性市场中，价格等于边际成本。</p></blockquote><hr><p>这就是一个正反馈的飞轮效应，用户越多，编辑越多，编辑增加使得内容质量提升，从而吸引到更多的用户，这样飞轮就转起来了。</p><blockquote><p>“这一大规模听众群扮演了使人们给予网站源源不断贡献的有力促进因素。人们愿意为一个拥有庞大读者群的百科全书捧场；确实，‘搭便车者’（亦称用户）的巨大数量是维基编辑这一职位最诱人之处。”</p></blockquote><hr><p>◆ 非货币经济：货币不起作用的地方，什么管用？</p><p>在网络上可以聆听学校的课程，但学校的环境是网络给不了的，网络的信息传递经常是单方向的，但学校的信息传递不止双向，而且还更加立体，这就是学校存在的本质意义，网络上免费的课程不会减少进入学校的人数，反而是一种优秀的营销方案。</p><blockquote><p>所交学费能让你拥有直接向大师们提问的机会，使你能够分享他们的真知灼见，并受教于穆勒这样富有魅力的学者。此外还能与其他同学交流思想，相互帮助，建立友谊。这些学校将这种开放式课程视为市场营销手段而非大学教育的替代物。</p></blockquote><hr><p>◆ 有时浪费是一种美德：创造富足生活的最佳方式就是放弃控制</p><p>在匮乏的时候会自然想到节约，而丰富的时候就需要放弃控制，给每一个丰富的元素以空间，创造出尽可能多的多样性。</p><blockquote><p>从蒲公英的角度看，一粒，甚至大多数种子的去向并不重要，重要的是在每个春天，每一条街道上都飘满了蒲公英。蒲公英不想亲自照顾每一粒宝贵的种子，而是希望它们离开巢，认真把握自己漂泊的方向，以找到最佳生长环境，在那儿繁衍生息。蒲公英只是希望确保充分利用了每一个繁衍的机会。</p></blockquote><hr><p>是时事造就英雄还是英雄造就时事，关键要看是从0到1，还是从1到n，时代自然进化是一个连续的过程，发生跳跃时需要人作为关键因素，故从0到1是英雄造时势，而从1到n是时事造就英雄。</p><blockquote><p>现在向一位观众播放一小时视频节目的成本约为0.25美元，明年这一成本将下降至0.15美元。再过一年将少于0.1美元。这就是为何YouTube的创建者决定把它奉送给大家，不仅免费而且可自由取予。结果虽然造成了杂乱不堪的格局且与职业电视人的本意背道而驰，但这符合充裕的需求。如果YouTube没有这么做，也会另有他人这么做。</p></blockquote><hr><p>◆ 免费世界：免费世界的前沿阵地在中国和巴西，我们能从中学到什么呢？</p><p>从免费（或较低成本）来理解，刚成立的电商平台都是从假货中走出来的就比较容易接受了，淘宝如此，拼多多亦是如此，它们切实的解决了用户需求，打假的声音一直都在，但有时候用户需要的可能就是假货。</p><blockquote><p>“像那么回事儿”并非总是意味着购买令人信服的冒牌货，它创造出了一个冒牌“证据”市场，这个市场中的产品并不是冒牌货。</p></blockquote><hr><p>◆ 想象充裕：“后匮乏”社会的思维实验，从科幻到宗教</p><p>充裕促使了免费，免费推进了创新和增长，增长对充裕形成正向反馈。免费让获得成本降低，没有成本就不会有交换价值，当然也就不会珍惜，也就不会去了解。</p><blockquote><p>从经济学角度看，充裕是创新和增长的推进器。但从心理学角度看，匮乏才是我们真正理解的一切。</p></blockquote><hr><p>免费同时会导致过度的充裕，这种充裕会使得很多原本应该存在的角色失去存在的意义，当免费的平衡被打破时，就不会出现备选方案，等待的可能就是毁灭。</p><blockquote><p>最终当机器渐渐停止运转时，没有人知道如何将它修复。因此随着机器崩溃，地球上依靠机器的多数人一同死去，剩下的在底下拥挤不堪的藏身之处苟延残喘。然而，在小说的结尾，其中一位主人公在奄奄一息时透露，他已经发现了一个仍生活于地球表面的由被放逐者组成的社会，他们得以免遭充裕的毒害。喔！</p></blockquote><hr><p>◆ “一分钱一分货”：对免费的其他疑问</p><p>看似免费的东西才是最贵的，有可能免费是在消耗我们自己没有看到的价值，而且别人正在用这种资源创造更大的价值，有可能免费是因为在提前消耗未来的资源或平衡，这种透支可能直接导致毁灭。</p><blockquote><p>免费意味着更多的广告，也意味着更少的隐私</p></blockquote><hr><p>◆ 充裕思维的十大原则</p><p>现在这个时代大多数人是从匮乏中走出来的，天生拥有大量对匮乏资源的管理方式。随着免费的盛行，资源会变得越来越充裕，如何管理这些充裕，如何从免费中获得收益，而非从高价格的匮乏资源中获得利益，这是这个时代的人需要考虑的问题。</p><blockquote><p>10.管理充裕而非匮乏</p><p>当资源匮乏时，它们的价格相应地保持在高位——你必须非常仔细地使用它们。因此传统的自上而下式管理方法均属于为避免代价昂贵的错误而实施的控制。但是当资源价格相对较低时，你就不必用相同的方式进行管理。随着商业的数字化，也可以在没有丧失主业风险的情况下进行更为独立的运营。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 免费 </tag>
            
            <tag> 克里斯·安德森 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《非对称风险》</title>
      <link href="2021/01/02/fei-dui-cheng-feng-xian/"/>
      <url>2021/01/02/fei-dui-cheng-feng-xian/</url>
      
        <content type="html"><![CDATA[<p><strong>《非对称风险》，纳西姆·尼古拉斯·塔勒布著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>书中的观点比较激进，虽然有一些个人不是很认同，但作者给我们提供了很多新的思路。书中的一些观点非常震撼，比如为什么我们愿意相信耶稣是人而不是神，为什么明明和平年代更多，而我们却更多记得的是战争事件。贯穿全文的风险共担，分别论证的少数派，林迪效应，遍历性等都让人眼前一亮，如果看过作者的黑天鹅，还能顺便复习一下平均斯坦和极端斯坦。</p><hr><p>◆ 第一卷 绪论</p><p>作者这里的发问一瞬间让我体会到什么叫来源于生活却高于生活，看起来我们已经广为接受的平淡无奇的事实，通过作者的笔尖却是显得那么的陌生。敢于质疑，不一定能找到真理，但换一个角度看世界，真的很不一样。</p><blockquote><p>为什么有明显缺陷的候选人比毫无瑕疵的候选人看起来更可靠？为什么我们都崇拜那个反叛罗马帝国失败的迦太基英雄汉尼拔？尽管雇用了一批能干的人，为什么一个公司瞬间就倒闭了？为什么那些邪教总能在不同人群中收获一定比例的信众？外交事务是如何推进的？为什么你不该向有组织的慈善机构捐款（除非它们能像优步那样高效运转）？为什么基因和语言的传播方式不同？为什么一个群体的规模很重要（如果一个渔夫群体的规模发生变化，群体内部可能从相互合作转为相互争斗）？为什么行为经济学几乎不研究个体的行为，而市场几乎与参与者的偏见无关？为什么只有理性才能在市场上生存，是什么机制让理性的投资人活了下来？什么才是承担风险的实质？</p><p>对于我个人而言，到市场上去亲历“风险共担”，意味着我将体验到：人类的正义理想、个人的荣誉感、自我牺牲精神，以及其他事关人类生存的最宝贵的品质。</p></blockquote><hr><p>◆ 安泰俄斯之死</p><p>什么是勇气，什么是鲁莽，这里给出了一个答案，勇气是在情况明了的条件下进行的，而鲁莽却是在未知的条件下进行。那么什么是情况明了，是多维度刻画，那什么是多维度刻画，是不会因为某一个维度的缺失而改变最终结论。</p><blockquote><p>一个复杂的多维度系统的运行方式很难用单因素实验来解释，在情况不甚明了之前就去触碰这样一个复杂的系统，他们需要的不是勇气而是鲁莽。</p></blockquote><hr><p>人类的进化也是优胜劣汰的筛选过程，基因突变造就了很多不确定性的可能，而环境就是筛子，就像不遵守交通规则的人也会被交通事故筛选一样。作者这里说和人类进化不一样，说的人类进化应该不是猿-智人-人的进化，而是人类通过学习的自我进化。按这种方式理解，通过学习的进化是获得性进化，通过筛选的进化是失去性进化。</p><blockquote><p>许多不称职的飞行员现在躺在大西洋海底，许多爱冒险的司机现在躺在绿树环绕的安静墓地里。交通变得更安全并不是因为人类从错误中学到了什么，而是因为系统本身淘汰了犯错误的人，并由此得到了改善。系统的进化模式与人类不同，它建立在筛选的基础之上。</p></blockquote><hr><p>◆ 对称性</p><p>“运气”是什么，是我们对自己不能掌控和解释的系列不确定性统指。比如在计算器中输入1+1，不管返回的是1还是2，这是我们可以掌控的结果，我们会认为是运气吗？如果今天出门遇上看到流星雨，我们可能会觉得是运气，但对于天文学家来说这就不是，他们甚至知道最佳的时间地点。对于投资来说，因为参与的因素足够复杂，所谓的预测多数不过是冰山一角，预测的效果本身也存在很大不确定性。</p><blockquote><p>同理，即使做出了错误的预测，只要造成的损失不太大，其实就无关紧要，这类似于研究过程中采用的试错法。</p><p>现实生活中的例子往往过于复杂，很难被简化成一个精致的模型，然后用三言两语解释清楚。而且现实生活中的结果也不像棒球比赛那样，可以被简单地归结为输或赢。在很多情况下，我们面对的风险是非线性的，比如农夫可能会受益于降雨，但若降雨持续下去并演变成洪水，那么结果农民可能就从受益变成了受损。有关风险的非线性分布问题的专业讨论在本书后面的数学附录部分。我认为所谓的预测，尤其是那些打着“科学”幌子的预测，通常都是江湖骗子可以依赖的终极手段，自古已然。</p><p>此外，数学中被称为“反向设计”的工程学问题似乎只能通过“风险共担”来解释。其实投资领域并不像工程学那样，给工程师一台机器，他能够反向设计出所有的零部件和驱动程序。</p></blockquote><hr><p>我们为了证明自己的观点经常会引用某某说，某某证明类似的论据，这在作者看来是不严谨的，因为自己没有风险共担过，体会不到原作者想要表达的精髓。</p><blockquote><p>古代的英雄不是古代的学者，更不是现代图书馆的书虫。他们并不生活在文字里，那些英雄为使命而生，他们的精神和意志只有当你和他们承担过相同的风险之后，你才能真正体会。</p></blockquote><hr><p>◆ 第二卷 初探代理人问题</p><p>对于产品广告代言，代言人也应该是产品的消费者，对于大宗商品，至少也应该是体验者，没有做到风险共担，就没有发言权。</p><blockquote><p>“你自己是否参与其中？</p></blockquote><hr><p>古罗马诗人Horace：过于夸赞必是急于摆脱。过于夸赞是对原有事物的深度包装，为什么要包装呢，因为里面的东西不好出手，真正好的东西不用包装，也不愁下家。</p><blockquote><p>罗马人早就洞悉了这一点，他们说：如果一个人拼命赞美某商品，那么他一定急于卖掉它。</p></blockquote><hr><p>放之天下皆准的通用法则是不存在的，任何法则都有其适应范围，风险共担亦是如此，作者这里提出一个对范围的定义方式很有扩展性，第一，这个范围有相互影响的机制，第二，这个范围要有普遍的规范。</p><blockquote><p>“风险共担”对群体的定义是：某空间内存在一种机制，即别人会以你对待他们的方式对待你；该空间内还普遍存在一个规范，即个体奉行银律之“己所不欲勿施于人”的戒条来对待他人。</p></blockquote><hr><p>◆ 第三卷 最大的非对称性</p><p>不管是少数派的分布和产品成本，根本还是把少数派和多数派区别开的的成本。如果能区别开，这就是两个可以独立的系统，就像不同的语言；如果不能区别开，那就都是系统中的组成部分，需要放大交集，弱化差集，这里花生酱就是差集。</p><blockquote><p>我带一位欧洲朋友出去吃饭，但是当时餐厅只有吸烟区的座位了。于是，我对这个哥们儿说，我们俩得去买一包烟，因为在吸烟区里吃饭就必须要吸烟。他竟然表示理解和赞同！</p><p>发生少数派主导现象有两个主要因素。首先，人口的空间分布很关键。如果顽固派集中生活在某一特定区域内，那么，少数派主导现象就不会发生。如果少数派平均分散在人群中，这个现象就会发生。比方说，少数派在社区中的比例和在村子中的比例相同，在村里的比例和在县里的比例相同，在县里的比例和在州里的比例相同，在州里的比例和在全国的比例相同，在这种情况下，在全国占绝大多数的温和多数派就会表现出灵活性，屈从于少数派的选择。第二，成本也很关键。回到我们举的第一个例子，按照犹太教仪轨生产柠檬水不会显著提高成本，只需要避免使用某些添加剂就可以了。</p></blockquote><hr><p>系统的复杂性主要来自于组合的复杂性，而非个体的复杂性。中文的拼音，音标，汉字的笔画，英文的字母，音乐的音符，绘画的三基色。千变万化的原生都是简单的个体。</p><blockquote><p>不同部件之间的互动比其最初设计的功能更加重要。研究单只蚂蚁的行为永远不可能揭示整个蚂蚁帝国的运作模式。这是因为，我们要把蚂蚁作为一个整体来研究，而不是拆分成个体，或者将其视作个体的简单组合来研究。</p></blockquote><hr><p>这需要看是什么样的少数派，变革者是，创新者是，创业者也是。参与这样的人少，成功的更少，社会只屈服于成功了的少数派，更多的少数派还是屈服于了社会。</p><blockquote><p>社会最终会屈从于某个强硬且绝不妥协的少数派。</p></blockquote><hr><p>作者论证了少数派的主导作用，这点很厉害，对这里提到的四个条件有点观点。第一点是基于道德为分界线的，不同立场分界线不同；第二点个人觉得不太严谨，2%-3%这个比例不能说高也不能说低，因为本身就没有论据。第三点和第四点触动最大，能影响社会的少数派必须够固执，认准了就不改，这点在成功的少数派身上基本上都能找到，至于平均分布，这有点像多点发力，形成影响力网络的意思。</p><blockquote><p>所以，道德标准一旦被建立起来，只需要满足几个条件就足以在全社会维护整个道德体系：（1）极小部分人对道德禁止的事情极为厌恶，对道德提倡的事情极为热衷；（2）这一小部分约占总人口的3%~4%；（3）这部分人永不妥协，极为固执；（4）这部分人平均分布在社会的各个阶层和国家的各个地区。</p></blockquote><hr><p>◆ 第五卷 活着就要承担风险</p><p>这解释了为什么人们愿意相信耶稣是人，而不是神，因为对于大众而言，受难的有人性的耶稣才是真的在受难，而受难的神是不能和人类进行风险共担的。直白点就是同一维度才能比较，大众是人，所以也只能和人比较，就像我们不会和汽车比百公里加速一样。</p><blockquote><p>一个被剥夺了人性的神是无法体验牺牲和受难的，神无法真正参与人类的“风险共担”，如果耶稣真的受难了，那么他一定具有人性。如果被钉在十字架上的不是作为人的耶稣，而是作为神的耶稣，那么他所受的苦难就像表演幻象魔术，而不是一个真正承担了风险的人。</p></blockquote><hr><p>◆ 第7章 平等和风险共担</p><p>使用逻辑进行预测，而非数据。极端情况的确存在，但并不代表可以用极端情况来进行预测，本质上极端情况只是数据。比如看一个人是否有1000万财富，可以通过5000万股票市值直接判断，但如果这个人只有500万股票市值，就能说明他没有1000万财富吗，当然不能。</p><blockquote><p>而且，人们误以为实证主义就是堆砌数据。当我们的逻辑是正确的时候，只需要一些有意义的数据稍加修饰；而当我们试图证伪某一观点时，一个反例就足够了。只要有一个数据显示存在极端偏差就足以表明黑天鹅的存在。</p><p>当交易员们赚钱的时候，他们懒得搭理你；当交易员们输钱的时候，他们会把你拖入细节、理论、数据和图表的汪洋大海之中，以便证明他们自己是无辜的。</p><p>概率论、统计学和大数据分析的核心不是数据，而是基于观测得出的逻辑——尤其当观测数据不足时，逻辑就至关重要了。在很多情况下，真正有用的仅仅是几个极端数据；极端数据很少出现，而一旦出现，它们就带来巨大的信息量，并足够让你证明（或者证伪）某个观点。比方说，你想要证明某人有1 000万美元，你需要做的就是打开他的股票账户显示市值有5 000万美元。</p></blockquote><hr><p>象牙塔中的教育主要集中在思维层面的论证，从而也更加宏观，更容易上升到现实世界中不会思考的高度。很多刚毕业的学生认为自己可以改变世界，可多数最终还是会向现实低头，这并不是没有坚持梦想，而是梦想不切实际，换个角度，这可能是明智的选择。</p><blockquote><p>知识分子为什么如此关心社会的不平等问题？那是因为他们本能地用等级社会的眼光看世界，他们关心自己的社会地位。其实还有一个深层次的病理学原因，那些培养了他们的名牌大学平时讨论的话题大都是有关等级社会的，而现实世界的大多数人并不为此感到困扰。</p></blockquote><hr><p>◆ 第8章 一个叫林迪的专家</p><p>什么是自由，没人可以限制你去往任何地方，这是行动自由，不会因为金钱而限制你进行购买，这是财务自由，没有谁可以左右你的想法，这是思想自由。</p><blockquote><p>当一个人的命运不依赖于同行评议时，他才是一个真正自由的人。</p></blockquote><hr><p>如果一个人愿意为他的观点共担风险，那么不管这个观点是否正确，都应该受到尊重。记得以前听过一个观点，如果一个人敢把自己的名字写在品牌上，那这个品牌的可信度会大大增加。</p><blockquote><p>如果一项研究成果会给其作者带来名誉上的或者其他方面的伤害，而且还会招致同行的责难，那么这项研究成果就值得我们高度重视。</p><p>与此同时，我们还应该意识到：</p><p>如果一个充满争议的公众人物愿意为自己的观点承担风险，那么他不太可能是在胡说。</p></blockquote><hr><p>◆ 第六卷 再探代理人问题</p><p>如果A+B=C+D，当A&lt;C，则有B&gt;D，道理很简单，但并不是每个人都看得到，为什么的，因为我们都擅长用感官判断，不善于用逻辑思考。</p><blockquote><p>如果一个人看起来不像是干这一行的，却又在这一行干了很长时间，这说明他需要比别人克服更多的困难，这种困难来自病人以貌取人的天然倾向带给他的不信任感，他一定是用卓越的医术成功地扭转了别人对自己不利的第一印象，否则他早就被淘汰了，根本干不了这么久。</p></blockquote><hr><p>感觉有点偏激，大道至简，高手不必在外行面前说一堆专业术语来彰显自己的专业，因为他们的专业不再需要额外的肯定，反而他们会尽可能的让别人理解自己，传播自己。</p><blockquote><p>我刚20出头的时候就明白了这个道理：如果一个人说的话很容易被人理解，那么他一定是在吹牛（因为他会刻意地把话说得让人易于理解）。</p></blockquote><hr><p>◆ 第10章 只有富人受害：其他人的偏好</p><p>不只是财富，所有的学习、成长都是为了让自己会有更多的选择，如果做某一件事不能让自己比之前有更多的选择，那么最好别做，这时间可以用来做更有意义的事。</p><blockquote><p>简单说吧，如果财富使你的选择变少了，而不是选择更多更丰富，那么你肯定已经走错路了。</p></blockquote><hr><p>◆ 第11章 行胜于言</p><p>善于语言威胁的人行动能力一般较弱，语言已经发泄了他们大部分的怒火，而且由于行动力弱，他们也需要从语言中找到存在感；真正可怕的是那些沉默着却冷不丁会冒出来的人，你不知道他们如何算计，一切都笼罩在未知的阴霾中。</p><blockquote><p>语言威胁除了揭示你的软弱和绝望之外不能传递任何信息。请记住：不要使用口头威胁。</p></blockquote><hr><p>◆ 第12章 事实是真的，新闻是假的</p><p>这里能感觉到作者是一个执着的少数派，当观点被误解后敢于和所有媒体对抗，为维护自己的权益而全力以赴，这样的少数派必然让世界妥协，因为少数派敢于拿出手的事情肯定是极端斯坦。</p><blockquote><p>令人啼笑皆非的是，同一天的报纸还赞美了《黑天鹅》（其实我在那本书里明确地提出了这个观点），很显然，这次攻击与我的观点本身没有关系，他们只是想通过把我妖魔化来削弱卡梅伦的竞选势头。我意识到，无论我说什么，他们都会找到另一个抹黑我的理由。</p><p>我还是设法提高音量来保护自己，在发出了明确的法律威胁之后，每家报纸都刊登了我的澄清声明。尽管如此，《卫报》却徒劳地试图弱化我的声明，他们声称我又改主意了，而他们之前的报道没错。换言之，他们想让我反对我自己。</p><p>读者把新闻当作自己和事实之间的媒介，但是伦敦的报纸却总是积极地向本国公众呈现歪曲的事实。多亏了我据理力争，涉及我的那部分错误内容终于被改过来了。但很多人没有办法这么做。</p><p>很显然这又是一个委托代理问题。《卫报》的记者和米兰的饭店老板没有什么不同，你想要叫一辆出租车的时候，他会叫来他的表弟，来之前还会在城里兜圈子以便让计价器显示的金额往上走。</p></blockquote><hr><p>◆ 第13章 经营美德</p><p>创业需要一个噱头，但最好不要以自己不能驾驭的美德开始，如此以来自己会被美德绑架，难不成商业模式是建立在美德基础上，那这样的美德模式可以经营吗？</p><blockquote><p>第一，不要试图表现美德；</p><p>第二，更不要打着美德的旗号从事寻租活动；</p><p>第三，你必须自己创业，把自己放到第一线，去开创一项事业。</p></blockquote><hr><p>◆ 第14章 和平，不靠条约，也不靠战争</p><p>什么能缔造比较稳定的和平，个人感觉应该是贸易，贸易能让双方甚至多方形成比较稳定的纳什均衡，如果贸易变得不平等，那就很可能导致战争，所以贸易可能也需要遇强则强，遇弱则弱。</p><blockquote><p>第14章和平，不靠条约，也不靠战争</p><p>阿拉伯会战斗到只剩最后一个巴勒斯坦人。狮群去了哪里？意大利人可没那么容易死。让历史学家造火箭。商业使人更平等但也创造了新的不平等（但那是另外一个话题了）。</p><p>干涉主义者（或者我应该叫他们“狂热的干涉主义分子”）有一个毛病，他们为了“提供帮助”而介入别人的事务，结果却破坏了那些地区本来固有的维系和平的机制，这种机制既体现为当地人在具体事务上的合作，又体现为他们在战略上的长期敌对，和平机制就是这两者的结合。正如我们在绪论里面提到的那样，这个错误至今仍在继续，因为错误决策的后果会由决策圈以外的其他人承担。</p><p>我猜想如果没有那些干涉主义“白知”的掺和，以色列和巴勒斯坦问题应该已经得到了解决。</p></blockquote><hr><p>战争让我们更加警觉，这导致我们往往能记得某一年爆发了什么战争，却不记得哪一段时间人们在和平相处。就像我们明知道草原上凶猛狮子的数量远小于温和动物的数量，但因为我们希望看到狮子，对狮子的出现更加警觉，所以即使狮子没有出现，大量的篇幅仍然是在讨论狮子。</p><blockquote><p>人类历史应该是一部偶尔被战争打断的和平史，而不是一部偶尔被和平干扰的战争史。问题在于我们人类很容易受到大脑记忆中那些印象深刻事件的影响，从而将偶发的事件误以为是具有统计规律的常态。</p></blockquote><hr><p>阅读、学习和思考是为了在现实世界中识别机会和警惕风险，如果仅仅在学习而没有实际使用，即使有思考，思维也会逐渐变得迟钝，只有经过实际问题的训练才会让自己的思维变得更加活跃敏捷。</p><blockquote><p>坦率地说吧，能够置身于耶鲁大学图书馆层层叠叠的书架间认真阅读、学习和思考是许多人做不到的，比如黑手党的讨债人或者商品期货的投机者，这些人需要时刻保持警惕并提防风险，如果你还是没有明白我的意思，那么你就是个学者。</p></blockquote><hr><p>◆ 第八卷 风险和理性</p><p>不能通过信仰去批判一个人，信仰不分对错，只有行动才有对错，即使对错，也是在不同的判定标准下，所以只有在进化的维度下，或者是作者提到的林迪效应下，对错的评判才有意义。</p><blockquote><p>用信仰评判一个人是不科学的。</p><p>信仰无所谓是否理性，理性只存在于行动之中。</p><p>只有站在进化的角度上，才能评判一个行动是否理性。</p></blockquote><hr><p>这是对风险共担又一直接的表达，愿意承担的代表着我们的信任程度，没人愿意为完全不确定的事物共担风险。保险就是一个很好的例子，保险的价格代表着风险发生的概率及可能产生的后果对风险共担的影响。</p><blockquote><p>你愿意为一个事物承担多大的风险，揭示了你对该事物的信任程度。</p></blockquote><hr><p>◆ 第19章 承担风险的逻辑</p><p>按1%概率看，100个人在集合概率下只会有一个人爆仓，而一个人在100天的时间概率下100%会爆仓，看似相似的出发点结果却截然不同。换个角度，现实世界中要么进行横向对比，要么进行纵向对比，如果横向纵向出现交叉对比，那就得小心陷阱了。</p><blockquote><p>100个赌徒在1天时间里的成功概率，并不适用于你表弟在100天时间里的赌运。我们把第一种情形称为集合概率，第二种情形称为时间概率（第一种情形涉及的是一群人，而第二种情形则涉及一个人穿越一系列时间）。</p></blockquote><hr><p>◆ 后记</p><blockquote><p>不要没有力量的肌肉；</p><p>不要没有信任的友谊；</p><p>不要相信不承担责任的观点；</p><p>不要缺乏美感的变化；</p><p>不要没有价值观的阅历；</p><p>不要未拼尽全力的人生；</p><p>不要把资源和精力浪费在自己不渴望的事情上；</p><p>不要吃没有营养的食物；</p><p>不要没有相互奉献的爱情；</p><p>不要拥有了权力却抛弃了公平；</p><p>不要缺乏严谨调查的事实；</p><p>不要没有逻辑的统计；</p><p>不要没有证明的数学；</p><p>不要没有实践经验的老师；</p><p>不要冷若冰霜的礼貌；</p><p>不要无法付诸实施的理论；</p><p>不要没有真才实学的文凭；</p><p>不要没有打击能力的军事行动；</p><p>不要没有文明的进步；</p><p>不要没有相互投入的友谊；</p><p>不要遵奉美德却又不敢担当；</p><p>不要忽略概率的遍历性；</p><p>不要相信没有风险的财富机会；</p><p>不要辞藻华丽却又言之无物；</p><p>不要把问题搞得很复杂却又没有思想深度；</p><p>不要忽略决策的非对称性；</p><p>不要以为质疑会阻碍科学进步；</p><p>不要缺乏宽容的宗教。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 风险共担 </tag>
            
            <tag> 纳西姆·尼古拉斯·塔勒布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《宇宙简史：起源与归宿》</title>
      <link href="2021/01/02/yu-zhou-jian-shi-qi-yuan-yu-gui-su/"/>
      <url>2021/01/02/yu-zhou-jian-shi-qi-yuan-yu-gui-su/</url>
      
        <content type="html"><![CDATA[<p><strong>《宇宙简史：起源与归宿》，斯蒂芬·霍金著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>看完时间简史后快速翻完了这本，和时间简史的内容相似，甚至有的语句表达均相同，途中一度觉得自己仍然在看时间简史。本书可以算时间简史中关于宇宙起源部分的扩展，其中关于黑洞部分补充得较多。</p><hr><p>◆ 第1讲 有关宇宙的若干观念</p><p>这种有限空间上的中心点聚集现象从地球的角度看可能比较难想象，不妨从边界来看，如果空间是有限的，则肯定存在边界，而边界上的星体就肯定存在收到空间内部的吸引，而边界外部不会存在这种吸引力，所以这种空间是受力不平衡，会不稳定的，必定因此坍塌到一点。但如果没有边界就不会出现这种情况，没有边界当然只能无限大。</p><blockquote><p>如果仅有有限数目的恒星，上述情况确实是会发生的。但是另一方面，他又推断说，如果恒星的个数为无穷大，且又大致均匀地分布在无限大的空间内，那么这种情况就不会出现，因为这时对恒星来说就不存在任何使之内落、集聚的中心点。</p></blockquote><hr><p>◆ 第2讲 膨胀的宇宙</p><p>不经想问，是什么导致了宇宙膨胀，物体运动肯定是在现在或过去受到了力的作用，对这种力的理解难度不亚于对宇宙常数的构造难度，难道是宇宙大爆炸时的惯性？</p><blockquote><p>发现宇宙正在膨胀，乃是20世纪一项伟大的理性革命。事后来看，不禁让人惊讶为什么之前没有一个人想到这一点。牛顿等人应该会意识到，在引力的作用下一个静态宇宙很快会开始收缩。但是，请设想一下宇宙并不处于静止状态，而是正在膨胀。</p></blockquote><hr><p>◆ 弗里德曼模型</p><p>以前有个想法，宇宙是膨胀的，膨胀是有方向的，那膨胀方向的反方向就应该是宇宙的中心，可是按照费里德曼模型，如果单独看膨胀气球表面的斑点，任何地方都不是中心，但是看整个气球，它又是有膨胀中心的，气球表面是二维的，其中心在三维空间，我们的宇宙至少是三维的，那是不是说明也有膨胀中心，只是中心的位置超出了我们现在能认知的空间范围。</p><blockquote><p>在弗里德曼模型中，所有的星系都在彼此远离。这种情况有点像持续不断地吹一个表面上绘有若干斑点的气球。随着气球的膨胀，任何两个斑点之间的距离不断增大，但是任何一个斑点都不能被称为膨胀的中心。不仅如此，斑点间的距离越远，斑点之间互相远离的速度就越快。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宇宙 </tag>
            
            <tag> 黑洞 </tag>
            
            <tag> 斯蒂芬·霍金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《万万没想到：用理工科思维理解世界》</title>
      <link href="2021/01/02/wan-wan-mei-xiang-dao-yong-li-gong-ke-si-wei-li-jie-shi-jie/"/>
      <url>2021/01/02/wan-wan-mei-xiang-dao-yong-li-gong-ke-si-wei-li-jie-shi-jie/</url>
      
        <content type="html"><![CDATA[<p><strong>《万万没想到：用理工科思维理解世界》，万维钢著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>作者的思维很清奇，从一个理工男的角度解释那些我们熟知或不熟知的事物，尽管书名是用理工科思维理解世界，而且作者也尽量在书中保证了每个part的逻辑严谨性，但读起来一点都不费力，这很像一本辩证性科普读物。有些是我们熟知但理论上可能并没有那么严谨的，就像成功学，励志学，心理学，甚至医学；有些是我们不那么熟知但渗透我们生活的，就像统计学，物理学和阴谋论。用审视的眼光看这个世界，没有绝对的正确，一切真理都是有条件的，就像作者所说的“有限的真理”一样。</p><hr><p>◆ Part One 反常识思维</p><p>站在情感的角度，可能觉得第二个更煽情，更容易博得受众的同情。个人认为，人物设定比冰冷的数字让我们感觉更加真实，多数人对不熟悉的数字并没有感知，而对一个小女孩的生活是有期待的。</p><blockquote><p>第一个版本列举了一些翔实的统计数字：马拉维有三百万儿童面临食物短缺；安哥拉三分之二的人口，也就是四百万人，被迫远离家园，等等。</p><p>第二个版本说你的全部捐款会给一个叫诺奇亚（Rokia）的七岁女孩。她生活在马里，家里很穷，时常挨饿，你的钱会让她生活更好一点，也许你的捐款能帮好她获得更好的教育和卫生条件。</p></blockquote><hr><p>在没有统一分母的条件下就比较分子，2是1的两倍，但百分之2还是十分之1的两倍吗？见过鹿的人是多少，见过鲨鱼的人又是多少；美国一年内恐怖袭击的次数是多少，一年内闪电次数又是多少。分母差得多着呢。</p><blockquote><p>而事实上，美国平均每年死于鲨鱼之口的还不到一人——从这个角度说鹿比鲨鱼危险得多，死于开车撞上鹿的人数是前者的三百倍！一个美国人在过去五年内死于恐怖袭击的概率只有两千万分之一，而根据《经济学人》最近提供的一个各种死法危险排名，其在一年内死于闪电击中的概率则是一千万分之一——闪电比恐怖分子厉害十倍！</p></blockquote><hr><p>◆ 别想说服我！</p><p>一直觉得星座测算不靠谱，但是又说不好为什么，在这里找到一个证据。每个星座的描述也就那些，只是相信星座的人重视那些和自己匹配的特点，而主动忽略了那些不匹配的特点。我不相信星座，所以感觉好像每个星座都像也都不像。</p><blockquote><p>结果，学生们纷纷表示这个说的就是自己。而事实是所有人拿到的“性格概况”都是完全一样的！人们更愿意看到说的跟自己一样的地方，并忽略不一样的地方。</p><p>可能有人以为只有文化程度比较低的人才会陷入确认偏误，文化程度越高就越能客观判断。事实并非如此。在某些问题上，甚至是文化程度越高的人群，思想越容易两极分化。</p><p>一个有意思的议题是全球变暖。过去十几年来，媒体上充斥着各种关于全球变暖的科学报道和专家评论，这些报道可以大致分成两派：一派认为人类活动产生的二氧化碳是全球变暖的罪魁祸首，如果不采取激烈手段限制生产，未来的气候就会不堪设想；另一派则认为气候变化是个复杂问题，现有的模型并不可靠，二氧化碳没那么可怕。如果你对这个问题不感兴趣，你根本就不会被这些争论所影响。而《信息食谱》告诉我们，对全球变暖的观点分歧最大的人群，恰恰是那些对这方面有很多了解的人。</p></blockquote><hr><p>大多数内心是律师机制，但表达出来的是科学家机制。心中有一个猜想的结论，然后去寻找支持自己结论的证据，过滤不支持结论的证据，最后义正严辞的用找到的证据一番推理得到看似来自于科学家机制的结论。</p><blockquote><p>你不用笑我，你也有同样的毛病。蒙洛迪诺说，人做判断的时候有两种机制：一种是“科学家机制”，先有证据再下结论；一种是“律师机制”，先有了结论再去找证据。世界上科学家很少，你猜绝大多数人使用什么机制思考？每个人都爱看能印证自己已有观念的东西。我们不但不爱看，而且还会直接忽略，那些不符合我们已有观念的证据。</p></blockquote><hr><p>◆ 坏比好重要</p><p>这一节说到了人性的本质上，人们对负面感情的重视程度总是超过正面感情。所以我们有损失厌恶，战争比和平印象更深，更容易记住有缺点的人，更在意负面的评论。原来这些都是杏仁核在绑架。</p><blockquote><p>他们看到好人好事主动夸，听说坏消息却能够保持淡定。</p><p>朝三暮四的心理学手段对他们没用。这样的聪明人，不会被自己的杏仁核绑架。</p></blockquote><hr><p>人们在面对同样数量的收益和损失时，损失更加令他们难以忍受。同量的损失带来的负效用为同量收益的正效用的2.5倍。所以对于公司而言，用目标薪资减未达标扣减的方式代替基本工资加绩效提成，是不是能让员工更多的付出。</p><blockquote><p>损失厌恶</p></blockquote><hr><p>◆ 最简单概率论的五个智慧</p><p>作者洞察到我们日常生活中最容易掉入的5个统计陷阱，随机和误差经常被过分解读，幻想未来与历史平衡的赌徒谬误，主观忽略使得在没有规律的地方发展规律，在小数中发现终究不会成立的定律。虽然学过统计学，可是跟随作者结合现实世界进行分析，感觉依然新颖别致。</p><hr><p>在现实世界中我们很容易在性质和规律之间陷入迷茫，结合作者前面提到的律师思维和科学家思维，通过结论找证据就像这里的性质，找到证据后难免还要再论证一下自己的结论，可是通过性质去推理规律，这是多么的不靠谱。</p><blockquote><p>我上小学的时候，有一次数学课上讲到“素数”这个概念。老师列举素数，班上一个同学突然非常兴奋地举手说：“我发现了一个规律！”老师就问他发现什么规律，他说“你看素数3、5、7、13、17、19……它们的结尾都是这几个数字！”他发现的这个“规律”其实是除了2以外的素数都是奇数。这的确是一个“性质”，并不是真正的“规律”，因为你无法用它去预测下一个素数，比如9和15都是奇数，符合这个“规律”，却都不是素数。</p></blockquote><hr><p>◆ 一颗阴谋论的心</p><p>阴谋论给那些黑天鹅事件扣上了看似严谨的逻辑，我们崇尚掌控，所以总想给各种事件赋予理性的推理，以此证明主观能动性的强大。如何判断一个推理是否是阴谋论，作者陈述了一个对比，现实世界比人们理想的阴谋论小得不止一个数量级。</p><blockquote><p>世界非常复杂，很多事情似乎简直不可理解。为什么明明准备得很好的比赛也会输？为什么一个好人偏偏死于车祸？阴谋论可以让我们对这些事情至少找到一个理由。我们不但找理由，我们还找目的。</p></blockquote><hr><p>◆ 桥段会毁了你的生活</p><p>剧透新境界。我们耳熟能详的主角光环，喜剧结局和悲剧结局，角色预想的情节不会发生，危机总会到最后一刻制止，这些似乎都是电视背后的基因，如果真的能把所有的剧情编码成库函数进行调用，看电视也太无趣了。</p><blockquote><p>无形之中，剧情数据库把观众分为“会看电影的”和“不会看电影的”两类，只有不会看电影的观众才会被剧情感动，而会看电影的观众则永远失去了这个乐趣。豆瓣这样的小资影评网站有可能会被理工男们占领，他们使用桥段编码对每一部影视剧进行基因分析，用外行看不懂的语言剧透。</p></blockquote><hr><p>◆ 健康的经济学</p><p>如果在非冲动的条件下做了某个抉择，那就勇敢的去做，即使以后后悔了，也得愿赌服输。很多人在面对曾经错误的选择带来的后果时总会悔恨不已，其实完全没有必要，因为回到当时的场景，我们还是会做出一样的抉择。</p><blockquote><p>一个选择了高风险高回报的人在健康出问题以后应该愿赌服输——再给他们一次机会很可能还是这样选。</p></blockquote><hr><p>◆ 匹夫怎样逆袭</p><p>连续的成功（或幸免于难）会给人一种被幸运女神眷顾的感觉，虽然客观事实并没有什么变化，但心理上会对幸运女神深信不疑，就像篮球场上的手感一样，来自于自信。</p><blockquote><p>费雷德·舒特尔·斯沃（Fred Shuttlesworth），屡次遭到三K党袭击，结果每一次躲过袭击之后他的勇气都会再升一级，他最后无所畏惧甚至获得了一种宗教领袖般的气质。那些刺杀他的人简直就是来给他送经验值的。</p></blockquote><hr><p>◆ 练习一万小时成天才？</p><p>一个人的成就来源于乘法而非加法，当天赋不够时只有“加倍”努力，这是在天赋差异不大的假定上。当然普罗大众的天赋差异应该不是很大，才让努力变得有意义。</p><blockquote><p>也许一个人最后的成就，不是练习加天赋，而是练习乘以天赋，一项是零最后结果就是零。</p></blockquote><hr><blockquote><p>1．只在“学习区”练习；</p><p>2．把要训练的内容分成有针对性的小块，对每一个小块进行重复练习；</p><p>3．在整个练习过程中，随时能获得有效的反馈；</p><p>4．练习时注意力必须高度集中。</p></blockquote><hr><p>舒适区，学习区，恐惧区。一直呆在舒适区会将已经学习到的自动化，对未知世界的感知能力逐渐退化。一定程度的自动化能更加高效，当某项技能进入舒适区后就需要去学习区转化，以此扩展技能边界。</p><blockquote><p>一定程度的“自动化”非常有用，我们不可能每做一个动作都有意识地给每个关节、每块肌肉安排任务，但是“自动化”到不管不顾地执行则是错误的。</p></blockquote><hr><p>把复杂的过程结构化，模块化，专业化，这样学习到的就不只是一个特定的过程，而是可迁移的技能。现实环境千变万化，永远不可穷举，拆解后的方法论就变得可以被学习，就像会写26个英文字母就会写所有英文单词一样。</p><blockquote><p>美国最好的一所音乐学校里的一位老师甚至干脆禁止学生把一支曲子连贯地演奏。学生只能跟着她练分块的小段。她规定如果别人听出来你拉的是什么曲子，那就说明你没有正确地在练习！</p></blockquote><hr><p>这样在网络上公布自己的计划，让很多人监督自己完成目标的人不少。这也算刻意练习的一种，不过这种刻意练习最终可能会让自己走向崩溃，最主要的原因就是没有及时的反馈机制，刚开始在得到别人认可时还能有满足感，当监督人麻木后，没有反馈自然也就逐渐崩溃了，就算这样下去真的达到了一万个小时，那之后又该如何呢？有效的刻意练习应该是能从练习本身中获得快乐和成就，只有这样才能拥有源源不断的活力。</p><blockquote><p>他把自己的练习过程全程公布在网上，这样任何人都可以监督他。他认准了“一万小时”这个死理，每天给自己倒计时，说我现在还剩xxxx小时！中国年轻作家彭萦也在搞一个类似的一万小时倒计时，她每年在博客公布自己的进度总结。</p></blockquote><hr><p>如此说来，多数人终其一生可能也没有寻找到让自己基因发扬光大的环境，这不是后天的努力所能决定的，努力只能从1到n，而从0到1的过程需要天赋和机遇，我们能做的是如何坚持到那个时候并准备好迎接它。</p><blockquote><p>寻找适合自己兴趣的环境，把自己的基因发扬光大 — 这难道不就是进化论告诉我们的人生意义吗？</p></blockquote><hr><p>◆ 最高级的想象力是不自由的</p><p>what if的想象经不起推敲，也无法演变，当然只要还有排列组合，这种想象就不太容易匮乏。高级想象是具有自我进化能力的，拥有源源不断的活力，因为它们基于最基础的规律。what if就像同时用很多国家的语言写一本书，高级想象就像用三基色画出的城市。</p><blockquote><p>最高级的想象力其实是不自由的。正是因为不自由，它的难度才大。自由的“what if”思维，只是高级想象力活动的第一步，其背后不自由的东西才是关键。</p></blockquote><hr><p>◆ 思维密集度与牛人的反击</p><p>思维密集度这个词很有意思，就像加解密，理论上加密和解密耗时应该是相同的，一旦某一方耗时少，就会促使另一方的进化。当然这里需要重视的是解密的信息还是加密的信息本身吗？</p><blockquote><p>思维密集度 = 准备这个读物需要的总时间 / 阅读这个读物需要的时间</p></blockquote><hr><p>◆ 高效“冲浪”的办法</p><p>通常而言看新闻似乎是个正经事，实则不过是世界上的噪音，有价值的新闻可能十天半个月才有一个，和我们有直接关系的就更少了，如果非常理性的去看待人们的需求，并且要引导人们往正确的方向发展，那么还会有今日头条和百度信息流吗？所以我虽然很同意作者的观点，但还是要考虑大部分人的惯性，只是看完这个观点让自己尽量不被信息操控。</p><blockquote><p>世界上的大事并非是按时间均匀分布的，往往十天半月才出一件真值得好好关注的新闻，但是媒体的新闻版却必须每天都有，而且还要填满固定的长度。所以事实是，大多数新闻都是噪音。</p></blockquote><hr><p>结合前面的思维密集度，看书比全程跟踪要高效得多，看书的思维密集度也要高很多，但是这里还需要考虑另外一个维度——时效性，出版一本书的时间是以年为单位的，而一篇新闻或一个报道，是分钟级的产物，有时候一天以后知道一个事件比一年以后知道一个事实有价值的多。</p><blockquote><p>可以想象，如果将来有人写本书，其中把“Google.cn”的故事当个例子谈，看那本书显然比全程跟踪这些新闻要有效率的多。这个例子也许在那本书中只占一个段落的篇幅。有些比赛的确值得看现场直播，但有些比赛直接告诉我最后比分就行了。</p></blockquote><hr><p>◆ 笔记本就是力量</p><p>似乎有一种惯性，遇到问题习惯性百度一下，况且查询到的结果比记忆中的会更加详细，何必要记呢。不过至少有两个维度记忆比查询强，一个是时间，另一个是衍生，比如看一篇外文，虽然翻译中每个词的意思都很详细，但每个单词都去查询，这时间已经不是一个量级了，而且英文单词与中文翻译一般都有多对多关系（至少有不同词性），如果没有单词储备，即使知道单词意思也不一定能读懂。</p><blockquote><p>知识，不能仅仅机械地“存”在你的脑子里，而必须以一种个性化的结构“长”在你的脑子里。通过个人笔记本来不断总结自己个性化的理解，恰恰可以帮助我们“长”知识。</p></blockquote><hr><p>◆ 用强力研读书</p><p>既然决定读一本书，就要做好深度阅读的准备，这是一个艰难的过程，读不下去的时候也要坚持，至少应该为开始的选择买单，或许有的书不是不值得读，而是根本没理解作者深意。读一本书不一定要快，只要耗时比作者写书时间短，从思维密集度来看就是赚的。</p><blockquote><p>强力研读跟“刻意练习”有三个共同点：</p></blockquote><hr><p>◆ 创新是落后者的特权：三个竞争故事</p><p>优秀的创新不是表层上的新奇，而是本质上的革新。这种创新有生命力，有内在运行的模式。一个新电影不是创新，但科幻相比悬疑就是创新；一个新游戏不是创新，但射击相比肉搏就是创新；支付一直都有，但移动支付相比线下支付就是创新；交易一直都有，但O2O就是创新……</p><blockquote><p>我们要说的是那种改变游戏规则，改变商业模式，“根本性”的创新。这种创新往往具有历史意义，你一旦成功，会有很多后来者向你学习。你不是创新图存，而是引领风气之先。这样的创新最大的特点，不是“开放的头脑”之类的优秀品质，而是风险！</p></blockquote><hr><p>这个观点很有意思，我们经常说要学习大公司，学习优胜者，这的确没错，大公司之所以能做大的确有很多值得学习的地方，但小公司也非常值得大公司学习，因为它们才是时代的弄潮儿，它们才是创新的渊源，记得曾经看到一个阿里的投资观点，我投资你不一定让你做大，但可以不让你成为对手，这种模式最大可能的降低了风险，妙哉。</p><blockquote><p>回顾市场上那些革命性的商业模式，大多都不是由最领先的公司最先提出来的。为什么谷歌自己没有“创新”网络视频，反而是收购You-Tube？为什么微软没有“发明”脸谱网（Facebook）？特大公司，如IBM者，并不以特别能创新而闻名，他们最大的能力恰恰是把那些已经被别人证明是好东西的技术迅速普及和产业化。</p></blockquote><hr><p>◆ 夺魁者本色</p><p>这个观点虽然没有完全考虑到社会现实，但还是比较认同敢于冒险比相对保守具有更大的成功可能性，这里不关乎性别，如果需要论证这个观点，可能还需要调查社会最底层的是否也是些（至少曾经是）敢于冒险的人，毕竟用100块赌150，失败了也会损失100元。</p><blockquote><p>过度自信和敢出手恰恰是男人的优势。</p><p>比如为什么大多数政客是男的，这不是因为选民有性别歧视。女候选人真参选的话，她获得的政治捐款和得票率都并不比男性低。女政客少，是因为女人不爱参选。女人不参选，是因为她们能合理对待自己当选的可能性。</p></blockquote><hr><p>这是迄今我见过最有依据的看手相（从来不相信算命），无名指相对食指越长，是因为睾酮水平更高，从而冒险和竞争意识更强，成功的可能性也越高，当然失败的可能也越高，这里不能直接把成功和失败非此即彼，中间还夹着一个规避风险的稳定。</p><blockquote><p>一个人的基础睾酮水平可以反映在无名指和食指的长度比上。胎儿在子宫中的发育同时受到睾酮和雌激素的影响。这两种激素影响胎儿大脑的同时，也影响手指。睾酮水平相对雌激素水平越高，人的无名指相对于食指就越长。</p></blockquote><hr><p>睾酮水平高的人更愿意竞争，无名指比食指更长；在面对压力时身体会产生多巴胺，多巴胺越高，就会约兴奋，而COMT基因负责清理多巴胺，所以有了战士和颤士，不过还有一个问题，多巴胺的产生又受什么影响呢？</p><blockquote><p>决定一个人喜不喜欢竞争的重要因素之一，是睾酮水平。而决定一个人面对竞争压力时的状态，是COMT基因。</p></blockquote><hr><p>◆ 打游戏的三个境界</p><blockquote><p>玩游戏实在是一个可大可小的事情。如果你随便玩，你只能体验一点小小的快乐情调。如果你陷入即时正反馈系统不能自拔，你会获得更大的乐趣或痛苦。只有当你进入更高的境界，你才可能成为游戏界的泰格·伍兹，甚至是矩阵（Matrix）里的尼奥。</p></blockquote><hr><p>◆ 穷人和富人的人脉结构</p><p>从强连接和弱连接角度更新对人脉的认识，强连接与自己的想法，观点，环境都更加趋同，自己解决不了了问题，对方很可能也解决不了，真正能为自己带来帮助的是弱连接，一方面它的范围更大，同时它的组成也更加多样化。</p><blockquote><p>对工作来说，同乡会和校友录不是扩展人脉的好地方。</p></blockquote><hr><p>◆ 物理学的逻辑和霍金的答案</p><p>让我想起塔勒布的一系列随机性观点，我们都是偶然中的必然存在，地球的存在，生命的存在都是偶然的，这样的偶然不可复制，但立于浩瀚的宇宙中，这种存在又是合理的必然，即使我们不是上帝创造的，但至少是掷下的一个骰子。</p><blockquote><p>牛顿认为上帝必须存在的另一个理由则不需要他的直接干预，这就是地球在太阳系的位置实在是太幸运了。</p></blockquote><hr><p>◆ 怎样用统计实验检验灵魂转世假说</p><p>暂且不说伦理，就实验严谨性和可行性上这都不能成为一个实验，但这的确算是非常大胆的推理，看似根本无法量化的假说，作者尝试用统计实验来证明，而且在相应的假设条件下，这种证明的结论变得可信。所以在现实世界中不管遇到什么偏门的假说，都可以考虑看是否能用实验检验。</p><blockquote><p>如果“灵魂继承性原理”也正确，那么当这生活环境完全类似的2000个孩子长大之后，我们可能会发现，B组的孩子对阿拉伯语的学习很有天赋，而且倾向于伊斯兰教。甚至更进一步，B组的孩子长相上应该也带有一点沙特风格。</p></blockquote><hr><p>◆ 摆脱童稚状态</p><p>相关性未必是因果关系，单独拿出来都认可，可是现实是我们拿到相关性基本上就认定某种因果关系。这就像作者前面提到的律师思维和科学家思维，我们更多的时候都是律师思维，更愿意相信结论，所以我们更相信因果关系这个结论，然后去找依据，而不是从相关去找依据来得到因果关系。</p><blockquote><p>有相关性未必有因果关系，这是一个非常重要的思维。</p></blockquote><hr><p>相关性是在描述一个事实，因果关系是在刻画一个过程，而真正能发挥作用的是演变模式，模式才是是修建房子的砖块，而科学的目的正是发现这些砖块。</p><blockquote><p>相关性思维和因果性思维只是思维方式的转变，科学研究的真正关键在于发现机制。你必须说明是吸烟导致肺变黑，而变黑的肺容易得癌症，还是烟草中有什么化学物质可以直接致癌（正确答案是后者）。机制提出来之后，这个机制中的每一步也必须是可以验证的，一个课题只有做到这个程度才算超越了集邮阶段。</p></blockquote><hr><p>◆ 怎样才算主流科学？</p><p>这个有点居高临下的感觉了，谁又能保证自己的判断绝对就是正确的，真正遇到的时候不要急于下决定，先听听别人怎么说，不管自己多厉害，首先尊重别人的观点，也给自己一个学习的机会，当双方想法对抗的时候，才能更加肯定一个答案。</p><blockquote><p>哪怕最粗暴的判断，也比廉价的鼓励值钱。</p></blockquote><hr><p>以前也思考过这个问题，有的东西明明就在哪里，可是它的存在并没有被赋予意义，所以在人们的思维世界中这是不存在的，也就是作者这里指出的没有和人类已有的主流知识建立关系。</p><blockquote><p>凯文·凯利（Kevin Kelly）在《科技要什么》（What Technology Wants）这本书里提到，早在哥伦布去美洲之前，美洲大陆就已经有人了，可是为什么我们说是哥伦布“发现”了美洲呢？因为是哥伦布把美洲大陆这个知识和人类科学的“主流知识”联系在了一起。“孤岛式知识”是不行的。</p></blockquote><hr><p>◆ 喝一口的心理学与喝一瓶的心理学</p><p>喝一口的得出的结论并不一定代表是你喝一瓶的结论，不同的可乐，喝一口就分辨好坏和喝一瓶分辨好坏有很大的差别，怪不得每次在商场尝饮料样品都很好喝，真来一杯就不好喝了。</p><blockquote><p>目前大多数的心理学实验，是“喝一口的心理学”，而不是“喝一瓶的心理学”。</p></blockquote><hr><p>◆ 真空农场中的球形鸡</p><blockquote><p>科学研究从来不涉及绝对真理。哲学才研究绝对真理。科学研究的是“有效的真理”，是“有限的真理”。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 科普 </tag>
            
            <tag> 万维钢 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《牛奶可乐经济学》</title>
      <link href="2021/01/02/niu-nai-ke-le-jing-ji-xue/"/>
      <url>2021/01/02/niu-nai-ke-le-jing-ji-xue/</url>
      
        <content type="html"><![CDATA[<p><strong>《牛奶可乐经济学》，罗伯特·弗兰克著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>经济学不是少数人的专属，它充斥在我们周围，甚至可以说我们现在的一切都是经济学的选择结果，而且还会继续下去。所有的存在都没有绝对正确或错误的答案，不过是在一定时间内权衡成本和收益的结果。</p><p>本书用经济学的原理和方法来解释生活中的何种现象，书中关注的现象我们司空见惯但又未真正注意，本书不只是我们理解经济学的手册，甚至可以是我们了解生活的工具。</p><hr><p>◆ 引子</p><p>咋眼一看可能有点绕，机会成本是为了得到某一些东西而需要放弃另一些东西的最大价值。迪伦的票值50美元，你为此花费了40美元，所以从中能获得的额外价值是10美元，机会成本当然是10美元，当然如果已经买了票，而且还不能退，那机会成本就变成50美元了。</p><blockquote><p>不去看迪伦的演唱会，你会错失对你来说价值50美元的表演，但同时，你也省下了买迪伦演唱会票所需支付的40美元。所以，不去看迪伦演唱会，你放弃的价值是50-40=10（美元）。</p></blockquote><hr><p>面对这种情况，同样的10美元，按照绝对的理性人假设来说，当然成本相同。可是为什么大多数人会觉得多花10美元买电脑比多花10美元买闹钟更容易被接受呢，这就不得不考虑边际效益了，相同的成本并不代表相同的边际收益，而人们是否愿意花更多的钱并不完全取决于事物的实际价值，而在于人们获得的感官收益，价值是事物本身决定的，但价格却是交换产生的。</p><blockquote><p>大多数人似乎认为，去城里买闹钟，能省50%的钱，而买台2510美元的电脑，只能省10美元，前者的效益似乎比后者要大得多。可惜这不是正确的思考方式。</p></blockquote><hr><p>◆ 第1章 产品设计中的经济学</p><p>市场一直在进化，但直接看市场环境会像空中楼阁，产品就提供了一个观察市场变化的角度，几乎全部的功能出现都是市场造就的，以前没用的功能不代表现在没用，有用的功能不代表用户愿意买单，用户今天愿意买单的不代表明天愿意买单，今天看似八杆子打不着的说不定明天就会狭路相逢。</p><blockquote><p>本章讨论的例子将说明，不仅汽车设计的演变受制于成本效益原则，其他各种产品和服务也都可套用它来进行解释。头三个例子阐明了这样一个道理：如果某项功能的确有用，可用得着它的时候很少，那这项功能添加到产品身上的可能性就不大。</p></blockquote><hr><blockquote><p>由于大多数人打开冷藏柜的次数，比打开冷冻柜的次数要多得多，显然，在冷藏柜安装一盏灯的好处更大。所以，既然加装一盏灯的成本相同，那么，根据成本效益原则，在冷藏柜安灯就比在冷冻柜安灯更划算。</p></blockquote><hr><blockquote><p>当时购买笔记本电脑的人，大多是需要带着它们国内外到处出差的商务人士。</p></blockquote><hr><blockquote><p>即便除掉这些有可能关门的紧急情况，便利店购买不带锁的门也说不上能有什么好处。</p></blockquote><hr><blockquote><p>超市里大多数软性饮料都是放在开放式货架上的，这种架子便宜，平常也不存在运营成本。但牛奶则需专门装在冰柜里，冰柜很贵，运营成本也高。</p></blockquote><hr><blockquote><p>由于存在这种错觉，消费者可能不愿意买矮胖易拉罐装的软饮料，觉得它容量小。</p></blockquote><hr><blockquote><p>两种产品的关键区别在于，不诚实的顾客多拿饮料能给他带来好处，可多拿几份报纸却没什么用处。拿十份同样的报纸并不比只拿一份多出什么收益来。</p></blockquote><hr><blockquote><p>不同车型的加油孔设在不同侧面，意味着有些车能从左边加油。于是司机们就不用排队等着加油了。</p></blockquote><hr><blockquote><p>但更常见的情况是，在出租车驶过身边的时候招手叫停。因此，出租车颜色越抢眼越有利。</p></blockquote><hr><blockquote><p>要在硬币上画出足够精细的正面肖像，技术上办得到，但费用极为可观。同时，随着硬币的流通，精致的细节很快就会磨损掉。</p></blockquote><hr><blockquote><p>数字CD出现之前，大多数音乐是以黑胶唱片的形式出售的。</p></blockquote><hr><blockquote><p>按当时的风俗，男士自己穿衣服，女士则由仆人帮着穿。女士衬衣上的扣子钉在左边，极大地方便了伺候女主人的仆人们（多为右撇子）。</p></blockquote><hr><p>◆ 第2章 供求关系实践</p><blockquote><p>花生和酒是互补的。酒客花生吃得越多，要点的啤酒或白酒也就越多。</p></blockquote><hr><blockquote><p>拥有并使用特定软件的好处，会随着使用者人数的增多而提高。这一不同寻常的关系，给最流行的程序厂商带来了难以估量的巨大优势，并使得新程序很难打入市场。</p></blockquote><hr><blockquote><p>这类公司的大部分成本，是与铺设网络有关的固定成本——修建基站、获取相关执照等。这些成本，和广告支出一样，不会随着他们提供的服务量而发生变化。不管移动运营商花多大的功夫吸引顾客，这部分成本始终不会消失。</p></blockquote><hr><p>这种注意力转移相当高明，当用户面对低价手机与高价电池时，通常会认为移动运营商是把低价手机亏损的钱用高价电池赚回来，所以不买电池就不会上当，殊不知，移动运营商正是希望你这么想，电池买不买不重要，重要的是你以后是否需要花钱买通信服务，可惜很多时候我们都意识不到这一点。</p><blockquote><p>反过来说，卖特价电池，却不是吸引新顾客的成功手段。（这没什么奇怪的，毕竟大多数人大多数时候都用不着多块手机电池。）所以，移动运营商发现，手机卖得比电池便宜的做法有利可图。</p></blockquote><hr><blockquote><p>这是印度的特殊国情所致——按照法律规定，低于4层的楼房可以不安装电梯。</p></blockquote><hr><blockquote><p>祖父母们或许想通过建一处便于来访的大房子，提高自身在孙儿女们有限访问次数中所占的份额。</p></blockquote><hr><p>所以可能不是因为在客房入住率最高的时候房价低，而是因为房价低了才导致客房入住率高，开酒店的人很少会直接因为来这里旅游的是低消费人群就主动降低房价，经常是因为高价不会有人入住而被迫降低房价。这种供需动态平衡在了高入住率低房价水平。</p><blockquote><p>酒店的房价不仅取决于客房入住率，还跟潜在住客支付房价的意愿和能力有关。</p></blockquote><hr><blockquote><p>反之，到访埃及和中东其他地区的游客不愿面对荒凉的冬天，因此愿意在夏季前往，他们中以学生和工薪阶层为主。这类游客的收入一般比冬天来访的游客要低，所以酒店无法收取冬季那么高的房价。</p></blockquote><hr><blockquote><p>由于在相片冲印成本中，最主要的部分就是劳动力成本，使用新机器的冲印店能用比黑白相片低得多的价格生产并出售彩色相片。</p></blockquote><hr><p>◆ 第5章 军备竞赛与公用品悲剧</p><p>成本分摊在感觉上让每个人承受的边际成本减小，每个人点超的菜品一般是自己喜欢吃的，愿意付出的机会成本会更高，现在有其他人分摊，消费时就会更加从容。成本分摊的过量消费还来自对别人理性人假设，认为对方付出了成本，在一定程度上就会觉得值得，实则产生了更多的碎片。</p><blockquote><p>在经济学家看来，这就叫做无效决定，因为该人点大份牛排的净收益4美元（他认为大份牛排所值的5美元，减去他最终分摊的1美元）比该群体其他人的净损失要少（由于前面那位朋友点了大份牛排，他们支付的总金额增加了9美元）。</p></blockquote><hr><p>◆ 第6章 所有权之谜</p><p>这个角度作实让人刮目相看，以前都觉得是因为安全性，没想到却是利益纠缠，禁止吃东西侵犯到了很多人的利益，而禁止打电话，可以用耳机，这并没有损害到厂商利益，所以就执行下来了。</p><blockquote><p>假设立法者禁止司机边开车边喝咖啡、吃汉堡，快餐店的销售量就会陡降。因为害怕大企业会进行报复，拒绝提供竞选活动捐款，立法者们不愿意制定这种法律。禁止开车时打手机，但戴着耳机又可以打，立法者们规避了这一风险，因为无线电话运营商仍然能招揽到跟从前一样多的用户。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 经济学 </tag>
            
            <tag> 罗伯特·弗兰克 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《变量：看见中国社会小趋势》</title>
      <link href="2021/01/02/bian-liang-kan-jian-zhong-guo-she-hui-xiao-qu-shi/"/>
      <url>2021/01/02/bian-liang-kan-jian-zhong-guo-she-hui-xiao-qu-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>《变量：看见中国社会小趋势》，何帆著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>作者提到快变量，慢变量，大趋势，小趋势，重点讨论了大国博弈，技术赋能，新旧融合，自下而上和重建社群五个变量。如果30年后再来看这些变量，肯定有一定的差距，但作者从平凡人的角度告诉我们，这些变量现在的确已经在我们身边发生着。从发展的边缘，到企业的进化，到城市的变迁，最后到社群的建立，作者带着我们像观察一棵树一样认识这个世界，不管这些小趋势能否影响大趋势，至少我们用更深层次的模式从更长远的维度去认识了这个世界。</p><hr><p>◆ 两棵树</p><p>纵使百岁人生，别说历史长河，甚至比不过一颗树；3000年历史，看似遥不可及，每个人讲30年，排在一起不过短短50米。有时候我们可能高看了某些变量，有时候也可能低估了某些变量，多一分敬畏，少一分蔑视。</p><blockquote><p>公冶长书院最早是什么时候修建的？《论语》中只有一句话提到过公冶长，史上真有其人？</p><p>我问当地人，但没有人能告诉我确凿的答案。淳朴的山民笑着摇摇头，热情地请我品尝刚刚摘下来的栗子。我们对历史的熟悉程度还不如这两棵树。这里看似安谧祥和，实则地势险要，可以西入群山、东出平原，历来是兵家必争之地。这两棵银杏树能够历经兵燹依然保持完好，是个奇迹。我有无数个问题想问。一阵风吹来，银杏树沙沙作响，它们同情地看着我，像看一个迷路的孩子。</p><p>假如传说是真的，那么当我摩挲着这两棵银杏树粗糙的树皮时，冥冥之中，我可以和孔子的手相触。假如中国的历史以3 000年大略而计，30年算一代人，那么每一代出一位代表，只要100人就能讲完中国的历史。这100个人站成一排，也不过50米长。这100个人坐在一起，坐不满一间大一点儿的教室。每一代中只要有一个人专心讲述他们那一代30年的故事，我们就能拥有一份相当完整、生动的历史记录。</p></blockquote><hr><p>◆ 历史感</p><p>知道的越多，不知道的也越多，但这也比不知道自己不知道强很多。并非看到的知识都要认同，但一定要了解，连点成线、成面，才能形成自己的认知地图，不知道某一个知识点不可怕，可怕的是那一类知识都不知道。</p><blockquote><p>你认为在“朋友圈”里刷屏的文章，可能在另一个圈子里根本就没有人看。你不了解的圈子，可能其人数和影响力远远超乎你的想象。</p></blockquote><hr><p>◆ 快变量和慢变量</p><p>快变量和慢变量根据相对变化速度而定。今天的气温比昨天的气温是高了还是低了，并不能准确说明明天气温的升降，这是快变量；夏天的气温高于冬天的气温，今年是这样，明年肯定也是这样，这是慢变量。慢变量是更长时间里相对固定的模式，当然就是一种趋势，这样一想似乎有点循环论证的感觉了。</p><blockquote><p>先说慢变量吧。</p><p>历史是由快变量决定的，也是由慢变量决定的，但归根结底是由慢变量决定的。</p><p>我们每天接触到的信息大多是快变量。不幸的是，信息增长的速度明显超过了真理增加的速度，于是，在信息的增量中，噪声所占的比例越来越大。在我们这个时代，稀缺的不是信息，而是对信息的筛选。对快变量的迷恋，让我们迷失在光怪陆离的世界里，只看到眼前，看不到全局。慢变量看起来没有变化，看起来离我们很远，看起来与我们没有直接的关系。我们容易忽视慢变量，但慢变量才是牵引历史进程的火车头。</p><p>我来举例说明什么是快变量，什么是慢变量。天气预报能告诉你台风即将登陆，海上会有大浪，但是，只看天气预报，你永远无法理解为什么海上会有波浪。导致海上有波浪的真正原因是有月亮和太阳。月亮和太阳的引潮力引发潮汐现象。每逢农历初一和十五，也就是朔日和望日，月亮和太阳的引潮力方向相同，会产生大潮，也称朔望潮；每逢农历初八和廿二，也就是上弦和下弦，月亮和太阳的引潮力互相削弱，会产生小潮，也称方照潮。</p></blockquote><hr><p>◆ 5个变量</p><p>经济高速增长，民众不只是更自信、更乐观。可能更多的是变得更加极端，经济增长，自信乐观是自然现象，可是在经济增速出现抖动的时候，即使大趋势没有变，人们也会变得悲观沮丧。股市的割韭菜最能说明这个问题。</p><blockquote><p>哈佛大学经济学家本杰明·弗里德曼有个著名的论断：经济增长会影响国民性格。在经济高速增长时期，人们会更乐观、更自信、更积极上进、更包容开放。</p></blockquote><hr><p>2018年中国人工智能专利和论文数量已经世界第一，但是论文引用数量并不容乐观，我们在小步快跑，但技术内核还不够健壮，这是中国基础环境所决定的。</p><blockquote><p>虽然目前中国的高科技研发还落后于美国，但中国的高科技应用将会快于美国。</p></blockquote><hr><p>◆ 寻找场景</p><p>并不觉得这一段描述的产业链会出现。暂不说技术层面的生态级别依赖的可行性和真实性。从老张角度，这一系列的操作真的可以普及到吗，在此之前是不是得先做教育。从消费者角度，我们真的会关注这些吗，就像现在淘宝京东物流都上链，但多数人似乎并没有那么关心。</p><blockquote><p>老张也有一架无人机，但那架无人机停在蔬菜大棚里的一个“飞机库”里。需要洒药作业的时候，老张只需要在家里遥控，用手机设定参数，那架无人机就会自己装药、自己起飞、自己洒药，完成工作之后自己飞回充电桩充电。如果你要买老张的菜，可以扫他的二维码关注他的公众号，那么，你在微信上就能看到老张推送的新消息。你关注的公众号会告诉你：“今天光照时间长，西红柿会格外甜，明天早上6点菜市场见哦。”另一天，公众号会告诉你“今天老张捉虫子捉得好辛苦”，并显示老张洒了多少剂量的农药，洒的是哪个厂家生产的农药。你也可以不去菜市场，直接在网上订购老张的菜。老张会用一个专门的菜篮子装你的菜，只要扫一个二维码，“咔嚓”一声，称好、洗好、择好的菜就被锁进了菜篮子，一路送到你家，你只要再扫描一下二维码，“咔嚓”一声，专供的新鲜蔬菜就到你家的餐桌上了。</p></blockquote><hr><p>“边缘”一词太棒了，时间的边缘就像我们碎片化的时间，带动了短视频的崛起；空间的边缘就像极飞，带动无人机农业的崛起；认知的边缘就像得到，带动了知识付费的崛起……。这样一想，似乎就明朗了许多。</p><blockquote><p>你得先从边缘开始。”因为边缘的部分是直的，更容易被识别，把这些部分找出来，拼图的轮廓就能大致呈现出来，也更容易找到中心地带部分各自的位置。</p></blockquote><hr><p>◆ 猜猜谁在敲门</p><p>用雇佣代替买卖，可能更容易促使新技术落地。一方面为使用者降低了接入成本，另一方面也加速了技术迭代。</p><blockquote><p>云迹不是把机器人卖给酒店，而是让酒店“雇用”机器人。</p></blockquote><hr><p>记得西部世界里有句话，如果你辨不清真伪，那假的又如何呢。不管将来面试的是真人还是机器人，需要看的是解决什么样的问题，如果能解决问题，那真人和机器人又有什么区别呢。不要过分强调它们的差别，还是回归到业务本身可能更靠谱。</p><blockquote><p>门铃响了。清脆的一声“叮咚”。有人在门外。猜一猜，是谁在敲门呢？</p></blockquote><hr><p>◆ 群众路线</p><p>工业革命美国找到了流水线，信息化时代中国要走群众路线。这话怎么感觉有点多余呢，中国是人口大国，只要能获得大量用户，肯定能成就一方霸业，如果能为群众赋能，那发展肯定能更加持久话，所以感觉群众路线有点虚，淘宝，微信，头条不就是这么崛起的吗？</p><blockquote><p>在工业革命时期，美国的成功经验是找到了流水线；在信息化时代，中国经济要想最终胜出，要靠“群众路线”</p></blockquote><hr><p>这里的归纳推理很厉害，站在中国的国情上，基于高铁的发展，推理出雾霾的治理与老龄化服务，这很契合实际。这让我想到每个企业都有自己的基因，阿里腾讯都不差资源，阿里能做成淘宝、支付宝，但社交一直火不起来，腾讯做成了QQ，微信，但电商一直靠入股维持，这可能就是基因吧。</p><blockquote><p>未来治理空气雾霾的最先进技术一定在中国，老年产品的生产也一定会聚集在中国。这个世界上没有一个国家像中国这样以如此快的速度进入一个规模如此庞大的老龄化社会，如果没有技术创新，我们这一代人的养老问题该怎么解决？</p></blockquote><hr><p>◆ 企业必死，生态永存</p><p>非常喜欢KK，前面看到去海尔化本来想说点什么，但看到这句话后发现不管说什么都很是多余。</p><blockquote><p>凯文·凯利有一句话说得很好：所有的公司都难逃一死，所有的城市都近乎不朽。原因是企业总想成为帝国，而城市是一个开放的生命体。</p></blockquote><hr><p>◆ 自上而下和自下而上</p><p>与另一观点超级城市相比，我更愿意相信笔者的扩张收缩论。城市的主体依旧是人，人口总量只有那么多，人口的流动就会意味着城市的变迁，城市的主动变化会影响人们的选择，但并非每个人都会往超级城市聚居，而且随着中国逐渐进入老龄化，会加快北上广深这些大城市收缩。</p><blockquote><p>城市不会总是扩张，有的城市已经开始收缩。表征收缩城市的最重要指标就是城市人口下降。</p></blockquote><hr><p>◆ 谁是东莞人？</p><p>这里想到笔者前面提到的寻找边缘，有边缘那就肯定有中心，所以如果一时找不到边缘，那就先去找中心，因为中心和边缘肯定会同时存在的。</p><blockquote><p>只要有中心，就能确定边界。只要有了边界，就会受到边界的束缚。</p></blockquote><hr><p>◆ DNA Café</p><p>这里对现在年轻人的刻画很真实，我们会连下楼取个快递都觉得麻烦，但是却会为了去某个地方打卡而奔波数日；我们宁愿等上几天淘宝的快递，也不愿意去逛上几分钟商场。不知不觉中我们和外面世界的距离已经被模糊了。</p><blockquote><p>现在的年轻人已经不愿意去逛街了，他们更像是“探索者”。他们要是买日常用品，就到楼下的超市，或是在网上下单。但是，他们会为了新奇的体验专程出来探索，然后拍照发朋友圈，</p></blockquote><hr><p>◆ 托克维尔在阿那亚</p><p>现在很多人居住在城市，但是人与人之间的距离却并没有变短，对门邻居一年可能也没说几句话，有时候还真有点怀恋老家农村那种社群生活，没有人去专门管理，却自发的形成了大家都乐于遵守的准则，这或许也是一种进化吧。</p><blockquote><p>我理解的“托克维尔定律”是说：我们必须建立一种社群生活，才能更好地发现自我；只有当人们在公共生活中学会如何彼此相处，一个社会才能更加平等、和谐。</p></blockquote><hr><p>◆ 从云到雨</p><p>美国人似乎真是这样，它们能组织起浩浩荡荡的游行、维权和罢工，似乎有一只无形的手把数以万计的人聚集在一起。放眼国内，除了贴吧、微博这些互联网社群能偶尔压垮服务器外，线下社群可能跳广场舞的更多吧。</p><blockquote><p>“我在美国的时候看到，美国人干什么事情都不喜欢单枪匹马，而是喜欢组成社团。最初，当我听说美国有10万人宣誓不喝烈酒的时候，我以为是在开玩笑，没想到是真的。他们的行动宛如一个大人物穿上一身朴素的衣服，以引导民众戒除奢华。</p></blockquote><hr><p>◆ 范家小学的孩子</p><p>小时候我们都有一个梦想，或许是医生，或许是老师，或许是警察。现在更多时候却是为了生计奔波，是我们忘了初衷吗？也许只是相比小时候，我们见到的世界更大了，知道职业除了医生老师和人名警察还有很多，很难说自己10年后的梦想还和现在的梦想一样。</p><blockquote><p>一个男孩的理想是当棒球教练，一个女孩想当老师。</p></blockquote><hr><p>◆ 张校长</p><p>最后这一章的内容不是很认同，有些选择是因为没得选择，有些自信是因为无知。教育不止需要人性，还需要资源，如果说未来10年最好的学校会出现在农村，这可能会正确，但肯定也不会是现象级。</p><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会 </tag>
            
            <tag> 趋势 </tag>
            
            <tag> 何帆 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《超市里的原始人》</title>
      <link href="2021/01/02/chao-shi-li-de-yuan-shi-ren/"/>
      <url>2021/01/02/chao-shi-li-de-yuan-shi-ren/</url>
      
        <content type="html"><![CDATA[<p><strong>《超市里的原始人》，杰弗里·米勒著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>本书抛开历史分析的角度，另辟蹊径，将消费主义置于进化论的显微镜下，以此观察更大时间跨度中的变化。</p><p>现在大量消费主义著作都游走在热爱和厌恶两个极端，杰弗里则将对消费主义的理解置于人类天性和个体差异的生物学领域中，以尽可能宽广、深入的观点去重新审视消费主义，为两类极端的布道者提供更高、更近的共同立足点。</p><p>作者重点讨论了表现出了人类向其他人展现各种特质的本能的地位型消费（另一种是愉悦型产品），从生产出构成现代环境的商品、市场和生活风格的消费主义文化中，找寻我们内心追求地位的本能。</p><p>市场营销是现代文化的核心，而消费主义思想则是市场营销的核心。本书一直在鄙视传统消费主义，认为传统消费主义鼓吹了两大谎言。其一是，当我们在尝试与配偶、朋友或家人建立认真的长期关系时，高于平均水平的商品可以弥补我们低于平均水平的特质。另一个谎言就是比起任何自然行为，商品能为我们带来更酷、更吸引人的展示所需特质的方法。</p><p>在作者看来，我们都患上了消费主义自恋症，我们购买商品要么是为了地位，要么是为了快乐；要么是为了向他人展示，要么是为了愉悦自己；要么是为了向别人发出虚假的健美指标，要么是为了向自己发出虚假的健美状况暗示。</p><p>这种消费主义自恋直接导致了各种炫耀和攀比，生存的成本很低，但炫耀很贵，我们生活必须的空气免费，水也非常便宜，而炫耀的奢侈品却都很贵。那么我们到底想通过商品炫耀些什么呢？当我们在讨论购买商品来展现地位的时候，其实际意义是购买商品来展现我们的物质、精神或道德特质是要优于某个比较组中的其他人的。</p><p>那么发出自我炫耀的目的又是什么呢？作者觉得是寻求父母关怀、亲族投资、社交朋友和性伴侣。</p><p>从炫耀的类别上，炫耀可分为炫耀浪费，炫耀精度和炫耀声望，从炫耀浪费到炫耀精度的转变反映了消费的渐进式去物质化，在这种情况下，我们释放优势信号所凭借的是设计，而非重量；是复杂，而非大小。炫耀声望是一种极其高效的信号原理，它所留下的生态足迹很少，因为它的基础是感染他人思想的无实体的信息和媒体技术。</p><p>书中作者特意提到了六个核心特质（智能、开放性、尽责性、宜人性、稳定性和外倾性，作者缩写为GOCASE）来区别人类精神的关键个体差异。如果你知道某人在这些六大核心特质上的各项得分，就能对其性格、能力、品德等方面作出较全面的推论。</p><p>1.一般智能：也被称为聪明度、脑力、一般认知能力或者智商</p><p>2.开放性：好奇心，求新求异，思想开放，对文化、思想和美学的兴趣</p><p>3.尽责性：自制力、意志力、可依赖、始终如一、可靠、可信，以及控制冲动的能力</p><p>4.宜人性：温柔、善良、同情、移情、信任、顺从、谦逊、仁慈、和平</p><p>5.稳定性：适应、沉着、成熟、抗压力</p><p>6.外倾性：友好、社交、健谈、风趣、感情丰富、自信、活跃、追求刺激和社交自信</p><p>我们将心思过多地浪费在了商品上，这种原始的消费主义让我们感到肤浅和空虚，因为我们肆意并拼命地将自己投射到最广泛的大众面前，忘记了克制、保留和尊严等美德，失去了自我包容、自给自足、自我评判的能力。</p><p>既然是基于进化心理学消费主义，作者最后给出了针对性的建议，最主要的就是要驾驭住自己炫耀的意志，消费税或许是一个很好的方法。</p><hr><p>◆ 引言 性、进化与消费者行为</p><p>带着今天的消费主义去到3万年前，我们真的可以加速文明的进步吗？金钱作为今天消费市场的桥梁，几乎可以做我们能想到的所有合理的事情，可是，去到3万年前，它似乎一点存在的必要都没有。这说明文明的发展也是一个进化的过程，不会越阶，别说去到如此遥远的过去，就是过去几十年，今天的消费主义同样也行不通。就像每个能影响世界的发明都会经历两次，一次是走出实验室，一次也是走进工业界，领先时代太远，吃的不是螃蟹，是什么也没得吃。</p><blockquote><p>这时，你总算是找到了个突破口，于是开始介绍冰箱的作用。但你突然想起来，当时还没有像法国电力公司这样利用59座核电站提供冷冻所需能源的机构，这个话题又说不下去了。</p></blockquote><hr><p>作者在这里给自己留的flag还挺大，稍微具有一点辩证思维的人都会知道对消费主义纯粹的热爱和纯粹的厌恶都是极端的，那么最合理的肯定在这天平的中间某个部分。这种绝对平衡点可能根本不存在，不过希望作者能提供一些独特的看问题角度。</p><blockquote><p>我希望将我们对消费主义的理解置于人类天性和个体差异的生物学领域中，让消费主义的支持者和反对者能找到一个更高、更近的共同立足点。</p></blockquote><hr><p>◆ 前言 市场就是灯神，满足你的消费愿望</p><p>把产品分为地位型和愉悦型还是比较容易理解的，直白一点，就是一部分消费是为了从别人那里获得正向反馈，另一部分消费则是单纯的从自己获得成就感。说实话，很多人应该都是第一种，都是为了从别人那里获得正向反馈，很多对第二类商品的消费也是为了间接的影响第一类。人类是群居动物，而只要存在于关系网中就会存在对权利的向往，往大了说可以是意见领袖，往小了说可能只是家庭中的被理解。而很多在愉悦型产品上大量消费的人，原因可能是难以在地位型产品上获得优势，不得不采用比较迂回的方式让自己拥有成就感。</p><blockquote><p>粗略说来，产品可以被分为两个有交集的类别：</p><p>1.地位型产品：展现我们想要的特质，当别人看到我们拥有它们时，可以给我们带来“地位”的东西；</p><p>2.愉悦型产品：即便没人知道我们拥有它们，但还是能激活我们的愉悦开关，带来让我们产生满足感的东西。</p></blockquote><hr><p>这里观点比较犀利，马斯洛和杰弗里都是在说人类的需求，马斯洛把人类的需求置于了现代社会这个网络环境中，重点去描述了我们在这个环境中会做的事，基于的文明程度更高。而杰弗里则把需求置于了进化论的显微镜下，回到了生存和繁殖两个最原始的问题上，看得更真切。</p><blockquote><p>从进化学的角度来看，马斯洛的层次完全是一团乱麻。它将先天的驱动力（呼吸、进食、寻求地位、获取知识）和习得的想法（寻求财产安全、自傲和增加智慧）混淆了起来，并没有按照生存和繁殖这两大塑造人类行为的关键选择压力来对人类天性“庖丁解牛”。</p></blockquote><hr><p>这个有意思，今天我们看的杂志，资讯，信息流，不只是在向用户传达讯息，它们已经是市场的一部分，通过人们的注意力来赚钱。以前知道各个信息流都在抢占用户时长，但是直到这时候，把抢占用户时长看成是市场的一部分，瞬间感觉明朗了很多。所以今天网络上垃圾信息满天飞，各种推荐的劣质信息，各种三流写手写出的不知所云的观点，这不是他们的错，是市场迫使他们这么做。在这种市场环境下，我们注定从以前无信息可读的贫瘠沙漠走向无法选择的信息海洋。</p><blockquote><p>杂志的发行目的并不仅仅是为读者提供讯息，还是为了将市场的一部分，即读者的注意力，卖给广告商。</p></blockquote><hr><p>◆ 01 市场营销，找到你从未知晓的渴望</p><p>右翼相对于经济，往往持自由放任的态度，他们支持私有化，减少对自由市场的管制，所以在他们看来，市场是自由的，市场营销这种在某种程度上影响了市场自由的逻辑根本不存在，看似想市场营销的逻辑只不过是市场的规律罢了。相反，左翼者则认为，市场营销就是贪婪的企业家为了获取利益而操控用户行为的手段，他们一般不会与此为伍。</p><blockquote><p>在右翼经济学家看来，市场营销根本不存在，因为他们认为，价格体现了市场在生产人们所需的商品和服务时所需要的所有供需信息。</p></blockquote><hr><p>很认可，重要的商品来源于消费者偏好，而非生产者便利。这平时看起来不痛不痒，不过看看我们身边的产品，有时候一个APP上功能的出现，并不是因为消费者偏好，不过是因为流量和广告价值的驱使；或是看看我们自己平时的工作，有时候想做某件事，真的是因为这件事的价值，还是这件事正好自己可以做。是因为重要，所以重要，还是应该重要，所以重要。</p><blockquote><p>重要的是商品都是根据消费者的偏好而非生产者的便利，有系统地构思、设计、测试、生产和分配的。</p></blockquote><hr><p>◆ 02 每个人都患上了消费主义自恋症</p><p>看了前面对自恋的描述，好像感觉我们身边部分符合的不在少数，我们都希望得到肯定，寻求赞美，获得成功，这些来源于他人和来源于自己的需求促进了消费主义的发展。统计显示，所有人口中自恋的人还不到1%，只不过是我们都没有那么极端，不至于被送往精神病医院接受治疗。</p><blockquote><p>原始消费主义很大程度上就是通过创造这些条件并引发出这种能力而运作的。</p></blockquote><hr><p>读到这里有点理解书开头提到的三万年前的穿越了，现代人穿越回去很难跟原始人解释金钱的价值，因为他们的主要目标是生存，而生存的成本很低，还不需要金钱这种通货来消费密度更高的炫耀商品。</p><blockquote><p>生存几周所需的第三种必需品，即基本的素食类食物（谷物、豆类、水果、蔬菜）也都非常便宜，每磅成本不超过2美元。那么，从生存主义者的角度来看，除空气、水和食物之外的一切都可以算得上是奢侈品。当然，进化并不仅仅是让我们健康地活下来这么简单，它也是还存在成本密度更高的商品的原因所在。</p></blockquote><hr><p>从水到食物，到房屋，到电子消费品，到私人炫耀品，越往上，除部分例外商品，商品的实用价值基本上都有低成本密度的替代商品，相比于低成本密度高出来的成本，可能就是炫耀出来的价值。使用银条和金条来做消费主义自恋的领域判别，虽然有些武断，不过这真的是一个很有趣的角度，古代的通货还是有一些道理。</p><blockquote><p>当商品的成本密度超过银条（每磅225美元）时，我们就来到了消费自恋的神奇领域了。</p></blockquote><hr><p>◆ 03 消费主义错觉，产品背后的潜台词</p><p>别人真的会在日常生活中注意到我们使用的商品吗？可能要分为两种情况。对于刚认识或不熟悉的人而言，答案是肯定的，所有第一眼能观察到的展示都会在一定程度上影响对方的判断，不妨去观察一个知名律师的着装和大学教授的着装，或许更能理解这一点。而对于每天都见面的同学，同事，答案可能就是否定的，彼此之间太熟悉，他们闭着眼也能想象出你的形象，这和你今天穿什么没有关系，就像如果你不故意展示，很难有人知道你今天穿了一双新鞋，不过这种情况下，展示就一点存在的必要都没有了吗，可能也并非如此，比如你一件衣服连续穿了一个月，大家对你的认识一定会发生潜移默化的变化。</p><blockquote><p>大部分商品的广告都集中在一个关键的信息上：其他人会非常在意我们所购买、展示和使用的商品。</p></blockquote><hr><p>这里举例眨眼一看有点道理，多花的50000美元可以在作者此处所关注的角度获得更多的酬赏，但是这里至少可能存在三个问题。</p><p>第一，理性人假设是理论上上的，现实中人们都不理性，所以选择多花50000美元也情有可原；</p><p>第二，任何一个消费品的价值都不可能是单一的，特别是对于溢价较高的产品，带来的很多效应在当下市场不可度量，如果仅从单一角度看有失偏颇；</p><p>第三，商品和商品之间的比较价值仁者见仁，因为人们不同的偏好，才会有今天如此纷繁复杂的商品种类，对比两者只能从某一角度，不宜直接定论孰优孰劣。</p><p>虽然至少有上面三个问题，但是作者这里的角度还是值得认可。</p><blockquote><p>假设一位男性车主由于选对了汽车，因而平均每年得到了一次额外的短期恋爱经历。而雪佛兰科尔维特Z06的价格（70000美元）要比大小差不多且报废年限同样为5年的雪佛兰美版迈锐宝的价格（20000美元）高出整整50000美元。</p></blockquote><hr><p>◆ 04 自我炫耀与自我推销</p><p>不管发出什么样的信号，均有一个必须跨越的成本，这成本有高有低，需要跨越的成本越高，相对而言壁垒也会越高，这作为一种优胜劣汰的基础系统，经常能先于个体做出模糊判断。这或许就是高成本信号理论存在的价值。</p><blockquote><p>1975年，以色列生物学家阿莫茨·扎哈维（Amotz Zahavi）就提出，高成本可以保证品质信号的可靠性。他的妨碍原则认为，只有高品质的动物才有资本浪费时间、精力和资源去发出高成本的信号，即他所谓的“妨碍”。</p></blockquote><hr><p>这个广告语很给力，直接宣扬出了产品的定位，这相比现在很多产品的广告语，已经是非常厉害了。不过廉价奢侈品，从作者的角度看，或许有点矛盾。我们买奢侈品的目的是为了自我炫耀，获得认同，可是当大家都知道这是廉价品的时候，就达不到奢侈品的效果了，何来廉价奢侈品一说。</p><blockquote><p>人造钻石的制造商诗思（Charles&amp;Colvard）在广告中宣称它“并不是钻石的替代品”，而是“廉价奢侈品的一种全新的选择”，它“提供了经济独立的女性所需的价值、品质和时尚，摆脱了钻石的情感负担”。</p></blockquote><hr><p>这句话让人打开了新世界，我们经常觉得商品的广告都是展示给潜在购买者的，毕竟这些人才能为商品带来直接的消费额，但是进一步探究，他们为什么购买这些消费品，除了一些真正实用的特点外，还有一部分来自社交群体的刺激，所以广告一部分还展示给商品的观察者。当把商品放到社交网络中，再加上动物自我炫耀的特点，感觉就是不一样的味道了，这里太刺激。</p><blockquote><p>所有的广告在实质上有两类观众：一类是潜在的商品购买者，另一类是潜在的商品观察者。后者会认为，该商品的主人拥有各种各样他们所需要的特质。商品越是昂贵和稀有，后者所占的比例就会越高。因此，宝马的大部分广告的目标受众其实都不是潜在的宝马车主，而是潜在的宝马崇拜者，诱使他们尊敬那些能买得起这些汽车的极少数人。</p></blockquote><hr><p>◆ 05 炫耀你能承担的最昂贵信号</p><p>信号的高成本不止有发出成本，还有维护成本。发出一个信号可以收获父母关怀、亲族投资、社交朋友和性伴侣等多个好处，这可以很好的解释为什么会有发出成本，但是维护成本是为了获得什么呢？可能是为了避免前面的发出成本变成沉没成本吧，这也是所有维护成本的价值所在。</p><blockquote><p>检测和惩罚欺诈者对于个体而言是得不偿失的事情，因为它需要花费时间、精力，还具有一定风险，但对于群体而言是一件有益的事情，因为它确保了徽章的可靠性，所以它本质上是一种利他行为。</p></blockquote><hr><p>◆ 06 消费的关键不是拥有商品，而是自我展示</p><p>当把运动变成炫耀的工具，这种追求就不会有止境，从这个角度看不禁让人唏嘘，人们为什么跑马拉松，为什么完成铁人三项，不排除随着经济水平、医疗健康的发展，人们对自己对身体有了更高的要求，但是向别人传递一个更强的信号必定也在列。</p><blockquote><p>铁人三项是展现强健特质的一个经典例子。它不仅对生理健康，而且对财富、训练时的努力和尽责性都有更高的要求。相比马拉松，它还能带来在总体健康、力量和生育能力方面更符号人类性偏好的肉体。铁人三项取代了马拉松，就例证了信号的一个关键原则：强信号总是能覆盖弱信号。</p></blockquote><hr><p>◆ 07 一般智能与大五人格</p><p>也测试下，奇数项和20，偶数项和10，似乎特质还勉强可行。</p><p>附：</p><p>1.有着活跃形象的人    4</p><p>2.有些艺术兴趣的人    2</p><p>3.做事负责到底的人    4</p><p>4.容易偷懒的人    2</p><p>5.总体上值得信任的人    4</p><p>6.容易找别人问题的人    2</p><p>7.放松、擅长处理压力的人    5</p><p>8.容易紧张的人    2</p><p>9.外向、爱社交的人    3</p><p>10.沉默寡言的人    2</p><blockquote><p>计算分数的方法：问题1和2表明开放性；3和4表明尽责性；5和6表明宜人性；7和8表明情感稳定性；9和10表明外倾性。在每两个问题中，将奇数项的得分减去偶数项的得分，得到的就是你在对应的大五人格上的得分。分数最低为-4（该特质极低），最高为+4（该特质极高），平均水平则约为0。</p></blockquote><hr><p>◆ 08 被消费者炫耀，被市场营销忽略的四大特质</p><p>或许优秀的人总有那么一点特立独行，对于一般的人来说，当主流期刊杂志的观点与自己的观点不符时候，常常会质疑自己的观点是否正确，而作者这里却非常犀利的指出消费者研究没有跟上性格心理学的脚步，不管是否正确，这种魄力是我们很多时候缺少的。只是坚持自己的观点很简单，给自己的观点提供足够的证据很难。</p><blockquote><p>基本上，消费者研究根本就没有跟上性格心理学的最新发现的脚步，也没有认识到大五人格对消费者行为和自我展示的影响有多么强烈。</p></blockquote><hr><p>◆ 09 特质一：一般智能</p><p>名牌学校的毕业照本身就是一种IQ的保证书，他们当然不愿意与廉价快速的IQ测试同台竞技，但是他们又想在其他IQ测试中获得优越性，这种爱恨交加的感觉真的是太折磨人了。一种潜在的方式或许就是制定一种新的行业标准，可是这种情况下，别人也可以制定标准，如此博弈也很难有均衡点。</p><blockquote><p>名牌大学可不希望被竞争对手挖墙脚。它们不想将自己昂贵的IQ凭证与那些廉价而快速见效的IQ测试进行竞争，因为这会让智能展示品的市场大众化，并促使其成本降低。因此，名牌大学与智能测试之间产生了一种伪善的、爱恨交加的关系。</p></blockquote><hr><p>智能更多的是一种内在存储，如何让这种内存展示出来，前面提到的IQ凭证是一种方式，除了IQ凭证，我们还需要更加丰富的商品和服务折射，这就为研究消费主义的人提供了着手的角度。那么最直接有效的折射，可能就要算智能标识了，独特的智能标识可以让消费者有效的向别人传达自身智能。</p><blockquote><p>教育凭证绝不可能是我们买来展现自身智能的唯一商品，通过消费主义而折射出来的智能自恋引出了一系列丰富多彩的实用商品和服务</p></blockquote><hr><p>◆ 10 特质二：开放性</p><p>这个很神奇，在开放性这种本身就很具有开放性的问题上，不管你所在何处，都能体会到唯我独尊的感觉，如果说所有人的一般智能构成了一个钟形曲线，那么所有人开放性可能就是一条水平的直线，每个人都在最高点，也都在最低点，这仅仅和自己的开放性有关。</p><blockquote><p>开放性是一种有趣的特质，无论你处在开放性指标的哪个位置，那些比你封闭的人看起来都会显得无聊、愚钝、保守和迂腐，而比你开放的人又显得古怪、奇异、爱捣乱、危险，甚至像精神病。</p></blockquote><hr><p>这里似乎找到了一点纹身的证据，纹身主要集中在青少年、一些特定领域工作人员及少许爱好者。大多数纹身者（可能需要除去单纯的爱好者）都是为了向别人传递一种“豪横”的信息，而这种“豪横”正好可以通过自己身上愈合良好的自残伤口表现出来。</p><blockquote><p>如果你作为一个健康、有活力的年轻男人或女人，尽管住在一个寄生负载较高的地区，身上却有着许多愈合良好的自残伤口，那么你就以真凭实据证明了自己的健康状况是非常优秀的。</p></blockquote><hr><p>◆ 11 特质三：尽责性</p><p>对比鲜明，人们越是不太自己做饭，越是希望挥霍金钱和空间来展示自己做饭技能。这种在金钱和空间上展现出来的是人们对做饭这件事的尽责性，当友人来时，做饭的空间可以给他人展示一个自己会做饭的假象，和邻居聊天时，讨论自己在维护厨房花费的时间和金钱也可以表达自己会做饭的伪能力。</p><blockquote><p>我的外祖母弗吉尼亚·贝克（Virginia Baker）每天都会在2米×4米的厨房里为她的12个孩子准备三餐，而她的厨房里只有一个四芯炉灶和一个结实的搅拌机，你看不到什么料理台、食品加工机、垃圾处理机或者洗碗机。如今许多郊区家庭里堆放的厨具简直可以满足一支驻扎在动物园里的军队的需要了，而这每一件厨具都以其自身的设计演绎了维护守恒原理。</p></blockquote><hr><p>以前一直认为养犬（或猫）是一种精神上其他寄托，作者这里给出了另一角度——尽责性，甚至不同的犬种还表现了主人不同的自我管制能力，从这个角度好像就能解释另一个现象，同样是宠物，有人养鱼、有人要犬、甚至有人养老虎，这种差异是如何造成的呢，他们的出发点可能都是在表达一种特性——自我管制能力。当然这只是一个观察角度，养犬的人是精神寄托，养老虎的人是彰显自我管制能力，这也完全可能。</p><blockquote><p>犬类的饲养要求特别高，所以也是宠物中比较能建立主人声望的一种选择。不同的犬种让它们的主人能证明不同类型的自我管制力。</p></blockquote><hr><p>◆ 12 特质四：宜人性</p><p>很多人在宜人性上表现出来的意识形态往往是另有目的，他们或许是为了声望、或许是为了金钱、又或许是为了性，这虽然听起来有点讽刺，不过相比于更大范围的意识形态来说，多数人还是更加关注自己的利益。在这一点上，中国人算是在意识形态上关联强度非常高的了，不只是把宜人性上升了一个高度，更是一种合力。</p><blockquote><p>刚成年的男性和女性往往会耗费大量的时间、金钱和精力，通过意识形态来释放他们的宜人性信号。</p></blockquote><hr><p>◆ 13 驯服离心的灵魂</p><p>看了后文回过头来写点想法，这里作者有点为了减少而减少的感觉，本书一直在倡导用进化心理学的角度看待消费主义，我们的自我展示、炫耀都是为了在社会关系中获得金钱、地位、性。如果是通过廉价商品、陈旧替代、租赁、借等方式来满足需求，还谈何在进化论观点中获得优势，有时候获取一个东西真的是在东西本身吗？或许并不是，是它的附加产物吸引了我们，所以有时候一味的努力寻找替代方法并不一定是好办法。</p><blockquote><p>对一个人的自我展示策略进行仔细而理性的观察，也许更加明智和有创造性。也就是说，我们要评估他们真正的社交和性目标，他们作为特质展示物的可靠性和有效性，以及其他可选的种种替代方案。</p></blockquote><hr><p>暂时不论零售环境设计的巧妙之处，就满足我们的购物需求而言，我们需求一般会被满足两次，一次是想拥有的时候，另一次是真正购买的时候。满足“想”这个动作很容易，每天我们可以想很多东西，付出的最大成本也就是时间，所以每天晚上会有上千万的人逛淘宝而不买东西。另一次满足是真正购买，这次满足来得一般没有“想”的时候强烈，这不过是在实现“想”的结果，而真正获得商品的时候会觉得并没有那么的喜悦了。</p><blockquote><p>假设有一件你想要购买的商品，你已经看过了广告，对该商品垂涎欲滴。我们就假设这是一款有10T内存的新款iPad吧。你来了一次小小的商场奇遇：耳中听到的是流行怀旧轻音乐，眼前看见的是脸上挂着谦恭微笑的销售员，脑中想着的是找到那款全新商品，这正是理想的零售环境。</p></blockquote><hr><p>◆ 15 消费自由合法化</p><p>政府一般会鼓励普通消费，但是尽量避免炫耀性消费。所以现在人们可以很容易获得消费信贷，相反，如果使用信贷去做其他投资则会被明令禁止。同时为了避免炫耀性消费，对于炫耀性消费的商品往往会有更高的税收。从金钱源头鼓励正常消费，从商品源头避免炫耀性消费，很是聪明。</p><blockquote><p>消费税会降低炫耀性消费，并促进长期的退休保障、家庭财富、社会福利、技术进步和经济增长。</p></blockquote><hr><p>消费税可能带来的五大好处</p><p>1.人们会更多地减少浪费、增加重复利用和再回收利用，因为只有购买新的零售商品是收税的。</p><p>2.消费税还能创造出一系列动机，让人们在二手市场购买再销售价值更高、更耐用的商品。</p><p>3.消费税会鼓励人们购买运行时所消耗的能量和物质较少的商品。</p><p>4.消费税可以增加社会资本，促进邻里友情。</p><p>5.消费税可以增加储蓄、投资和慈善。</p><blockquote><p>消费税可能带来的五大好处</p></blockquote><hr><p>不止社区需要标准，每个人也应该有自己的标准，有句话说的是，不要和别人比，要和自己比，只在置身在这个社会网络中，我们经常身不由己，改变不了别人，或许可以制定自己的价值和标准，说不定就影响到更多人了呢。</p><blockquote><p>我们需要与拥有类似思维的人们结对生活的自由，并建立一种有自己的价值和标准、凭借自己的奖励和惩罚形式来维持的更为多姿多彩的本地社区。有的社区可以将注意力集中在炫耀性不道德消费上，有的可以转向炫耀性道德消费或炫耀性道德投资。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消费主义 </tag>
            
            <tag> 进化论 </tag>
            
            <tag> 杰弗里·米勒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《屏幕上的聪明决策》</title>
      <link href="2021/01/02/ping-mu-shang-de-cong-ming-jue-ce/"/>
      <url>2021/01/02/ping-mu-shang-de-cong-ming-jue-ce/</url>
      
        <content type="html"><![CDATA[<p><strong>《屏幕上的聪明决策》（新零售三部曲），什洛莫·贝纳茨 乔纳·莱勒著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>这本书让我产生了非常强大的共鸣吗，其中很多观点虽然并没有让我茅塞顿开，但让我再一次认识我对当下屏幕的理解。</p><p>本书主要可以包含两个架构，信息架构和选择架构。信息架构是不同的信息形式可以改变人们处理它的方式，比如使用非流畅字体可以提高数字阅读理解能力；而选择架构则展示了如何通过屏幕设计和产品布局来影响人们的选择。</p><p>整体内容可以分为七个部分，分别是心智屏幕，第一印象，中区偏见，有限反馈，困难屏读，个性化，帮助选择。这在书中的最后工具部分有很好的总结。</p><p>整体而言，本书值得大多数在互联网圈摸爬滚打的人读，我们每天有大量的时间花在屏幕上，可似乎并没有很多人仔细认识我们屏幕后面的逻辑，这里面其实有丰富的商业逻辑、思维模式和心理学效应。</p><p>更多思考见书中想法笔记，此处附作者最后给出的打造聪明屏幕的工具，差不多来源本书目录，也是本书精髓。</p><p>01 物理屏VS．心智屏，心智屏才是重点</p><p>关注心智屏，而不是物理屏</p><p>考虑注意力环境因素</p><p>利用信息压缩技术</p><p>结合注意力过滤器</p><p>02 第一印象冲动，50毫秒的力量</p><p>快速测试你的网站</p><p>最大化本能美</p><p>不确定时，一切从简</p><p>记住：功能追随形式</p><p>03 中区偏见，屏幕位置效应的热点与冰点</p><p>优化热点位置使用</p><p>避免冰点位置</p><p>考虑热点位置的不同文化差异</p><p>考虑横向偏见</p><p>有时候需要缩小而不是放大</p><p>04反馈太多，我们反而视而不见</p><p>调整反馈的数量 使用即时反馈</p><p>利用新起点效应 让我们感受到反馈</p><p>可能的情况下多鼓励少批评</p><p>意识到社交媒体的趋同性效应</p><p>考虑到屏幕带来的匿名性</p><p>使反馈附带上行动计划</p><p>05 屏读，困难是必要的</p><p>考虑使用难看字体（和其他视觉不流畅的形式）</p><p>利用感知不流畅性减缓大脑运行速度</p><p>调整不流畅程度以实现网站的目标</p><p>06 “个性化”的诱惑力</p><p>利用视觉个性化和视频个性化</p><p>调整信息发送时点</p><p>根据个人调整菜单</p><p>提供多个不同的网站</p><p>过于个性化会导致事与愿违</p><p>07 应对屏幕上的选择困难</p><p>提供可控的考虑范围 个性化分类</p><p>避免导航过载 管理属性过载</p><p>采用选择淘汰赛</p><p>使用选择结束法来管理选择后懊悔</p><p>最大化提高满足度，而不是点击数</p><p>08 更聪明的屏幕，让我们更聪明地决策</p><p>从选择架构入手</p><p>设置正确的信息环境</p><p>创造思考工具</p><p>未来的工具</p><p>利用科学来引导你的设计。采用A/B测试</p><p>定期进行白板训练</p><p>记住：媒介塑造信息 </p><hr><p>◆ Booking为什么能抢走希尔顿酒店1/4的收入</p><p>在线旅行社的提供的流量决定了其议价能力，其虽然没有为酒店更换床单，支付员工工资，但是其为酒店带来了更多的客户。想象一个，假如一个OTA每月能为酒店带来100个客户，酒店在每个客户上可以赚取50%，即使去掉30%的佣金，还有20%。而不通过OTA，这20%可能都没有，而且酒店一般都有规模效应，增加客户对于房间数来说是固定成本，其它成本都是边际递减的，客户少时，大量的固定成本仍然存在，而且在OTA上，还能有大量广告位的机会，所以就算除去佣金没有多少利润，也有酒店愿意这么做。</p><blockquote><p>在线旅行社收取的佣金比例通常是20%～30%。想想看，当你通过Expedia或Priceline又或Travelocity进行酒店预订时，四晚中一晚的房费就归在线旅行社了。它们没有帮你换床单、加热泳池或者补给房间内的迷你吧，更不用还贷款和支付员工工资，却拿走了酒店收入的1/4。</p></blockquote><hr><p>◆ 注意力，21世纪最有价值的资源</p><p>限制我们可以处理信息的因素不是屏幕上内容的多少，因为现在大部分屏幕上的内容都是过量的，真正制约着我们的是注意力。所以往往很多简洁的界面更能让我们感到舒适，即使在功能丰富的工具类APP，也不能让功能隐藏太深，要不用户可能永远发现不了。</p><blockquote><p>限制我们可以处理的信息量的因素往往不是屏幕所显示的内容的多少——屏幕上的信息量几乎总是超过大脑可以接收处理的能力范围，真正的限制因素是稀缺的注意力，因为我们不能同时处理更多的事物。获得诺贝尔奖的心理学家赫伯特·西蒙（Herbert Simon）是最早发现这一现象的人之一。</p></blockquote><hr><p>信息时代，我们浑身湿透，却依旧干渴。大量信息就像溪流汇聚成河流，再到大海，可我们能用淡水止渴，海水却只能越喝越渴，即使海浪奔涌，口渴依旧，而且我们也接受不了高压水枪的冲击。</p><blockquote><p>颇具讽刺意味的是，随着信息时代的到来，我们面对信息却更加无力。我们的注意力已经消耗殆尽，如果拿消防水龙带作比喻，那就是我们已经浑身湿透，却依旧干渴。如</p></blockquote><hr><p>◆ 别再征收“认知税”</p><p>在思考的快与慢，7正负1到4正负1，意志力局限，信息复杂度等多种因素的共同作用下，我们的注意力不断减小，信息一直都在哪里，我们视觉接受到的信息也一直都是那些，我们并不是没有看到，只是没有注意到罢了。</p><blockquote><p>我们闯红灯并不是因为没有看到它，而是因为没有注意到它。即使一个日常行为也会变得极其危险，因为我们的注意力用尽了。大脑就像一个挣扎着想运行新系统的旧电脑一样。</p></blockquote><hr><p>◆ 本章测试 你的屏幕有没有压垮用户？</p><p>心智屏，物理屏，两者的不匹配会随着信息量的增加越来越多。如果加上现实环境屏，这种不匹配会更多。把我们身处的环境与当前注意力可以覆盖的物理屏做到尽可能平衡，或许有很大的商机。</p><blockquote><p>你是否考虑了注意力的环境因素？当我们致力于多任务时，心智屏就会缩小。这里有一个明确的建议：汽车的GPS屏幕应该根据车辆行驶速度来调整显示信息量。当我们在红灯前停下时，屏幕可以正常显示，但如果我们行驶在高速公路上时，或许应该适时退出，什么也不显示。</p></blockquote><hr><p>◆ Tinder每天12亿次滑动从何而来</p><p>每天被大量的信息“冲击”，我们处理信息的速度也发生了变化，接受一个信息并给出判断，可能只需要50毫秒。用快速的直觉判断替代思考，更别说深思熟虑，更可怕的是我们经常在直觉判断之后就作出了相应的行动。</p><blockquote><p>网络世界是如此视觉化，以至于我们很容易就滑入更依靠直觉的思考模式。这并不是说屏幕让我们更肤浅，而是说屏幕世界让我们更容易基于这些肤浅的第一印象行动。</p></blockquote><hr><p>◆ 每一个用户都有自己的审美算法</p><p>如果一个网站可以提供诸多可以由用户自由选择的背景色彩，以迎合不同人的审美算法，如此可以为用户提供让他们舒适的复杂屏幕环境，这种背景可以吸引用户大量注意力，此时用户注意到价格、广告、推荐等的注意力会下降，在看到但并没有注意到的情况下开始行动，或许有意想不到的效果。而且多一个选项，对初始用户的打扰并不大，A/B测试效果或许会很明显。</p><blockquote><p>赖内克从色彩开始进行研究。许多研究已经表明，色彩可能会显著影响我们对网站的反应，从而切实影响我们的浏览和购物决策。</p></blockquote><hr><p>◆ 颜值高不代表肤浅</p><p>这一点不得不说国内很多政府网站和金融机构网站，做得真的是很“复古”，互联网技术已经在中国高速发展了20年，可很多网站似乎一点也没有改变，还是很硬的机械框感觉，特别是很多金融机构，对外打着金融科技的旗号，却连一个官网都懒得翻新。</p><blockquote><p>这些网站光是不美观、吸引力不足就已经够糟糕了。然而数据显示，网站缺乏吸引力，将直接牵扯到其他更重要的问题，比如会被认为是缺乏实用性、不可信的。这些相关性可能并不理性，但仍然影响着数百万消费者对网站的认知。考虑到后果是这样严重，而重新设计网站又相对便宜，显然我们应该将网页变得更美观。在多屏时代，颜值高并不代表肤浅。</p></blockquote><hr><p>◆ 《超级战舰》，舰队究竟藏在哪里</p><p>中区偏见，我们好像一直都知道，但又一直都无视它们的存在。这可能和我们通常看到的屏幕有关，平常重要的信息总是居中的，训练我们总是去中区寻找主要信息，不那么在意中区好像有点反常识，这种习惯可能真的已经在被某些商业活动利用。</p><blockquote><p>我认为更有效的解决办法是把相关图片分成一系列部分重叠的图片，让一张图片的边缘处于另一张图片的中心位置。问题的核心不是放大倍率，而是消除边缘，确保图像的每个部分都在某个情报员的视线中心区域。</p></blockquote><hr><p>除了人们的注意力被训练得重视中区，会不会还有一种人体的硬件原因，就像超市希望畅销的商品总是放在我们目光平视能触达的区域，因为当我们仰视或弯腰低头时，需要更多主观能动性的参与，可我们通常都比较懒。</p><blockquote><p>屏幕这一媒介高度依赖视觉呈现。手机、平板电脑和个人电脑都迎合我们的视觉感官，方寸间闪闪发光的像素屏幕把世界摄于一屏，消耗我们所有的注意力，从嗅觉到听觉的所有其他感官几乎都被忽略了。</p></blockquote><hr><p>◆ 抢占“第一注视点”</p><p>注视中区是我们不需要过多思考的习惯，只需系统1的参与即可，而注视边缘需要更多系统2的介入，当其它信息过多，消耗了大量系统2的意志力，自然大量的视觉行动会依赖系统1，所以偏见效应也会更明显。</p><blockquote><p>我们上网的习惯，比如，一边在淘宝上购物，一边浏览微博的状态更新，同时回复手机上的短信——会放大视觉系统的偏见效应。</p></blockquote><hr><p>◆ 即时有效的反馈，获取倒U形曲线的最佳位置</p><p>反馈太多，即使信息有用，我们也经常会无视它们的存在，大量的反馈反而让我们作出愚蠢的行动。就像做一个系统或产品，我们经常喜欢做各种监控，报警，报表等，刚开始的时候会看，然后逐渐忽略，本来是为看帮助我们更好的管理系统或产品，可逐渐形成的无视会带来更加严重的后果。</p><blockquote><p>有时，反馈过多会让我们对信息失去兴趣，最终无视所有信息，即使这些信息可能有用。反馈过多也会让我们反应过度，会使本来糟糕的情况更糟。原本反馈可以帮助我们做更聪明的决策，这下却帮了倒忙。</p></blockquote><hr><p>◆ 反馈过多，比没有反馈更可怕</p><p>我们都有损失厌恶，就像我们更愿意卖出盈利100元的股票，而不是卖出亏损100元的股票，即使从股票盈利能力来说，已经盈利100元的股票继续盈利的可能性更大。损失厌恶常熟于心，可短视损失厌恶却并不那么被重视，换个角度，短视会导致我们频繁决策，每一次决策都会受到损失厌恶的影响，累计起来，损失自然会更大，只是多数人在做完短视决策后，觉得收获了所谓重视的时间。</p><blockquote><p>短视损失厌恶</p><p>人们在频繁决策时会表现出短视，频繁地评估短期收益，并因损失厌恶而减少风险投资的现象。</p></blockquote><hr><p>◆ 匿名的屏幕，松绑效应的两面性</p><p>因为屏幕的匿名性，使得我们在屏幕上产生和接受的信息如洪流般增加。我们研发产品时的各种监控、报警、报表就是在这种默认规则下产生的，毕竟计算机发送一个监控邮件也不麻烦，更何况它只是一个0、1控制的机器，不间歇的让它工作，我们也不会有负罪感，只是这种频繁的反馈给我们的聪明决策带来了严重的负担。同样，因为没有实际感知，也诞生了网络暴力，如果是面对面交谈，很多暴力言语和行为或许都不会发生。</p><blockquote><p>在晚宴上，我绝不会对主人说我不喜欢他的食物，即使这是事实；而点评网站上则充满了愤怒的评论，因为人们可以对着屏幕发泄怒气。</p></blockquote><hr><p>这种网络松绑效应，想想还挺可怕，避开现实的约束，我们必定更加放纵，这种放纵会逐渐趋向人们原始的本能欲望，在数据驱动下，这种欲望变得可被预测，可被掌控。</p><blockquote><p>为何人们会在屏幕上订购不利于健康的食物呢？戈德法布和同事认为，这种现象是由网络松绑效应驱动的，我们不必担忧其他人会怎么看我们不健康的订单（之前的研究发现，当受试者意识到科学家正在跟踪他们的食物摄入时会摄入更少的卡路里，在其他人面前，人们更愿意留一些食物在餐盘之中）。换句话说，因为屏幕几乎不给我们反馈——数码产品不会做判断，我们会随意放纵自身最不负责任的需求。</p></blockquote><hr><p>◆ 有效反馈的7大准则</p><p>把这七个准则串起来就是，遵循证据在合适的时间（找准时机）个性化的给予适量（避免给过多反馈）正负反馈（平衡正负反馈），并触发一种情感以指导相应行动。</p><blockquote><p>我们需要知道在倒U形曲线的最佳位置，但是也应该试验反馈的样式和风格，不断改进这些新的镜子。我们需要从自身的反馈中得到反馈。</p></blockquote><hr><p>◆ Kindle能取代纸质图书吗</p><p>人多思维方式具有惯性，我们从小学开始，绝大多数阅读都是在纸上进行的，这潜移默化的培养了我们对纸质阅读的依赖性，转移到屏幕阅读，阅读质量和效率肯定都会降低，这不仅仅是因为屏幕上字体的变化，举个例子，如果你习惯了用圆珠笔写字，一下子让用钢笔写，字体工整程度和效率也会下降。虽然屏幕阅读有很多缺点，但是也并不是一无是处，就像我写下这个想法，当后面某读者读到此处给予我一个点赞或评论的反馈，我可以再次回顾我曾经的想法，这是纸质阅读做不到的，在纸质阅读中除非我脑海中再一次浮现这个想法，否则这个想法就被冬藏了。</p><blockquote><p>过去几十年来，科学家们讨论阅读理解时总假定显示器的显示质量是至关重要的变量，是对我们学习的约束。然而，我们现在有了不再逊色于纸质的屏幕，在图像质量方面甚至好于纸质，但数字阅读的差距仍继续存在。</p></blockquote><hr><p>◆ 视觉不流畅与认知不流畅</p><p>增加阅读的不流畅真的可以提高对阅读文本的理解吗，至少我读到这里是持怀疑态度的。阅读不流畅的确会使阅读过程慢下来，但慢并不代表思考，作者前面说过注意力，我们在屏幕上的注意力是有限的，如果大量的注意力放在了阅读文本上，那即使读得慢，也并没有太多的注意力供我们思考，甚至在这种情况下，阅读效率和质量或许会更低。</p><blockquote><p>多项研究表明，增加不流畅度会使受试者更仔细地处理信息。相对于仅仅阅读文本，他们会被迫去思考，快速运转的大脑会变得慢下来——要知道人们面对屏幕可能思考得更快。其结果是，人们更加深入地融入到材料中去了。</p></blockquote><hr><p>摄影损伤效应，原来还真有这种效应，我们经常会把课堂上的课件，工作演讲中的PPT，平时看到的好的文字，拍照、截图保存下来以备后看，可是当那一时刻过去，似乎从来没有再次翻开过。</p><blockquote><p>摄影损伤效应</p><p>为了抓住某一瞬间，人们拿出了相机，但几乎不动脑子，以至于错过了眼前正在发生的事情的现象。</p></blockquote><hr><p>◆ 确定“难度”的正确剂量</p><p>不流畅不是一味的增加阅读的难度，是为了让整个阅读过程慢下来，让读者有时间和空间去思考。如果一味的增加文本的阅读难度，只会消耗注意力。所以从这里看，不再同一个维度增加不流畅，或许效果会更好。就像面对摄影损伤效应，只要放大某一个细节，这个动作不消耗过多注意力，消耗的是体力，但同时留下了更多的思考时间。</p><blockquote><p>最好的设计不是让眼睛看起来更方便，相反，它是认知易用性需求与必要难度的平衡。</p></blockquote><hr><p>◆ 视觉个性化，打动用眼球“思考”的人</p><p>这个太有创意了，在查询养老保险的时候，模拟展示年老时候的容颜与状态，这肯定比任何引导人们存储的语言都有效。用户使用每一个产品，都是抱有一定预期的，对于用户需要长期坚持的积累，提前让他们看到一部分坚持之后可能会有的效果，或许会更有动力。</p><blockquote><p>我和赫什菲尔德以及戈德斯坦目前正在做一项实地研究，试图弄明白当人们在线查询401（k）养老保险账户，并同时看到自己年老时的照片时，会不会在现实世界里多存一些钱，而不是只在实验室里。</p></blockquote><hr><p>◆ 时间里程碑，抓住新起点效应</p><p>还记得每年年初为自己制定的新年计划，或者生日的时候制定下一岁计划。这些都是新起点效应，我们总想为某一个时间点赋予更多的含义，这其实不算坏事，换一个角度说，这也是生活的意义，不断去追求，而且制定一些计划也有必要，虽然变化总比计划快，不过好在计划让我们在面对快速的变化时慢了下来，让变化变得不那么流畅。不过需要留意自己的新起点效应是否正在被某些公司进行商业利用。</p><blockquote><p>新起点效应</p><p>一年之中的“新起点”会出现在一些临时制定的标志时间点，比如生日、新学期开始，甚至是每周一。在这些时刻，人们会更容易设定目标，并且达成目标的可能性更大。</p></blockquote><hr><p>◆ 本章测试 你会利用个性化工具吗？</p><p>突然想到，航空公司如何个性化，或许可以为每个在传统节日当天坐飞机的乘客提供一个具有传统节日符号的定制贺卡。如果是会员，贺卡上有会员名、生日、航空公司对该乘客的客户服务经理电话等信息。如果不是会员，贺卡上提供快捷的注册地址，会员能享受的福利信息等。如此或许是一个不错的主意。</p><blockquote><p>有趣的是，另外一家星空联盟航空（Star Alliance Airline）的成员土耳其航空公司却记住了我的生日，虽然我搭乘它们飞机的次数远没有联合航空那么频繁。虽然这里有一点客套成分，而且也花不了航空公司什么钱——但我记住了土耳其航空。</p></blockquote><hr><p>◆ 如何从78000种医疗保险计划中找到最佳选择</p><p>回到20年前，我们很多时候可能是没得选择，而今天，我们面临不是选择不够，是选择过剩。引导帮助用户选择，可能会取得更好的结果，比如像餐厅里的各种套餐，必点餐品就是在这种情况下衍生的。</p><blockquote><p>政府以为给人们提供大量选择就足够了，但那仅仅是第一步。下一步同样重要，我们需要给人们提供一个流程，帮助他们缩小可选择的范围，从而选到好的方案。</p></blockquote><hr><p>个性化推荐就是在这种条件下的局部最优化产物，用户面对的选择太多，那就按照用户历史的兴趣去帮助用户选择。</p><blockquote><p>仅仅在屏幕上提供无限选择远远不够。如果你想要成功，就需要帮助人们找到正确的选项。无论你是提供1.5亿种商品，还是数10种不同的医保方案——用户需要网站和APP帮助他们更方便地做出聪明决策</p></blockquote><hr><p>◆ 三次无效点击原则</p><p>不太确定三次点击是否真的能阻止用户，不过随着交互次数增加，用户数量绝对会减少。所以在很多产品中，那些不太想用户进行的操作入口往往都比较深，比如注销，退出登录，解绑信息等。</p><blockquote><p>三次点击原则</p><p>交互设计领域的基础理论之一，如果用户在三次点击中无法找到信息和完成网站功能，就会停止使用这个网站。</p></blockquote><hr><p>◆ 重塑屏幕上的选择架构</p><p>大多数人对自己的未来总会有偏优的预估（少数悲观者除外），他们对生活的预测会相对平滑，比如医疗需求多而少，不需要更大的免赔额。但很多时候，让他们陷入困境的往往是那些大而少的意外事件。</p><blockquote><p>· 方案A：每月的保额为150美元，免赔额为1000美元</p><p>· 方案B：每月的保额为100美元，免赔额为1500美元</p><p>如果你和大部分人一样，你会选择方案A。这个方案看上去更合理，风险也更小，免赔额也低了33%。</p></blockquote><hr><p>这很符合直觉，我们每天会面临着大量的选择，而且大多数的选择并不会经过严密的逻辑思考，很多时候我们都会随大流。金银铜三种颜色的标签虽然并不表示商品本省是否有相关产品属性，但对于用户而言，金色给人的价值就会比铜高，这是金属的类比价值导致的，这在用户看来已经成为了商品属性的一部分，而且还是用户的一个重要参考依据。</p><blockquote><p>但科学家发现事实并非如此。在调换了金属标签之后，他们发现数学能力低于平均水平的人更偏向选择“金”标签的方案，尽管这些方案只是换了标签的“铜”标签方案而已。金属标签没能帮助人们聚焦于最重要的保险方案变量，反而分散了注意力。</p></blockquote><hr><p>◆ 利用思维工具，突破思考盲点</p><p>不同人损失厌恶的程度是不一样的，当选择更多时应该就能看出来差距，当赌局变成100，300，500，1000，2000，5000，10000或者更多，这和每个人能承受的风险程度有关，对于一个月收入只有1000美元的人而言，可能会选择100美元的赌局或者根本不会参与赌博，对于一个月收入5000美元的人而言，可能会选择300美元或者500美元的赌局，而收入更高的人会选择的赌局金额也可能会更大，这应该还能和个人恩格尔系数有关，穷人用于理财的钱可能还不到整体收入的10%，而富人可能有超过90%的财富都用来投资。这能在一定程度上解释富人会越来越富，穷人却很难改变命运，这不止和思维格局有关，还和初始资本有很大关系。这就像从10万变成100万可能需要5年或更长时间，但从1000万到1亿或许3-5年就够了。</p><blockquote><p>· 赌局A：你有同样的机会赚100美元、不赔不赚，或者赔100美元</p><p>· 赌局B：你有同样的机会赚300美元、不赔不赚，或者赔300美元</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 智能屏幕 </tag>
            
            <tag> 什洛莫·贝纳茨 </tag>
            
            <tag> 乔纳·莱勒 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《乡土中国》</title>
      <link href="2021/01/02/xiang-tu-zhong-guo/"/>
      <url>2021/01/02/xiang-tu-zhong-guo/</url>
      
        <content type="html"><![CDATA[<p><strong>《乡土中国》，费孝通著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>一本好书能启发思考，而且是仁者见仁，智者见智，其中每一个重要的观点都能在娓娓道来之间给读者留下深刻的印象，毫无意外，费孝通先生的这本社会学经典做到了。</p><p>一种思想是否值得认可，时间会给出最好的答案，费孝通先生在提出本书的观点还是上世纪40年代，难以想象，80年后的今天，书中的观点迄今各处流传。</p><p>书中提到的差序格局被很多人奉为书中精髓，其实除了差序格局，书中还用了大量篇幅描述礼治与法治，除此以外，对家族，对权力，对政治都进行了独到的论述，这些都是乡土中国留下来的宝贵财富。</p><p>随着社会的发展，今天的中国日新月异，再加上现代化的影响，如今有时候我们不能用纯粹的乡土角度去看待中国，但是乡土社会相对较慢的社会继替，对今天的我们快速的社会变迁仍然具有重要指导意义。</p><p>本书重点论述了社会，但是对个体人的描述相对较少，这也是费老自我认识中认为的见社会不见人的瑕疵，但这不影响我们用乡土去认识中国的古代、今天和未来。 </p><hr><p>◆ 乡土本色</p><p>个人觉得这是对中国乡土社会和西方社会比较非常真实的对比写照，乡土本色依托村落，维系平衡依赖礼俗。</p><blockquote><p>用Tönnies的话说：前者是Gemeinschaft，后者是Gesellschaft；用Durkheim的话说：前者是“有机的团结”，后者是“机械的团结”。用我们自己的话说，前者是礼俗社会，后者是法理社会。</p></blockquote><hr><p>◆ 文字下乡</p><p>前面对“愚”的描述太精彩了，愚是对个人的评论，但很多时候，不知道某个东西，不会某个操作，不是愚，只是知识不及，这是学习和社会环境导致的差异，绝对的愚人非常少，看待任何人，都不能完全从自己的角度去以偏概全。</p><blockquote><p>这样看来，乡村工作的朋友们说乡下人愚，显然不是指他们智力不及人，而是说他们知识不及人了。</p></blockquote><hr><p>◆ 再论文字下乡</p><p>文化是依赖象征体系和个人记忆而维护着的共同经验。有时候当我们具体说文化是什么时，经常难以说清楚，可它的确就是存在的。个体离不开团队、社会的文化，而且文化需要靠学习，不能靠本能。</p><blockquote><p>文化是依赖象征体系和个人的记忆而维护着的社会共同经验。</p></blockquote><hr><p>这里有点能理解为什么叫“文字下乡”了，难道乡下就没有文字吗，费孝通老先生的观点认为，还真是这样，文字出现的本意是让更多的人了解传世的经验，是一种沟通的媒介。而当大家生活在同一个环境中，前人每一步都会留下一个脚印，后人跟着脚印走就好，何必需要语言。只是现在虽在社会复杂程度的增加和信息迭代的加快，经验传递需要更高效的传递媒介。</p><blockquote><p>这样说，中国如果是乡土社会，怎么会有文字的呢？我的回答是中国社会从基层上看去是乡土性，中国的文字并不是在基层上发生。最早的文字就是庙堂性的，一直到目前还不是我们乡下人的东西。</p></blockquote><hr><p>◆ 差序格局</p><p>中国人对家的内涵要丰富很多，不管是家里人，一家人，还是自家人，不同的词，都有家，但是表达的意义明显不同。我们对家的定义是一种关系，一种别于同事、同学等其他社会关系的关系。结合这个关系，就是作者提出来的差序格局，在不同唯独上激起的一层层涟漪。反观西方，他们对home的定义就要单调很多。</p><blockquote><p>为什么我们这个最基本的社会单位的名词会这样不清不楚呢？在我看来却表示了我们的社会结构本身和西洋的格局是不相同的，我们的格局不是一捆一捆扎清楚的柴，而是好像把一块石头丢在水面上所发生的一圈圈推出去的波纹。每个人都是他社会影响所推出去的圈子的中心。被圈子的波纹所推及的就发生联系。每个人在某一时间某一地点所动用的圈子是不一定相同的。</p></blockquote><hr><p>都说中国是礼仪之邦，这种礼来源于亘古的文化，现在有时候看来攀交情、走关系有失公平，不过中国以前很多时候都是一个礼制国家，这种文化甚至是促成中国大一统的重要力量。随着现在社会发展加快，很多礼法变化较滞后，所以现在开始了丰富的法治，不过两者同样重要。</p><blockquote><p>在孩子成年了住在家里都得给父母膳食费的西洋社会里，大家承认团体的界限。在团体里的有一定的资格。资格取消了就得走出这个团体。在他们不是人情冷热的问题，而是权利问题。在西洋社会里争的是权利，而在我们却是攀关系、讲交情。</p></blockquote><hr><p>君子求诸己，小人求诸人。似乎是小学就会的句子，随着时间的流逝，对这句话的感触也越来越深。费老这里用差序格局解释，又有了点新的味道，如此来看，论语中的：己所不欲，勿施于人。穷则独善其身，达则兼济天下。等等这些都是在描述我们应该怎样运营我们的差序格局，有意思。</p><blockquote><p>孔子的道德系统里绝不肯离开差序格局的中心，“君子求诸己，小人求诸人”。</p></blockquote><hr><p>◆ 维系着私人的道德</p><p>从小开始背论语，不过好像一直没有真正理解论语表达的意思，又或是只知其意不知其义。反正从这里看以前是没有真正理解仁，这里还让我对礼治有了一些新的理解，为什么中国古代礼治多于法治，根源在于乡土，古代中国建立于农耕群落，开始于私人社会，维系这种私人关系更需要情，而非法。这个西方的团体格局差异太大了。</p><blockquote><p>孔子有不少次数说“不够说是仁”，但是当他积极地说明仁字是什么时，他却退到了“克己复礼为仁”, “恭宽信敏惠”这一套私人间的道德要素了。他说：“能行五者于天下为仁矣。——恭则不侮，宽则得众，信则人任焉，敏则有功，惠则足以使人。”</p></blockquote><hr><p>◆ 家族</p><p>家庭的大小取决于关系的复杂程度，一对父母养育了七八个孩子，他们的关系只有两种（夫妻，父母子女），而对于公婆儿媳的家庭，关系就要复杂很多，要不也不会有中国诟病已久的婆媳关系了，越复杂的关系维系成本也就越高。</p><blockquote><p>我们普通所谓大家庭和小家庭的差别决不是在大小上，不是在这社群所包括的人数上，而是在结构上。一个有十多个孩子的家并不构成“大家庭”的条件，一个只有公婆儿媳四个人的家却不能称之为“小家庭”。在数目上说，前者比后者为多，但在结构上说，后者却比前者为复杂，两者所用的原则不同。</p></blockquote><hr><p>◆ 男女有别</p><p>其实这种对比来看，亲情才是永无止尽的探险，爱情、友情都可以停留在某一个了解程度上，而费老这里说的恋爱是无止境的投入，可能是已经把恋爱放入了亲情的范畴，因为只有到了亲情，才能到达不可停止的程度。</p><blockquote><p>把浮士德式的两性恋爱看成是进入生育关系的手段是不对的。恋爱是一项探险，是对未知的摸索。这和友谊不同，友谊是可以停止在某种程度上的了解，恋爱却是不停止的，是追求。</p></blockquote><hr><p>◆ 礼治秩序</p><p>这里对礼和法的的描述堪称经典。礼和法都是一种行为规范，一种判定某一行为对与不对的准则，这也是礼治和法治分别在东西方盛行的原因，不同之处在于是什么维持着这种准则。中国起源于农耕，部落，族群，这种带有传统的乡土性沉淀下来了极具地域特色的礼仪准则。</p><blockquote><p>礼是社会公认合式的行为规范。合于礼的就是说这些行为是做得对的，对是合式的意思。如果单从行为规范一点说，本和法律无异，法律也是一种行为规范。礼和法不相同的地方是维持规范的力量。法律是靠国家的权力来推行的。“国家”是指政治的权力，在现代国家没有形成前，部落也是政治权力。而礼却不需要这有形的权力机构来维持。维持礼这种规范的是传统。</p></blockquote><hr><p>◆ 无讼</p><p>在还没有官衙的早期社会，当发生纠纷的时候，是部族长老门一起评判是非对错，在那时，长老们的经验就是准则，在相对封闭的部族环境下，这种传承是可行的。一是准则稳定，长期不易变化，经验导向可解决大部分问题；二是准则可控，没有其他部族的参与，自己部族的长老即可判决，一旦有其他部族参与，单个人与人之间的是非对错很可能会演变成部族之间的权力对抗。在团体越来越大的时候，第三方公正处就出现了，衙门应运而生。</p><blockquote><p>但是在乡土社会的礼治秩序中做人，如果不知道“礼”，就成了撒野，没有规矩，简直是个道德问题，不是个好人。一个负责地方秩序的父母官，维持礼治秩序的理想手段是教化，而不是折狱。如果有非打官司不可，那必然是因为有人破坏了传统的规矩。</p></blockquote><hr><p>◆ 长老统治</p><p>孩子碰着的不是一个为他方便而设下的世界，而是一个为成人们方便所布置下的园地。很多父母美其名曰是为孩子将来考虑，动不动就用类似我吃过的盐比你吃过的米都多来宣告自己的权威。其实大可不必，如果是很多年前相对封闭的部落社会，成年人沉淀下来的经验的确会对孩童的成长有指导意义，不过今天，快速变化的社会中，孩童们对环境的变化或许比成年人更加敏感，用开放的态度去接纳，不只是对孩童，也是对所有人。</p><blockquote><p>从表面上看，“一个孩子在一小时中所受到的干涉，一定会超过成年人一年中所受社会指摘的次数。在最专制的君王手下做老百姓，也不会比一个孩子在最疼他的父母手下过日子为难过”（同上注）。</p></blockquote><hr><p>◆ 名实的分离</p><p>这个说法很巧妙，什么是安定，当社会变迁可以被吸收在社会继替之中的时候，就是安定。社会肯定会一直变迁，只是这种变迁的速度有快有慢，社会平滑的过渡发展才会有安定，如果出现跳跃式的发展注定会有更多的不确定性，也会带来不安定的风险，费老在这里用社会继替这个标准来度量平滑的过程，巧妙又高级。</p><blockquote><p>乡土社会，当它的社会结构能答复人们生活的需要时，是一个最容易安定的社会，因之它也是个很少“领袖”和“英雄”的社会。所谓安定是相对的，指变得很慢。如果我单说“很慢”，这话句并不很明朗，一定要说出慢到什么程度。其实孔子已回答过这问题，他的答案是“三年无改于父之道”。换一句话来说，社会变迁可以吸收在社会继替之中的时候，我们可以称这社会是安定的。</p></blockquote><hr><p>再去看孔子的三年无改于父之道，真的是很让人佩服，三年无改，社会继替的感觉就出来了，这种对平滑变化的度量甚至更加清晰，虽然今天社会的变化更快，已不是三年不改就可以囊括的，不过在当时的环境下，这真的非常了不起。</p><blockquote><p>乡土社会环境固定，在父死三年之后才改变他的道的速率中，社会变迁也不致引起人事的冲突。在人事范围中，长老保持他们的权力，子弟们在无违的标准中接受传统的统治。在这里不发生“反对”，长老权力也不容忍反对。</p></blockquote><hr><p>◆ 从欲望到需要</p><p>亚当斯密的看不见的手，就是人们的欲望之与生存的的表现，这样看来，乡土社会的关系比今天会稍简单一些。在乡土社会中人可以靠欲望去行事，但在现代社会中欲望并不能作为人们行为的指导，于是产生“需要”，因之有了“计划”。而这些需要，计划，让人们不再那么“单纯”的想要。从这个角度看，经济学中的理性人假设，并不是人们理性，而且因为欲望占据了上风，看起来心无旁骛，更多行为更加符合经济学规律，实则比非理性人假设更加不理性。</p><blockquote><p>亚当·斯密说“冥冥中那只看不见的手”会安排个社会秩序给每个为自己打算的人们去好好生活的。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 社会 </tag>
            
            <tag> 差序格局 </tag>
            
            <tag> 费孝通 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《伟大创意的诞生》-分享PPT</title>
      <link href="2021/01/02/wei-da-chuang-yi-de-dan-sheng-fen-xiang-ppt/"/>
      <url>2021/01/02/wei-da-chuang-yi-de-dan-sheng-fen-xiang-ppt/</url>
      
        <content type="html"><![CDATA[<p>对内容进行简单整理分享</p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8724.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8725.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8726.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8727.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8728.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8729.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8730.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8731.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8732.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8733.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8734.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8735.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8736.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8737.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8738.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8739.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8740.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8741.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8742.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创新 </tag>
            
            <tag> 液态网络 </tag>
            
            <tag> 史蒂文·约翰逊 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《上瘾：让用户养成使用习惯的四大产品逻辑》</title>
      <link href="2021/01/02/shang-yin-rang-yong-hu-yang-cheng-shi-yong-xi-guan-de-si-da-chan-pin-luo-ji/"/>
      <url>2021/01/02/shang-yin-rang-yong-hu-yang-cheng-shi-yong-xi-guan-de-si-da-chan-pin-luo-ji/</url>
      
        <content type="html"><![CDATA[<p><strong>《上瘾：让用户养成使用习惯的四大产品逻辑》，尼尔·埃亚尔 瑞安·胡佛著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>据统计，79%的智能手机用户会在早晨起床后的15分钟内翻看手机。更离谱的是，有1/3的美国人声称，他们宁肯放弃性生活，也不愿丢下自己的手机。某大学在2011年进行的一项研究表明，人们每天平均要看34次手机。然而，业内人士给出的相关数据却高得多，将近150次。不得不承认，我们已经上瘾了。</p><p>越来越多的企业逐渐认识到，仅凭占有庞大的客户群体并不足以构成竞争优势，用户对产品的依赖性强弱才是决定其经济价值的关键，所以作者在进行了上千家公司的观察测评后，在本书中提出了四种让用户上瘾的产品逻辑，分别是触发、行动、多变的酬赏和投入。触发就像发动机里的火花塞，它是促使用户做出某个举动的诱因；行动是对某种回报心怀期待的情况下做出的举动，而且这里的行动需要简单易行和用户有主观意愿；多变的酬赏为用户带来持久不灭的激情；当用户为产品投入他们个人数据、时间及其他社会资本时，用户和产品的依赖性就建立起来了，以此又可以开始新的触发，形成正向循环。</p><p>让用户上瘾另一种比较容易接受的说法，就是让使用产品成为习惯，一旦让用户使用产品成为习惯，企业就能获益匪浅，如更高的用户终身价值，更大的价格灵活性，更快捷的增长以及更强的竞争优势。而打造习惯养成类产品，企业务必认真考虑两个因素。第一，频率，即某种行为多久发生一次；第二、可感知用途，即用户心中，该产品与其他产品相比多出来的好处。</p><p>了解让用户养成习惯的作用后，下面开始正式介绍四大产品逻辑，首先看触发。习惯不会凭空产生，都是基于历史习惯逐渐演变形成的，而触发就是促使行为发生演变的底基，触发分为外部触发和内部触发。</p><p>外部触发又分为付费型触发、回馈型触发、人际型触发和自主型触发。付费型触发就是给用户以金钱回报以活动用户，但是靠花钱来获得用户并不是长久之计，如果让facebook靠打广告来获取用户，那肯定会资不抵债。回馈性触发的典型操作就像公关，让气压曝光于聚光灯下，获取用户的注意，但是这种触发也常常是昙花一现，没有持久生命力。人际型触发相比而言就会更加高效，它也正是企业经营者和投资人所渴望的病毒式增长。自主型触发在生活中的确存在，但是可能性较小，其需要极大的刺激。</p><p>除外部触发外，更重要的是内部触发，内部触发才能让产品具备更加持久的生命力，外部触发可以培养新习惯，而内部触发造就的情感纽带可以让用户成为产品的铁杆粉丝。内部触发就是用户使用产品想解决的根本性问题，作者举了一个instagram的例子，用户使用ins就像是一个寄托情思于灵感的港湾，通过与他人建立连接来排解无聊。</p><p>外部触发和内部触发可以提示用户下一步的行动方向，但是只有当用户行动起来了，触发才是真实有效。这里作者引用了福格行为模型，将行为（B）表示成能力（A）、触发（T）和动机（M），能力是行为上的约束，动机是心理上的约束，触发则是启动能力和动机的火花塞。</p><p>动机可以是欢乐的，也可以是恐惧的，还可以是追求认同的。除了动机，真正让用户行动起来的另一个关键因素是行动的能力，甚至作者认为能力是行为是否能产生的最重要因素，时间、金钱、体力、脑力、社会偏差、非常规性都会对用户的能力产生影响，让这种能力壁垒越小，步骤越简单，用户施行行为并成功进入上瘾模型下一阶段的可能性就越高。</p><p>从触发，动机和能力的角度来看当前的很多应用，大概可以分为两大类，一类是以google，微信为代表的工具类应用，一类是以支付宝，淘宝为代表的服务类应用。工具类应用需要简单高效的满足用户需求，不易花里胡哨的想办法占据用户时间，这样方能在不需要能力壁垒的条件下快速满足用户动机，这类应用需要足够轻。相反，服务类应用则会越来越重，这类应用会想方设法占据用户时间，它们不用非常在意用户的动机和能力，任何的外界因素都有可能成为此类应用的触发。</p><p>行动后的下一个上瘾模型阶段是多变的酬赏，这里有两个关键字，一个是酬赏，另一个是多变。</p><p>20世纪40年代詹姆斯·奥尔兹和彼得·米尔纳做个一个小鼠实验，得出的结论是导致大脑产生波动的不是愉悦感本身，而是追求愉悦的过程，也就是说，趋势我们采取行为的，不是酬赏本身，而是渴望酬赏时的那种迫切需要。酬赏可分为社交酬赏，也就是马斯洛需求层次中的设计需求；还有猎物酬赏，这种酬赏相比社交更加困难，同时获得的刺激也更大；最有一个是自我酬赏，也就是我们常说的自我成就感。</p><p>而多变是为什么呢，是因为我们有不断接受外界刺激的需求，多变能激发用户更大的兴趣。产品的可预见性会降低用户探索的渴望，耶会降低用户获得的酬赏，如果不能获得酬赏，用户自然也就不会再使用产品，就像能经久不衰的游戏基本上都是真人联机题材，而不是已经被程序设计好的单机模式。</p><p>接下来是上瘾模型的最后一个阶段——投入。当用户在某一个产品有投入后，想要放弃一个产品就会变得更加艰难，这就像宜家效应，让用户投入体力劳动自己动手组装家具有一个看不见的好处，这可以让用户产生一种非理性的喜爱，因为其中存在用户自己的劳动成果。我们对事物对投入越多，就越有可能认为其有价值，也越有可能和自己过去的行为保持一致，最后，我们会改变自己的喜好以避免发生认知失调，这就是习惯的惯性。</p><p>当完成触发、行动、多变的酬赏和投入以后，就需要开始加载下一次触发，用户投入可通过加载下一个触发的方式令用户重新开始上瘾循环，从而增加用户反复进入上瘾循环的可能性。</p><p>至此，作者对上瘾模型中四个产品逻辑就已经全部论述完成了，但是上瘾模型难免让人联想到对用户行为的操控，所以作者引出了与道德约束相关的观点。</p><p>在作者看来，上瘾模型的道德操控可以分为两个纬度四种类型，两个纬度分别是制造商是否使用和是否提高用户生活质量，四种类型也就是作者定义的四个象限，分别是健康习惯的推广者，兜售者，娱乐用户者，和经销商。</p><p>四个纬度中，健康习惯推广者是最推崇的类型，该角色令产品设计者履行了道德义务，他们使世界发生了自己理性的变化。兜售者则是哪些自己不使用但是能提高用户生活质量的企业，他们做不到于用户的感同身受，也缺乏必要的洞察。娱乐用户者能为用户带来乐趣，但却无法问心无愧的说该产品提高了用户生活质量，他们能在一定时间内让用户高度上瘾，但是不会持久。经销商不相信产品能提高用户生活质量，他们自己也不会使用，他们唯一的理由就是赚钱，就像赌场和毒品会令“客人”乐而忘返，但是一旦上瘾，快乐立刻荡然无存。</p><p>上瘾模型作为一种工具，可以被当成一个框架去确定产品的设计和改进方向，作者把习惯养成过程命名为习惯测试，习惯测试首先需要确定用户，比如找使用频率较高的用户，第二是分析用户行为，在twitter在成立初期发现，只要用户关注其他用户超过30人，就会极大增加他们今后继续使用的可能性，30就是用户行为的临界点。第三是改进产品，按用户共同特点进行分组，按其行为和习惯用户进行比较以指导改进产品。</p><p>作者全篇围绕触发、行动、多变的酬赏和投入展开，虽然这些产品逻辑不是一个成功企业的充分条件，但作为社交产品的必要条件一点不为过，而且书中提出的道德约束是很多其他产品设计类书籍鲜有提及的，角度犀利。</p><hr><p>◆ 前言 为什么有的产品会让人上瘾？</p><p>产品满足了用户的某个需求就会产生主观意愿，而让行动顺利产生，就必须保持用户意愿和满足意愿的连贯性，就像看到一张好看的图片，点击就可以预览和跳转到单独的页面预览，这对用户体验影响的差距会非常大。</p><blockquote><p>为了提高人们某种行为的发生频率，产品设计者充分利用了人类行为的两个基本动因：一是该行为简便易行，二是行为主体有这个主观意愿。</p></blockquote><hr><p>这种对投入的定义现在看来虽然并不新颖，但却实之有效。归根究底投入就是用户用以换取产品服务的任何形态付出，这种付出是一种相对的等价交换，交换过程中自然就会产生价值，而良好的商业模式可以在交换模式中变现。</p><blockquote><p>当用户为某个产品提供他们的个人数据和社会资本，付出他们的时间、精力和金钱时，投入即已发生。</p></blockquote><p>话说回来，投入并不意味着让用户舍得花钱，而是指用户的行为能提升后续服务质量。添加关注，列入收藏，壮大虚拟资产，了解新的产品功能，凡此种种，都是用户为提升产品体验而付出的投入。</p><hr><p>◆ 第一章 习惯的力量： 如何让你的产品从维生素变成止痛药</p><p>可感知用途解决用户的真实需求，这也是触发的关键，频率是让用户使用产品成为习惯，这是上瘾的关键。淘宝最开始的用途是为了让用户足不出户购买自己需要的商品，可现在每天晚上有超过千万的用户逛淘宝而不买商品，这仍然能给淘宝创造价值。</p><blockquote><p>要想打造习惯养成类产品，企业务必认真考虑两个因素。第一，频率，即某种行为多久发生一次；第二，可感知用途，即在用户心中，该产品与其他产品相比多出了哪些用途和好处。</p></blockquote><hr><p>◆ 第二章 触发： 提醒人们采取下一步行动</p><p>二十年前我们可能是没得选择，而今天，我们经常面临选择过多，这两个极端都会增加用户选择成本，用户都喜欢简单好用不费脑的产品，给用户百分之二十的操作解决百分之八十的问题就好。</p><blockquote><p>选择项越多，用户用于权衡的时间就越久。太多的或者无关的选项会让他们游移不定，不知所措，甚至就此罢手</p></blockquote><hr><p>内部触发形成良性循环，让产品保持持久的生命力，在冷启动时，外部触发是有必要的，但一个产品能否成功，还是取决于内部触发。这让我想到曾经看过的一篇关于援助非洲的文章，来自于联合国的粮食、衣物只能算是冷启动时的外部触发，真正发展非洲还是需要内部触发，如果不从内部解决问题，越强的外部触发可能越加适得其反。</p><blockquote><p>外部触发可以培养新习惯，而内部触发造就的情感纽带则可以让新用户变成你产品的铁杆粉丝。</p></blockquote><hr><p>这种推理看起来很有道理，但是并不一定见效，简单记录一下观点。第一，如此细分，群体之间的差异性导致在产品实际设计中变得不可行；第二，拆解得过细可能会适得其反，如果按照作者的意思一种拆解下去，最终会把整个洋葱剥光；第三，有时候我们使用一个产品不止为了满足一个需求，产品一般会有主要功能和附属产物。此类拆解可能到最小功能可测就可以了。</p><blockquote><p>现在我们有答案了！恐惧感是她身上最强大的内部触发，因此，我们在设计产品时，应该考虑使它能减轻用户的恐惧心理。</p></blockquote><hr><p>◆ 第三章 行动： 人们在期待酬赏时的直接反应</p><p>ATM似乎更好记一点，行动需要能力，触发，动机，能力是行为上的约束，动机是心理上的约束，触发则是启动能力和动机。</p><blockquote><p>福格行为模型可以用公式来呈现，即B=MAT。B代表行为，M代表动机，A代表能力，T代表触发。</p></blockquote><hr><p>从触发，动机和能力的角度来看当前的很多应用，大概可以分为两大类，一类是以google，微信为代表的工具类应用，一类是以支付宝，淘宝为代表的服务类应用。工具类应用需要简单高效的满足用户需求，不易花里胡哨的想办法占据用户时间，这样方能在不需要能力壁垒的条件下快速满足用户动机，这类应用需要足够轻。相反，服务类应用则会越来越重，这类应用会想方设法占据用户时间，它们不用非常在意用户的动机和能力，任何的外界因素都有可能成为此类应用的触发。</p><blockquote><p>简单地讲，Google的成功在于它减少了人们在搜索信息时需要花费的时间和精力。如今，它依然在不遗余力地开发新技术，以期减少用户的使用障碍，进一步提升其服务质量。</p></blockquote><hr><p>◆ 第四章 多变的酬赏： 满足用户的需求，激发使用欲</p><p>有人做某一件事是为了让自己感动，暂且不论这种做法的优劣，但从这里来看，不论事情是否有实质的收益，让自己感动就已经让自己获得酬赏，有的人是习惯从外界获得奖赏，有的人是喜欢从自身获得罢了。</p><blockquote><p>驱使我们采取行动的，并不是酬赏本身，而是渴望酬赏时产生的那份迫切需要。大脑因为渴望而形成的紧张感会促使我们重复某个动作，就像奥尔兹和米尔纳实验中的老鼠一样。</p></blockquote><hr><p>按照马斯洛需求层次来说，我们每个人都有社交需求，也就是这里的社交酬赏，不一定是什么物质上的奖励，或许只是别人的肯定和认同，而提供这样社交需求传播的facebook 和twitter 类似平台就获取到了巨大流量。</p><blockquote><p>人类是社会化的物种，彼此依存。社交酬赏，抑或说部落酬赏，源自我们和他人之间的互动关系。为了让自己觉得被接纳、被认同、受重视、受喜爱，我们的大脑会自动调试以获得酬赏。</p></blockquote><hr><p>这个前面提到的社交酬赏类似，不过猎物显得更加困难，获得的酬赏也更加刺激，当下各种社交APP平时给用户提供社交酬赏，在某一不确定时机，再给用户提供猎物酬赏，这种粘性的建立真得容易让用户上瘾。</p><blockquote><p>早在电脑问世之前，人们就已经开始从猎物身上获取酬赏。但时至今日，我们可以看到数不清的事例都与“猎物酬赏”心理有关。人们追逐资源，追逐信息，其执着程度不亚于追逐猎物的桑人猎手。</p></blockquote><hr><p>产品的可预见性降低了用户探索的渴望，也降低了用户获得的酬赏，如果不能获得酬赏，用户自然也就不会再使用，这或许就能解释经久不衰的游戏基本上都是真人对抗题材，而不是已经被设计好的单机模式了。</p><blockquote><p>Zynga的故事告诉我们，要想使用户对产品抱有始终如一的兴趣，神秘元素是关键。“农场小镇”这类网络游戏最大的败笔就在于“有限的多变性”，也就是说，产品在被使用之后产生的“可预见性”。</p></blockquote><hr><p>◆ 第五章 投入： 通过用户对产品的投入，培养“回头客”</p><p>没有人愿意否定自己，当面对自己已经付出过事物，即使没有那么好，也会给予更高的评价，这是人类情感的非理性偏差，这不仅仅对自己，相比身边熟悉的人和陌生人，也会有这种偏差，因为我们对自己熟悉的会给予更多的理解和支持。</p><blockquote><p>我们对事物的投入越多，就越有可能认为它有价值，也越有可能和自己过去的行为保持一致。最后，我们会改变自己的喜好以避免发生认知失调。</p></blockquote><hr><p>社交产品是壁垒非常强的产品，因为这类产品不是某一个公司单方决定的，是用户共同创造的，用户投入的东西不可迁移，只有投入的东西还有价值，即使后期产品功能不再那么完美，也很难改变用户粘性。就像电商有天猫，淘宝，京东，拼多多并存，它们甚至可以交易相同的物品，但社交上的微信，QQ，微博，抖音，小红书则是走的不一样的道路。</p><blockquote><p>用户关注重要人物时的投入会增加产品价值，其投入方式是在自己的推文中展示更多有趣的相关内容。这种投入方式也可为Twitter提供有关用户的大量信息，从而提高整体服务质量。</p></blockquote><hr><p>◆ 第六章 上瘾模型与道德操控</p><p>站在提高生活质量的层面有点戴高帽的嫌疑，不过自己会不会使用这个产品的确是一个非常好的评价标准，如果自己的产品自己都不愿意用，那就更别期望其他用户上瘾了，毕竟对自己产品还有一定的情感投入。</p><blockquote><p>要使用该操控模式（图37），制造商需要问两个问题，第一个问题是“我自己会使用这个产品吗”，第二个问题“该产品会帮助用户大大提高其生活质量吗”。</p></blockquote><hr><p>◆ 第八章 习惯测试和寻找机会</p><blockquote><p>你用户的内部触发经常促使他们采取行动吗？在用户最有可能采取行动的时候，你会用外部触发提示他们吗？你的设计是否简单得足以使采取行动变成一件轻松容易的事情？你提供的酬赏机制是否既能满足你用户的需求，又能激发他们更强的需求？你的用户是否对产品有微量的投入，从而以储存价值的方式改善产品的使用体验，同时加载下一个触发？</p></blockquote><hr><p>这是基本的投入度量，只有当投入到达一定程度后，放弃该产品带来的社交损失才会变得难以接受，用户的粘性才能得以建立。</p><blockquote><p>例如，在其成立初期，Twitter发现，只要新用户关注的其他用户人数达到30，即可达到一个临界点，极大地增加他们今后继续使用网站的可能性。</p></blockquote><hr><p>不管什么浪潮，基本上都是基础设施先行，当前遍地开花的5G，其实在4G还没开始时就已经在研发，好几年前就开始了基础设施生产和研发，华为之所以能现在一鸣惊人在于其十余年的默默布局，而现在是基础设施完备，市场条件成熟的时候。再看无人驾驶可能就没有这么乐观了，市场还没准备好，现在的无人驾驶终究还是无法走出实验室。</p><blockquote><p>梅普尔斯认为技术浪潮遵循一个三阶段模式，“这些浪潮都始于基础设施建设。基础设施建设方面所取得的进步是积聚一波大浪潮的初始力量。随着波涛开始积聚涌动，各种促成性技术和平台纷纷为新型应用铺平道路，这些新型应用经过不断聚集，逐渐形成一波浪潮，以实现大规模渗透和客户应用。最终，这股浪潮达到顶峰并逐渐消退，为正在聚集并即将形成的下一波浪潮让位”。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 习惯 </tag>
            
            <tag> 尼尔·埃亚尔 </tag>
            
            <tag> 瑞安·胡佛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《贫穷的本质：我们为什么摆脱不了贫穷》</title>
      <link href="2021/01/02/pin-qiong-de-ben-zhi-wo-men-wei-shi-me-bai-tuo-bu-liao-pin-qiong/"/>
      <url>2021/01/02/pin-qiong-de-ben-zhi-wo-men-wei-shi-me-bai-tuo-bu-liao-pin-qiong/</url>
      
        <content type="html"><![CDATA[<p><strong>《贫穷的本质：我们为什么摆脱不了贫穷》，阿比吉特·班纳吉 埃斯特·迪弗洛著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>本书是讨论贫穷的难得著作，贫穷不是一朝一夕导致的，也不会因为某一举措而瞬间摆脱贫穷，尽管可能没办法根除贫穷，但是作者通过一个个实际的案例和思考，让我们知道或许做哪些事情可以改善穷人的生活。</p><p>首先，是信息的不对称，因为对信息的不了解，他们很难知道做一件事的真正的价值，而有价值的事情通常有时间成本，所以他们为了杜绝眼前的成本，经常做出了错误的决定。</p><p>第二，穷人肩负着相对自己能力而言更重的责任，多数有价值的事情均需要在当下或前期有付出，而受益却在将来，这是很多穷人难以承担的。</p><p>第三，市场是服务于大众的，而非专对穷人，在这些市场中，穷人处于劣势，以银行而言，存款利息还赶不上通货膨胀，而贷款利息却高得很多，可是穷人的大部分钱都存在银行。一些技术创新可以部分解决这个问题，如小额信贷，可是这种创新方案仅仅有市场还不够，还需要政策保护。</p><p>第四，现在贫穷，并不代表以后不会成功，即使是一个国家，虽然贫穷会致使办事困难，但实现一次次小的变革也是肯定的，而且解决一部分贫困后，另外一部分就会简单许多。</p><p>第五，穷人因为自身认识的缘故，自己能做什么和不能做什么，通常是自我实现的预言，有种事情做不了，叫他们自己认为做不了，还有种事情做不了，叫别人不关心自己是否做得了。</p><p>贫困已经跟随我们数千年，不会因为数十年的举措就被根除，但是通过自己及社会的协同，至少可以让人们不再为了每天99美分的生活成本而备受折磨。</p><hr><p>◆ 前言</p><p>如果用大多数人认为的那样去理解穷人的生活，注定不够靠谱，站在普通人的角度去思考需要什么，如何脱贫，不管怎样那都是普通人觉得的需求罢了，真正影响穷人变富的根本原因很有可能隐藏在普通人根本不会关注的认知边缘，这也是穷人和普通人会产生区别的原因所在，没有真正去体验过穷人的生活就没有发言权。从这个角度来说本书的两位作者算是非常有资格了。</p><blockquote><p>然而，恰恰相反，正是我们大多数人所忽略的那些小花费、小障碍、小错误，在穷人的生活中却成了尤为突出的问题。</p></blockquote><hr><blockquote><p>《贫穷的本质》一书最终揭示了穷人的生活及他们相应的选择，对于我们消除全球贫穷具有一定的启发意义。本书将有助于我们了解，为什么小额信贷的实用性并非某些人所信奉的那么神奇，为什么穷人最终无法从医疗制度中得到好处，为什么他们的孩子年年上学却不学习，为什么穷人不想交医疗保险，以此表明，为什么昔日的奇思妙想今天都遭到扼杀。本书还指出了很多充满希望的方面：为什么象征性的补助不只是有象征性的作用，怎样健全商业保险制度，为什么在教育方面的资助“少一点即是多一点”，为什么好工作对于发展至关重要？值得一提的是，本书还指出了希望与知识的重要性，告诉我们即使在任务看上去无比艰难的情况下，我们依然要敢于坚持，成功并不总像看上去那样遥远。</p></blockquote><hr><p>◆ 第一章 再好好想想</p><p>援助是解决贫穷的必要不充分条件，援助就像一个公司的融资，这是必要的，特别是天使轮和A轮，如果没有，就不会有后续，但公司必须要有自己的造血能力，持久的生命力来源于健康的商业模式，而不是融资。</p><blockquote><p>由于诸如卢旺达这样的个例没有最终定论，大多数研究哲学问题的人更喜欢在多个国家之间做比较。例如，针对世界上几百个国家的数据表明，接受更多援助的国家并不比其他国家发展得快。这常常被认为是援助无用的依据，但实际上，这也可能意味着相反的观点。或许，援助使某些国家避免了一场灾难，没有援助的话情况会更糟。对此，我们并不了解，只是在泛泛地猜测而已。</p></blockquote><hr><p>贫穷也是动态变化的，今天你很富有，不代表永远不会陷入贫穷，相反今天的贫穷不代表一直贫穷。“贫穷陷阱”为是否能从贫穷中走出来提供了一个时间维度上的度量。直观理解一下贫穷，如果收不抵支，必然逐渐贫穷，相反就会逐渐积累财富。那么怎么能导致贫穷呢，如果未来的收入相比现在的收入是降低的，或者相对于购买力而言是降低的，存在变得贫穷的趋势，就需要警惕了。</p><blockquote><p>这条S形曲线就是“贫穷陷阱”的来源。从对角线上来看，今天的收入等于明天的收入。对于处于“贫穷陷阱”地带的穷人来说，将来的收入低于今天的收入：曲线低于对角线。这就意味着，随着时间的流逝，这一地带的人会变得越来越穷，最终在N点陷入贫穷。</p></blockquote><hr><p>◆ 第一部分 生活案例</p><p>现在多数援助乐此不疲的是粮食援助，殊不知真正导致贫穷的可能不是吃不饱，他们需要的不止是卡路里，他们即使可以吃饱了仍然需要更丰富的营养成分。同样给予金钱援助也收效甚微，这里从马斯洛需求层次或许能找到一些线索，由于每个人对每一层次的要求不同，所以从一个层次到下一个层次的临界点也不同，在普通人眼里，10美元可能只是满足基本的物质层面需求，但穷人心理可能会认为10美元应该满足更高的需求，一旦如此，只要有欲望，简单的金钱援助就永远不能解决贫穷。</p><blockquote><p>相反，对儿童及孕妇的直接营养投资，会产生巨大的社会回报。这方面的措施包括，向孕妇及儿童父母发放强化食品，对儿童进行学前或在校的抗蠕虫预防，向他们提供富含微量营养素的膳食，或者鼓励父母为补充营养而消费。</p></blockquote><hr><p>◆ 第三章 提高全球居民健康水平容易吗？</p><p>解决贫穷似乎一直都存在治标治本的问题，大多数人能看到的是治标，可是谁又能保证什么是治本，本书作者不正是希望通过一系列的调查来找到本源吗。即使疟疾是标，管理体制也不一定是本，即使有相关关系也不定就是因果关系，而且指标不治本的方法有时候可能也会导致利好的连锁反应。而且个人感觉贫穷作为一种相对（相对于别人，相对于过去）概念，永远不可能消除，只要能引起利好连锁反应的就不失为好办法。</p><blockquote><p>怀疑者们很快指出，目前尚不清楚那些滋生疟疾的国家贫穷的原因是否在于疟疾，就像萨克斯所认为的那样；或者这些国家无力消除疟疾，也许只是说明它们的管理能力很差。如果是后一个原因，那么除非改善管理体制，否则仅仅靠消除疟疾，或许还不能完全解决贫穷问题。</p></blockquote><hr><p>保证健康是人活着最基本的需求，如果这都满足不了，上层的需求更无从谈起，不过这里保证了婴儿的存活率和减少儿童的患病率，这在人道主义来说是一定程度上消除了对穷人的威胁，但这个好摘的果子对消除贫穷的效果不太好说，或许导致贫穷不是生育存活率低，而是生育率太高了呢，在贫穷地方每一对父母养育的孩子数量往往比富裕地方父母养育孩子数量高很多，或许正是多而不精而限制了发展呢。</p><blockquote><p>在萨克斯看来，有一种基于健康的“贫穷陷阱”，但我们可以向穷人提供“梯子”，帮他们逃离这些陷阱。如果穷人买不起梯子，那么世界上的其他人都会伸出援手。</p></blockquote><hr><p>如果真的是因为免费导致没有人使用，也有一定道理，几乎每个人都能理解等价交换，如果自己没有付出就得到的东西，往往不够珍惜，即使是相同的产品，花100美元的购买者对这个产品的重视程度一定高于免费领用者，如果给免费送加上一个故事予以背书，比如某个人已经付钱了，如果他们还需要就需要花费100美元，效果可能稍好。不过免费可能对是否能走出贫穷陷阱的影响可能还是有限，这所能造就的影响稍显表层，而且似乎难以引起一些低成本高收益的连锁反应。</p><blockquote><p>实际上，存在着一种“心理沉没成本”——人们更有可能会利用他们为之支付很多钱的东西。此外，人们可能会根据价格来判断质量：恰恰是由于某物品是廉价的，人们便有可能认为它没有价值。</p></blockquote><hr><p>当人们在无能为力的时候，往往会把希望寄托于一些毫无根据的信念，毕竟这是最后的稻草，难以掌控的东西除了交给空无，又还能做什么呢。祈求祷告，求神拜佛均如此，不能说这种不对，它可以是一种信仰，一用约束自己思想行为的规矩，不过真要说对某一场景有什么实际效果，可能就难了。</p><blockquote><p>穷人之所以会坚持那些看起来漏洞百出的信念，还有一个潜在的原因：在他们无能为力的情况下，希望变得至关重要。</p></blockquote><hr><p>通过奖励生活必须品可以拉新，但是并不能持久，而且前面有提到，人们对免费的东西缺乏重视。为了提高完成率，不妨疫苗收费，然后免费赠送生活必须品，而且每接种一次疫苗，返还一定已经收取的费用，当全部接种完，费用也全部返还，这样是否会更好一些呢。</p><blockquote><p>疫苗接种遇到的阻力并不是很大，这表现在，在没有达尔奖励团队的村庄，77%的儿童都首次接受了疫苗接种：即使没有任何奖励，人们一开始似乎也愿意进入接种流程。问题在于，怎样使他们完成整个流程。这也正是全部接种率未超过38%的原因——奖励机制使人们来接种的次数增多，但不足以使他们完成全部5次接种，而那份免费的不锈钢餐盘似乎也不起作用了。</p></blockquote><hr><p>贫穷会限制人们对未来的想象，越贫穷的人能看到的将来越短，因为更加长远的未来，对于他们来说变得不可控，先变成自己拥有的才是最好的。就以现在理财产品而言，活期存款，定期存款，短期理财，长期理财，定投等不都是为了迎合不同风险偏好者吗？选择不同的理财可能和是否贫穷不是直接的强相关，但一定有关系。</p><blockquote><p>贫穷的家长可能完全相信接种的好处——但这些好处只能在未来的某个时刻实现，而费用却需要今天来支付。从今天的角度来看，等待明天是合情合理的。遗憾的是，当明天成为今天，相同的逻辑便会重现。</p></blockquote><hr><p>◆ 第四章 全班最优</p><p>孩子也知道上学有用，不过可能很多都只局限在完成课程作业、考试，很难意识到所学对社会有什么效用，对比周边，当它们看不到上学比不上学的优势时，上学的意愿就更低了。是什么导致这样的现状，可能有两点，第一，市场的需求，上学的阶梯没有在市场中反应出来，造成供需不对应，这种混乱会形成恶性循环，为了解决这个，可能需要重新认识一下教育，上学和学习真的是两回事。第二，父母的格局，小孩子开始认识社会，基本上全靠父母的眼睛，父母能看得多大多远，那也就是孩子的认知范围，所以父母、老师多给孩子一些想象的空间，他们可能会爬的更高。</p><blockquote><p>让孩子上学是非常重要的一步，这正是学习的起点。然而，如果孩子们在学校里学不到什么东西，那么上学对他们来说就毫无用处。有些奇怪的是，学习的问题并未被摆在国际声明中十分突出的位置：千年发展目标中并没规定孩子们必须在学校里学到东西，只是说他们应完成基本的课程。</p></blockquote><hr><p>开心自信的时候，感觉整个世界都非常合拍，自卑沮丧的时候，好像全世界都在和自己作对。并不是世界变了，只是我们看世界的角度变了。竞争本身只是一个中性词，好与坏仅仅是人基于自己的认知赋予它的意义。或许我们常听说鸡头凤尾的说法，属好属坏难说，鸡头可以建立自信，但难以突破格局，凤尾可以看得更远，但需经受精神虐待。所以经常向上看看，偶尔向下看看，活起来可能会更舒心吧。</p><blockquote><p>只要阶层不被突显出来，低阶层孩子与高阶层孩子做得一样好，而一旦低阶层孩子得到提醒，意识到他们正在与高阶层孩子竞争（方法很简单，即在比赛之前问他们的全名），他们的表现就会差一些。</p></blockquote><hr><p>◆ 第五章 帕克·苏达诺的大家庭</p><p>相关性本来就不能用来解释因果。生育率低导致人们有更多的时间工作，孩子成长能获得更多的资源，导致经济水提高？又或是，经济发展使得生活水平提高，人们喜欢上创造价值的感觉，没时间生育，同时人们不在把希望寄托在下一代，开始用自己的力量改变现状。而且这两者之间的相关性好像也并不是百试不爽。</p><blockquote><p>当今生育率较高的国家更穷这个事实并不完全因为生育率高。真正的原因可能是，生育率高恰恰是由贫穷引起的，或是有第三个原因导致了高生育率及贫穷。经济迅速增长的时期常常伴随着生育率的急剧下降（如20世纪60年代的朝鲜和巴西），即使这一“事实”并不是绝对的。</p></blockquote><hr><p>孩子教育是一个概率统计问题还是一个资源分配问题，如果是概率统计问题，那么生得越多，至少有一个孩子出人头地的概率就越高，如果是资源分配问题，那么生得越少，孩子能获得成功的可能性才会更高。这样说来，富人应该生多，因为他们有足够的资源，可以拼概率，穷人只能生少，因为他们资源有限，只能孤注一掷，不过现实好像正好相反。</p><blockquote><p>每个家庭都面临着一种所谓的“质与量的取舍”，也就是说，一旦有了更多的孩子，每个孩子的“质”就会降低，因为父母为每个孩子投入的食物及教育资源就会更少。</p><p>因此，最有效的人口政策或许就是，让人们觉得没必要生很多孩子（特别是儿子）。有效的社会保障体系（例如医疗保险或养老金）或金融业的发展使人们能够受益于退休金，这会导致生育率的大幅度下降，或许还会减少歧视女性的现象。</p></blockquote><hr><p>◆ 第二部分 慈善机构</p><p>S形曲线的厉害之处就在于一个断崖式的变化后，要么越来越富有，要么越来越贫穷，起初的一点点变化可能感知不到，但是认识到分别对0.99和1.01进行高次运算的结果差异，这一点就好理解了。</p><blockquote><p>因此，这一“S”形世界的一场灾难会产生永久性后果。如果今天收入与明天收入的关系呈“S”形，这个家庭便会脱离通往中产阶级之路，转而踏上永久贫穷之路。</p></blockquote><hr><p>现在中国在大范围的城乡改造和城镇迁移，很多农民不愿意农改非，并不是城里不好，是不知道到城里以后生活何以为继，继续在农村种地，虽然富裕不了，但至少饿不死，这是穷人们最后的抗风险能力。</p><blockquote><p>一家人全都迁居城里较为少见。通常情况下，选择迁居的家庭成员大多为印度或墨西哥的男人或十几岁男孩，还有中国、菲律宾及泰国的女孩，其他人则留在家里。这可以确保一个家庭的财富并未全都押在去城里工作的人身上，还可以保持这个家庭在村里的人际关系。我们将看到，这种人际关系常常是非常有用的。</p></blockquote><hr><p>为什么有时我们帮助别人的时候，宁愿用实物商品，也不愿意用等价的现金。虽然交易的时候它们二者的价值相同，但双方的出发点却明显不同，商品是情义，是礼尚往来，是乐于助人，这种难以直接用金钱度量，反而显得更加宝贵。相反，如果直接用金钱，那更多的意味着赠予和交换。想象一下当朋友结婚的时候，你是愿意准备一份礼物，还是直接包个红包，不同的选择可能决定了这个朋友在你心中的地位。</p><blockquote><p>这或许还有助于解释，为什么伊布·艾姆塔特的女儿给了母亲一台电视机，却没有帮她支付医疗费。她不想为父母的健康承担全部责任，也不指望其他兄弟姐妹能慷慨解囊。</p></blockquote><hr><p>这里提到的两种可能应该都有，简单总结而言，不只是穷人，很多人其实都对保险的具体好处不太了解，所以与巨大灾难联系思考的可能性有限，更别说宏观上的政府调控了。比如随便找一个生活水平还不错的人，你问他什么情况下可以用买过的什么保险，如何保，能答上来的比例可能并不高。但是为什么穷人更不喜欢买保险了，有一个重要的原因是对一个自己不确定的东西预付钱，这对富人来说，可能并没有什么，但是对于穷人来说，那部分钱他们可以挪为他用，可以马上看到价值，毕竟在贫穷的时候，金钱会限制人们想更长远的未来，眼前的最真切。</p><blockquote><p>另一种可能性是，穷人对保险的概念并不是很了解。的确，保险与穷人接触过的大多数交易并不一样。保险是你预先支付一定费用，为将来生活购买的一种保障，但希望自己永远都不会用到。</p></blockquote><hr><p>◆ 第七章 贷款给穷人：不那么简单的经济学</p><p>这里一个典型的恶性循环，穷人钱少，生意也小，单次借的钱也少，机构收集借款人信息产生费用与所借款的相对成本高，所以利息高，利息高导致违约可能性也高，导致利息更高。富人一次就会借很多钱，相对而言，收集他们信息的成本就比利息少很多了，自然利息就更低，而利息导致违约可能性也低，最终信誉良好，利息更低。</p><blockquote><p>贷款给穷人的主要限制在于，收集关于他们的信息会产生费用。因此，穷人大多会向熟悉他们的人借钱，比如邻居、老板、生意伙伴或当地的放债人，这恰恰就是当前正在发生的情况。</p></blockquote><hr><p>小额贷款在解决贫穷的时候为什么会有效，原因可能有：</p><p>1.贫穷的人做的都是小本生意，小额贷款足够解决他们的问题。</p><p>2.小额贷款不是借款，有更加标准化的流程，利息也没那么高，容易被穷人接受。</p><p>3.愿意小额贷款的人一般是想要改变现状的人，你们有比较强的动力创造价值。</p><p>4.小额信贷给穷人钩画了一个垫脚尖可以触碰的未来，打破一些固有的局限。</p><p>5.信贷不同于一般借款，有信用背书，潜在违约成本更高，一定程度降低了放贷机构成本。</p><p>6.小额信贷加速了资金流动，对局部区域的经济有带动作用。</p><p>不过好像也有不少缺点，最明显的是小额，多少算小，每个人的信用不同，如何建立有效的征信，什么样的征信对应多少钱，这些都是大难题。在这点上，中国的小额信贷建设应该算很强了，到处让你贷款的广告也说明这点。</p><blockquote><p>作为经济学家，我们对这些结果感到很高兴：小额信贷的主要目标似乎已经实现了。对此，我们需要展开更多研究，以证明其合理性。而且我们有必要了解这一趋势未来的发展态势。但至今为止，一切都发展顺利。在我们看来，小额信贷已经赢得了自身的一席之地，成为抗击贫穷的关键手段之一。</p></blockquote><hr><p>◆ 第八章 节省一砖一瓦</p><p>因为要满足的需求不一样，前文也有提及一个案例，为什么贫穷得连饭都吃不饱，家里却还需要一台电视机。每天贷款还利息是为了生计的正常打拼，而每天喝杯茶是给自己生活的安慰。这两者都没有问题，所以又何必强迫贫困的人二选一，他们没有钱，所以希望更加努力打拼，喝便宜一点的茶，尽可能让自己的当下活的快乐一些。</p><blockquote><p>关键在于，这些小贩似乎就坐在随处可见的摇钱树旁边，她们为什么不再用力摇一摇呢？</p></blockquote><hr><p>把贫困归咎于主观能动性的不在少数，解决贫穷的很多办法都是希望通过外力的因素去教育穷人如何致富，去告诉他们应该怎么做，不应该怎么做。可是又有多少人想过，大部分穷人他们本身也希望通过自己的努力让生活变美好，他们没钱的时候不也希望借款来让自己有开始自己事业的筹码吗？这里提到的肥料问题，穷人知道肥料可以增加产量，可是到该用肥料的时候没有钱买了，刚收成的时候有点钱，而且看到因为肥料而得的好收成也愿意买肥料，可是此时店铺里面却没有肥料。而此时不买，往后总有很多急需用肥料钱的时候。所以解决贫穷，一方面的确是要提升穷人的思想教育，另一方面还要为他们提供致富便利。把解决贫困的各种手段想象成一个产品，如果用户使用产品的壁垒特别高，难以触发动机，而且用户从中无法获取到多变的报酬，用户怎么能有行动和持续的投入呢。</p><blockquote><p>对于欧迪诺来说，这并不是一个问题，因为他在做兼职自行车出租司机时，可以常常到城里看看化肥是否有货，而且可以在任何一家有货的店里买到化肥。而对于住得离城里较远的人来说，他们却很难做到这一点。这一小小的不便降低了人们的储蓄及生产效率，而我们要做的就是消除这个小障碍。</p></blockquote><hr><p>不只是穷人，每个人都是这样，如果按照百分比而言，富人和穷人在这方面的目标差异估计没有那么大。比如对一个资产只有1000元穷人，让他经过一年的时间，赚回2000元；同样比如一个资产1000万相对富裕的人，让他经过一年，赚回2000万。只是再更多人看来，2000元没有那么多，比较容易达成，2000万有点多，有点难达到。其实同样赚回100%，并没有谁更厉害，而且拥有1000万的人选择更多。跳一跳能够着的目标就是好目标，比较需要放在同一个维度上，否则真成降维打击了。</p><blockquote><p>当你想要的一切看上去都很遥远时，你很难感受到动力。将目标设置得更近一些，或许是穷人实现这些目标的有效方式。</p></blockquote><hr><p>◆ 第九章 不情愿的企业家们</p><p>如何看待穷人是天生的企业家这一论点？这怎么说呢，穷人因为一无所有，生存激发他们做了很多从0到1的突破，从无到有创造价值。企业家也需要从企业的创立到发展，从无到有，从少到多，这个角度看存在相似之处。不过从另一个角度，穷人和真正的企业家还是不一样，最大的区别可能就是利用资源的方式，穷人利用资源是线性的，比如烘干湿沙粒打包买个需要擦盘子的人，这的确是商业思维，不过这种商业思维只够糊口，大企业家利用资源的方式是网状的，跳出固有的沙子，把人力囊括进去可能就会创办一个企业。商业思维遍地都是，而真正的商业模式却并不频繁，所以不要因为自己有一点不同的想法就恃才傲物，保持谦逊。</p><blockquote><p>穆罕默德·尤努斯创立了世界著名的格莱珉银行，他常常将穷人称为“天生的企业家”。还有，已故的商业巨头普拉哈拉德也曾劝告商人们，应更加关注其所谓的“金字塔底”。这表明，在大企业和高等财政部门的参与下，具有企业家精神的穷人有助于扶贫政策的实施。</p></blockquote><hr><p>穷人小额信贷创业的艰难可能在于他们进入的市场已经是白热化竞争状态，或者逐渐会演变到白热化状态，因为在这种资源相对平等，信息比较对称的环境下，大家的水平都差不多，难以形成竞争壁垒，而这种情况下，企业主根本没有议价能力，赚钱也就很难了。</p><blockquote><p>穷人经营的生意只能产生较低的利润，这也说明了为什么小额信贷似乎很难彻底改变他们的生活。如果穷人经营的生意都不赚钱，那么给他们提供一笔做生意的贷款根本不能改善他们的生存状况。</p></blockquote><hr><p>◆ 第十章 政策，政治</p><p>与其说政府的存在是为了解决市场无法解决的问题，还不如说政府是协助市场正常运转的调节器。政府应该是市场的一部分，只有以某种角色参与到市场中，才能发挥最大的效用。市场是复杂变量组成的庞大系统，因为足够复杂，所以在大数定律的条件下，它会动态稳定，但也会在某些领域出现概率性的脱轨，而政府就是为了解决这些脱轨问题。所以优秀的政府工作者一定是市场动态的平衡敏感者，反之不成立。</p><blockquote><p>在很大程度上，政府之所以存在，就是为了解决市场无法解决的问题——我们已经看到，在很多情况下，只有当自由市场出于某种原因无法发挥作用时，政府干预才有必要出现。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济 </tag>
            
            <tag> 贫穷 </tag>
            
            <tag> 阿比吉特·班纳吉 </tag>
            
            <tag> 埃斯特·迪弗洛 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《简单统计学：如何轻松识破一本正经的胡说八道》</title>
      <link href="2021/01/02/jian-dan-tong-ji-xue-ru-he-qing-song-shi-po-yi-ben-zheng-jing-de-hu-shuo-ba-dao/"/>
      <url>2021/01/02/jian-dan-tong-ji-xue-ru-he-qing-song-shi-po-yi-ben-zheng-jing-de-hu-shuo-ba-dao/</url>
      
        <content type="html"><![CDATA[<p><strong>《简单统计学：如何轻松识破一本正经的胡说八道》，加里·史密斯著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>看这本书一直出于高度谨慎的状态，因为有时候不知道前一页看到的例子，是否就会在下一页被推翻，有时候看到一个标题就知道肯定不靠谱，但是仍然想继续看下去为什么会出现这种研究观点。自选择偏差，幸存者偏差，证实性偏差，计算误差，相关性因果偏差，均值回归，偏好数据保留，平均定律等都能带来很多迎合直觉或违反直觉的问题。读这本书会有稍微的不适感，一方面是作者列举了太多一本正经胡说八道的例子，同时作者那种直言不讳的风格也非常尖锐。书名虽含有统计学，其实统计学知识并不多，如果是奔着学习统计学知识去的，不是很推荐。我生活中非严肃场合偶尔也会一些有点根据的胡说八道，不过通过作者的案例，对“一本正经”有了不一样的认识，不管证据是否可靠，但至少一本正经。</p><hr><p>◆ 第1章 模式、模式、模式</p><p>当时“保罗”预测的时候就一直很纳闷为什么一直在选德国，只是当时没有详细考虑这个问题，原来问题出在国旗身上，如果当时对章鱼预测的国旗做个简单的相似性分析，很容易就会发现这个问题，只是大多数人更愿意相信惊艳的结果。</p><blockquote><p>不过实验表明，章鱼能够识别明暗度，而且喜欢横向形状。德国国旗有由三块鲜艳的水平条纹组成，塞尔维亚和西班牙的国旗也是如此，</p></blockquote><hr><p>有一定道理，数据挖掘建模中80%时间都在做特征，就是为了对数据进行重塑，不过有一点需要申明，有效的挖掘模式是可以迁移的，而这种可迁移就是利用价值。</p><blockquote><p>这些做法——选择性报告和数据搜刮——被称为数据挖掘。通过数据挖掘发现的统计显著性只能体现出研究人员的耐心。在独立检验证实或拒绝结论之前，我们无法判断某种数据挖掘马拉松到底证明了某种实用理论的有效性还是研究人员坚定的毅力。</p></blockquote><hr><p>◆ 第2章 不再神奇的超级畅销书</p><p>自选择偏差是一个无法完全拆分的变量，这种变量有一个特点，在结果出来之前，无法度量它的存在，可是当结果出来后再度量它也失去了意义。</p><blockquote><p>当数据涉及人们的选择时（比如当人们选择上大学、结婚或者要孩子时），就会出现“自选择偏差”。在这种情况下，对于做出不同选择的人进行比较的做法是靠不住的。</p></blockquote><hr><p>这里有一个明显的问题是因果关系的界定，到底是逮捕定罪降低了投票率，还是不愿意参与投票的人的逮捕定罪率更高，而且这里只能说明观察到的两项数据变化趋势有一定的相关性，并不能直接说明它们有因果关系。这在实际中经常会被一些所谓的分析师们捉弄。</p><blockquote><p>一份针对美国城市最边缘群体的大规模调查发现，在曾被警察拦截和盘问的群体中，投票概率降低了8%；在曾被逮捕的群体中，投票概率降低了16%；在被定罪的群体中，投票概率降低了18%；在曾经遭到拘留或监禁的群体中，投票概率降低了22%。</p></blockquote><hr><p>简单而言，这里把去过法国不止一次定为了认为法国人友好的因，实则可能只是因为这些人觉得法国人友好才去了不止一次。</p><blockquote><p>大多数过去两年对法国进行过不止一次休闲旅行的美国人不认为法国人不友好。</p></blockquote><hr><p>幸存者偏差和自选择偏差类似，不同的是幸存者偏差不会出现嵌套循环，而且幸存者偏差似乎更容易被大家识别。</p><blockquote><p>许多观测性研究存在幸存者偏差。例如，健康维护组织在一项调查中发现，超过90%的成员对该组织感到满意。这里存在两种幸存者偏差，它们都在推高调查的满意度：一些人由于不满意而退出了这项计划，还有一些人离开了人世。</p></blockquote><hr><p>预测一件未发生事情的出现非常难，但是给已经发生的事找理由并不难。就像在股票市场中，每天收盘后网络上一大推长篇大论的分析，似乎自己真的看透市场一样，其实都是事后诸葛亮。</p><blockquote><p>对成功的企业、婚姻和人生进行回溯性研究的所有书籍都存在这个问题，包括成功企业、持久婚姻、活到百岁的方法/秘密/诀窍等。这类书籍存在固有的幸存者偏差。</p></blockquote><hr><p>◆ 第3章 被误传的谋杀之都</p><p>这种效应很可怕，可是设置对照组的成本又非常高（我一直对以人的未来做对照实验的方法持谨慎态度），所以实际中做很多事情并非一定要证真，只要不可证伪就有存在的必要。</p><blockquote><p>当人们最终结束这项实验时，得到的结果令人吃惊。在接受胃冷冻治疗的患者中，34%的患者表示病情出现了好转；在接受与体温相当的液体的患者中，这个比例是38%。又是安慰剂效应！</p></blockquote><hr><p>◆ 第4章 新的经济学上帝</p><p>抛开计算机bug而言，我们认为计算机能算出正确的数和计算机算出的数是正确的有本质区别，计算机只能保证从输入到输出的正确，并不能保证全流程。而很多时候，我们在遇到错误时，直接帅锅给计算机，计算机算出来的就是这样，怎么可能错误。</p><blockquote><p>错误的问题会导致错误的答案。如果我想知道169的平方根，实际却让计算机计算196的平方根。计算机会告诉我，答案是14。对于我所提出的问题来说，这个答案是正确的。对于我想提出的问题来说，这个答案是错误的。这类错误被称为“计算误差”，但它们实际上是人为误差。遗憾的是，一些计算误差具有极为严重的后果。</p></blockquote><hr><p>◆ 第6章 美国有多少非裔职业运动员？</p><p>不换门的话，赢得大奖的概率是1/3。换门的话，赢得大奖的概率是2/3。</p><blockquote><p>在电视节目《一锤定音》中，你可以在三扇门之中做出选择。其中，一扇门后面是一项大奖，另外两扇门后面是山羊。在你选择一扇门以后，主持人蒙提·霍尔（Monty Hall）每次都会向你展示你没有选择的一扇门后面的山羊，并且询问你是否想要换一扇门。</p></blockquote><hr><p>的确，概率的乘积会发生很多奇妙的变化，不过说真，作者这里的用法稍微有点过激了，比如，把一个小概率事件（阳性）和大概率事件（全部调查者）放在同一个系统中对比，本身就会有争议。这里还体现了准确率，精确率和召回率的艺术，这种用数字避重就轻的方式很容易迷惑人。</p><blockquote><p>在950个阳性检测结果中，475个结果是假阳性。高达50%的阳性员工没有使用大麻。这就是我们需要谨慎对待条件概率的原因。虽然95%的大麻使用者会检测出阳性结果，但是只有50%的阳性结果来自大麻使用者。</p></blockquote><hr><p>◆ 第7章 辛普森悖论</p><p>数据被分解，某种程度上就会为每个分类赋予一定的权重，而这个权重会直接影响到结果，总会受到数据分布的不同和异常值的影响。</p><blockquote><p>这仍然是辛普森悖论。当数据被分解时，聚合数据中的模式遭到了逆转。</p></blockquote><hr><p>这就有意思了，到底是喝咖啡导致了疾病，还是喝咖啡导致了抽烟，然后抽烟导致了疾病，或是抽烟导致了喝咖啡，又或是存在这种疾病的人本身就更喜欢喝咖啡，当引入系统性差异是，关系就变得复杂了。很多时候相关性并不能证明因果关系。</p><blockquote><p>1971年的一项研究发现，同没有膀胱癌的人相比，患有膀胱癌的人更愿意喝咖啡——这意味着咖啡会导致膀胱癌。不过，这里存在一个混杂因素，那就是喝咖啡的人更愿意吸烟。导致膀胱癌的到底是咖啡还是香烟呢？</p></blockquote><hr><p>◆ 第8章 状态火热的雷·阿伦</p><p>我们都希望能在一定程度上控制未发生的事，倾向于基于已知寻找可以预测未知的模式，但是有时候这可能就是一个随机事件。就像股价变化，用随机过程一模拟，似乎能发现所有的股票走势。不过换个角度，手热的时候可能就是因为自信了呢，自信了在一定程度上后面的投篮就不再是简单的随机过程，和前面投篮结果就有了直接关系。</p><blockquote><p>类似地，如果篮球选手在5次投篮中4次命中，我们可能认为他下次投篮命中的概率是80%。如果这个选手在5次投篮中4次不中，那么他下次投篮命中的概率只有20%。根据很小的投篮样本，我们认为选手的状态由好转坏，从80%的命中率转变成了20%的命中率。我们没有意识到，即使选手每次投篮命中的可能性都是50%，他也会时而五投四中，时而五投一中。</p></blockquote><hr><p>◆ 第9章 胜者的诅咒</p><p>我们常认为供给与需求相辅相成，实际在新事物出现时，往往是需求先行，供给只是为了更好的满足需求。反观当下，很多还停留在炫技的所谓技术革命只不过是自我麻醉。</p><blockquote><p>供给不会自动创造需求；相反，需求常常会创造供给。</p></blockquote><hr><p>回归有一个条件，影响结果的条件相对独立，这有点像形成正态分布的条件，举个小例子，有一组1到100的整数，随机从里面取两个数取平均值，当实验很多次后，会发现这个平均数趋于50。</p><blockquote><p>异常的父母通常拥有不太异常的孩子，反之亦然；同样的道理，不管我们沿着时间前进还是后退，利润率都会出现回归。观测到的回归只能证明当利润率在能力值附近波动时，观测到的利润率差异大于实际能力值的差异。</p></blockquote><hr><p>均值回归的时间成本相对较高，五年的时间，不是所有人都能熬过的，而且五年后是这样，3年后或6年后的结果呢？均值回归的趋势并不是单调的，这似乎就能体现投机者和投资者的差异吧。</p><blockquote><p>在被踢出道指五年半以后，西尔斯在2005年被凯马特收购。如果你在西尔斯被道指删除以后立即购买它的股票，那么到西尔斯被凯马特收购的时候，你的总回报率将达到103%。在同样的五年半时间里，取代西尔斯的家得宝下跌了22%。</p></blockquote><hr><p>◆ 第10章 如何转变运气？</p><p>世界可能是上帝随机的骰子，但是在每一个人可掌控的那一微末范围内，用上帝的视角思考往往得不偿失。还不如去拥抱现在的规律，发生了什么就勇于去接受，存在即合理也有一定的道理。</p><blockquote><p>霉运不会提高好运的可能性，反之亦然。每一次失败不会提高成功的可能性，反之亦然。它可能仅仅是随机性的一种表现而已。</p></blockquote><hr><p>◆ 第11章 德克萨斯神枪手</p><p>细思极恐，实际中因这种对数据的过度解读产生的结论可能充斥在我们的周围，甚至是某些故意安排的伎俩，这促使我们在面对结论之前，首先思考有新数据时结论是否可被验证。</p><blockquote><p>我们对少年棒球联合会球场附近和水塔附近的推理存在同样的问题。如果我们根据数据编造理论（少年棒球联合会球场导致癌症，水塔预防癌症），那么这些数据当然会支持这种理论！它怎么会不支持呢？我们会编造出一种与数据不符的理论吗？当然不会。根据创建理论时使用的数据来检验这种理论的做法是不公平的。我们需要新的数据。在新数据面前，这种理论也应当成立。</p></blockquote><hr><p>◆ 第13章 黑色星期一</p><p>忽略一些数据，只是为了让留下的数据更好的支持自己最初的观念，这很符合人们的观念，认知的进步基本上都是基于过去的知识来对未知进行推理，这就难免推理中会保留历史知识的惯性。就像我写下这个想法，并不是单独是因为作者的这个观点，还因为我对这个观点做出了认同或否定的态度。人的认知地图也是这样不断丰富完善的。</p><blockquote><p>在“挑战者”号的例子中，对于重要数据的忽略是一个无心而致命的错误。在其他情形中，人们故意忽略一些数据，因为这些数据不支持他们事先形成的观念。为了相信某件事情是正确的，他们丢弃了与这种信念相冲突的数据。</p></blockquote><hr><p>◆ 第16章 彩票是一种智商税</p><p>如果只是使用过去的趋势预测未来，而不考虑实际意义，得出的结论往往是荒谬的，数据有价值，但是只有给数据赋予意义后才能对实际发展产生指导意义。</p><blockquote><p>类似地，如果我们仅仅根据过去的趋势推测未来，而不去考虑这种趋势是否有意义，那么我们的结论可能会与众所周知的真相相去甚远。如果我们对股票价格和彩票中奖数字进行仔细检查，寻找跑赢大盘和中彩票的荒谬办法，我们几乎一定会得到更加糟糕的结果。</p></blockquote><hr><p>这句话好有意思，从后视镜中看未来，这种幽默讽刺真是让人哭笑不得。</p><blockquote><p>你很少能够通过后视镜看到未来。</p></blockquote><hr><p>◆ 第17章 超级投资者</p><p>不完全接受也不通盘否定，通常接受的观点而言股票市场是随机的，这没有错，不过股票价格的变化是相对连续的，这就不同于一般彩票的随机，它让寻找一定的模式成为可能，只是这个模式受到的影响因素太多，完全不可控。西蒙斯的神话是有一定理论基础的，不可高估历史数据的特征，也不可低估量化投资的力量。</p><blockquote><p>这些人的开创性工作很好地说明了计量金融分析的两个主要陷阱：天真地相信历史模式是对未来的可靠指引，并且依赖于在数学上很方便却不切实际而且非常危险的理论假设。</p></blockquote><hr><p>这个故事有点意思，金融市场不会让百元纸钞躺在马路上，这是建立在完全的经济假设上，可世界上不止有金融系统，而且在纯金融市场上，躺在马路上的也应该是真钞，因为每个人都是那位金融教授。</p><blockquote><p>两位金融教授在人行道上看到了一张一百元的钞票。当一位教授伸手去捡钞票时，另一个人说：“别理它；如果它是真的，那么它早就被人捡走了。”金融教授喜欢说，金融市场不会让百元钞票躺在人行道上；也就是说，如果有一种轻松的赚钱方式，那么它早就被人发现了。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
            <tag> 生活 </tag>
            
            <tag> 加里·史密斯 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《你所不了解的冷门知识》</title>
      <link href="2021/01/02/ni-suo-bu-liao-jie-de-leng-men-zhi-shi/"/>
      <url>2021/01/02/ni-suo-bu-liao-jie-de-leng-men-zhi-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>《你所不了解的冷门知识：再冷门的问题也有最热闹的答案》，小巫博士著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>再冷门的知识也有热闹的答案，那些我们习以为常的现象背后也有一堆理论支持。敢于怀疑生活中看似平常的事，这是生活的乐趣，也是对科学的敬畏。没有什么是空穴来风的，追根溯源，都会有必然的偶然答案，而且当去了解的时候就会发现，原来有这么多优秀的人已经在研究这些问题。</p><p>本书中尽可能用科学实验的方式来复现现实问题，读这本书最大的感受就是“原来是这样”，就像这会儿写书评，本来有很多想说但一下子又想不起来如何开始，原来是我的工作区域被一下子涌入太多想法占据，导致工作区域没办法好好分析这些想法了。</p><p>本书前半部分主要是逻辑思维类，能给人很多想象的空间，后两part对于理工朋友来说应该会比较了解，可以当科普读一读，很有意思。</p><hr><p>◆ 2．你为什么应该忘掉过去</p><p>我们经常被沉没成本绑架，因为在没有确定下一个判断是否正确之前，继续原来的选择可能就是最好的选择。而且我们还相信随机性和付出回报论，都跌这么多了肯定马上就要涨了，都投入这么多资源也快得到效果了。只是可能没有考虑到时间长度这个因素，跌了是会涨，不过可能不是现在，回报肯定有，不过资源可能坚持不到那个时候。</p><blockquote><p>然而，就在我们已经投入更多的时间、金钱、能量以及爱等因素之后，沉没成本往往令人难以放手、难以释怀。于是，之前已经投进去的金钱、时间以及精力就成了我们继续做下去的理由，即使客观来看坚持下去毫无意义。但是，我们的投资越多，沉没成本就越大，将项目继续做下去的理由就会变得越充分。</p></blockquote><hr><p>◆ 4．为什么不要带漂亮闺密去相亲</p><p>没有对比就没有伤害，不患寡而患不均，都是这样。不止数学上要坐标系你，物理上要参考系，我们的生活上也要对标基准。</p><blockquote><p>希德假装没听懂又问：“哈利，多少钱？”</p><p>哈利重复那个价格：“42美元！”</p><p>希德听后，转过身向他的顾客说：“他说22美元。”</p><p>那位顾客听到后赶紧将22美元放到桌上，抢在可怜的希德发觉“错误”之前，带着昂贵的衣服匆匆离去。</p></blockquote><hr><p>◆ 5．为什么经验有时会让人变蠢</p><p>最后一句深受启发，烫猫的是热灶台，但那以后冷灶台也不坐了，因为在猫的世界里烫它的是灶台，而非冷热。那么人要避免类似的片面判断，做到对模式的提炼不多不少呢，可能需要尽可能少的让自己出现知识盲区吧。</p><blockquote><p>我们应该注意，一个经历里隐藏着多少智慧，我们就只汲取多少，不要多，好让我们不像坐过热灶台的猫一样。被烫过的猫永远不会再坐到热灶台上去，这是对的，但它也永远不会再坐到冷灶台上去了。</p></blockquote><hr><p>◆ 7．为什么不要以结果判断决定</p><p>实际中的确存在随机性偏差，可是我们在现实世界中能经历的样本始终是有限的，如果必须在有限的样本中选出最佳的方案，当然只有对历史数据进行分析（这在统计学上叫估计），即使有偏差，这也已经是相对优的方案，只是作者这里想表达的意思可能是不要以结果去硬性解释决定，要从过程中去找证据，不过这也难免分别踏入律师思维和科学家思维，太微妙。</p><blockquote><p>研究人员为了分析3位心脏外科医生的成绩，于是让每位外科医生进行5次高难度的手术。多年后，当初接受手术的病人的死亡率在20%左右。具体结果是医生A的5个病人一个也没去世，医生B的病人一个去世，医生C的病人两个去世。我们该如何评价这3位医生的成绩呢？如果你像大多数人那样思考，认为医生A是最优秀的，医生B次之，医生C是最差的，你正好犯了结果偏误，这是因为抽样试验的范围太小，结果相应地也说明不了什么。</p></blockquote><hr><p>◆ 9．为什么人们越舒适越抑郁</p><p>抑郁的人其实非常专注，只是他们的思维被限定在了一个特定的狭小空间里，难以发散，所以对其他事物没有兴趣，可能在他们看来自己专注的就已经是自己的世界了，所以部分抑郁者会走向我们认为的极端，站在他们的世界可能那并不是。</p><blockquote><p>抑郁是常见而普遍的，是进化的需要，不能算做疾病。安德鲁还认为，抑郁的人常常会以高度分析性的思考模式去激烈地反思问题，并持续很长时间。就是说，抑郁的人往往执着于复杂问题，逐个细化并且一次只思考一个。</p></blockquote><hr><p>◆ 10．重要时刻，大脑为何一片空白</p><p>解决了纠结好多年的问题，原来记忆分长时记忆与工作记忆，就像内存和硬盘，平时记忆的东西存储在硬盘上，需要用时从硬盘读到内存中，可是内存只有那么大，当担心和忧虑占据大量内存后，就存不下其他需要的信息了。</p><blockquote><p>一个人如果太担心结果不好，这种担心就会占用工作记忆，而且长住不走，结果你需要的信息就没地方放了。就像是内存满了，硬盘里有再多文件也是白搭。</p></blockquote><hr><p>◆ 12．为什么约会吃饭也流行男左女右</p><p>以前也知道左脑控制逻辑思维，影响右半身体；右脑控制形象思维，影响左侧身体。没想到这和男左女右还有关系，很新颖，坐左侧一方面了解真实的别人，同时也保护自己，真是太理性了。</p><blockquote><p>谈话对象的真情实感是通过左半侧脸显露的，右侧脸流露出来的是理性的信号，而左侧脸表示的则是自己的情绪和感情。</p></blockquote><hr><p>◆ 17．为什么一着凉就感冒</p><p>不是因为着凉容易导致感冒，而且因为导致着凉的条件更容易导致感冒。着凉不是原因，其也是一种症状。</p><blockquote><p>一般说来，当空气湿度达50%以上时，感冒病毒会迅速死亡，但是冬天的干燥气候恰好为病毒提供了舒适的环境，这就大大延长了病毒在体外的存活时间。再加上，人们在冬天往往会减少外出活动，喜欢瑟缩在温暖的室内，封闭的环境加之不流通的空气，更容易让感冒患者身上散布出来的病毒在空气中生存较长时间，并且传染给别人。</p></blockquote><hr><p>◆ 22．为什么长相好的人更容易事业有成</p><p>“光环”感觉有点虚幻，从现实意义来看，好与坏可以看成是一种隐形资源，好说明在某个方面资源丰富，反之怀则是资源匮乏，所以好者愈好，坏者愈坏，逐渐到两个极端，这样一来，好坏不再是结果，而是会参与自我进化的迭代条件。</p><blockquote><p>一个人如果被标明是好的，他就会被一种积极肯定的光环笼罩，并被赋予一切都好的品质。一个人如果被标明是坏的，他就会被一种消极否定的光环笼罩，并被认为具有各种坏品质。这就是光环效应。</p></blockquote><hr><p>◆ 28．第六感就是潜意识</p><p>就我而言，我并不关心第六感和潜意识有多少交集，我更想知道的是我们为什么会有第六感，以前我对这样玄乎的东西是不太认可的，但到这里我有点相信了，第六感和我们正常的触听感一样，都是进化的结果，只是除了我们能直接感知到的外，还有一些是我们无法解释的，所以全都划分在第六感了。</p><blockquote><p>心灵感应和预感等现象都可以从动物学的角度得到解释。其实这些都是动物的正常行为，在其进化过程中，这些技能使它们成为“适者”而生存下来，而人类的第六感同样是从我们的祖先那里继承下来的。</p></blockquote><hr><p>◆ Part 3 选择背后的秘密你选择的是你的选择吗</p><p>从已有的经验中提取现成的知识，这点相对于接受别人的知识更加容易，而且就算自己的现成存在偏差，也会觉得聊胜于无，但我们自己现成的可能真的只是自己现成的，就像在自己朋友圈刷屏的可能在别人那里闻所未闻，历史经验越匮乏，现成偏差越大，所以多听别人说，不管对不对，至少能让自己再次审视现成偏差。</p><blockquote><p>这里所说的现成偏误是指我们依据现成的例子来想象世界。很显然，这种想法是非常愚蠢的，因为外界现实中的某种东西压根儿就不会因为我们更容易想到而出现得更频繁。</p></blockquote><hr><p>◆ 33．为什么不行动只是等待就是种痛苦</p><p>有一句老透了的话，叫选择比努力更重要，这句话谁都知道，可是又有谁能像先知一样做出正确的选择呢，作者这里给出一个答案，无论什么时候，不要急于做出行动，克制自己，先分析清楚形式，这样能避免浪费有限的时间，做无用的行动。</p><blockquote><p>人类的全部不幸就是他们不能安静地待在他们的房间里。如果情况不明，请你不要采取任何行动，直到你能更好地分析形势。无论什么时候，都要学会克制自己。</p></blockquote><hr><p>◆ 36．为什么不要死抱着某种东西不放</p><p>记得有一个实验是这样的，对一个工厂里的工人分两组（就算是AB组吧），告诉A组他们完成额外的工作后可以获得100元的额外报酬，对B组是先给他们100元，然后告诉他们如果完不成额外的工作，这100元就需要退回，最后的结果是B组完成度明显高于A组。</p><blockquote><p>这里所说的“损失厌恶”就是特别不愿意失去现在所拥有的。因为不愿意失去现在所拥有的一切，所以只有当有人支付很高的价格时才愿意出售。</p></blockquote><hr><p>◆ 40．为什么“更多”反而是“更少”</p><p>个人感觉这可能和确定性有关，比如当有很多选择的时候信息同样是很不确定的，毕竟还要从很多的选择中再次做出选择，所以这本身和选择的多与少并没有太大的区别，只是信息是否已经确定了。</p><blockquote><p>为什么选择越多，我们反而无所适从</p></blockquote><hr><p>◆ 43．因为贵，所以好吗</p><p>价格是一种评判标准，所以给人了一种贵等于好的暗示，另外还有一点，作者在我们更愿意寻找肯定自己的理由中有提到，既然我们已经为这付出这么昂贵的代价，我当然更愿意相信它就是好。</p><blockquote><p>价格本身成了质量的评判标准。俗话说，“一分价钱一分货”，因此，人们不经意地就把这条规则提炼成了“价格贵=东西好”。</p></blockquote><hr><p>◆ 44．为什么减肥总是从明天开始</p><p>给出享乐小人和计划小人的概念，就能很好的解释为什么接到总是从明天开始了，不只是减肥，很多需要付出较大成本的都在明天，很多能马上获得正向刺激的都在当下。</p><blockquote><p>在每个人的心里都住着一个冲动感性的享乐小人和一个理性深邃的计划小人，并且这两个小人时时刻刻都在进行着斗争。</p></blockquote><hr><p>◆ 47．为什么你的决策很容易被他人干扰</p><p>在理性人假设中，只要给第二个人的资源大于0，就能成功分配，可是在现实世界中这不可能，因为社会人还有一个特点，不患寡而患不均。</p><blockquote><p>在最后通牒博弈中，有些人倾向于分给自己更多的资源。可是，第二个人显然不会接受这种分配方案。即便第二个人知道如果自己拒绝该方案的话，两人都会一无所获，仍然会拒绝不公平的分配。这个选择貌似不符合逻辑，但却合乎人情。不管这个决策是不是巨大的失误，第二个人仍会拒绝这个不公平的交易。在心理层面上，他宁愿一无所获，也绝不让第一个家伙占到半点便宜。</p></blockquote><hr><p>◆ 57．为什么饼干越少越好吃</p><p>因为少，机会有限，就会对拥有变得更加渴望，所以大脑会自动接收该食物好的信息，而忽略坏的信息，所以就变得越来越好吃，其实单从味觉上可能没有变化，只是心中肯定了自己最初的选择。</p><blockquote><p>◎稀缺最关键</p><p>社会心理学家斯蒂芬·沃切尔曾做过这样一个实验：他将受试者分成两组，请他们评价饼干的质量。第一组得到整整一盒饼干，第二组只得到两块。结果，第二组受试者对饼干质量的评价要比第一组高得多。</p></blockquote><hr><p>◆ Part 5 丛林里的游戏严肃而有爱的动物研究</p><blockquote><p>支持平衡说的人们认为，这是由于身体速度的变化，刺激内耳里面控制平衡的前庭器官，于是造成点头的现象；支持运动说的人们则强调小鸟行走时一举翅、一投足，都可能造成脖子和脑袋的肌肉自然反射，所以头部也会不断运动；而支持视觉说的人们则高举邓老师和莫老师的“大旗”，把“点头摇头，看得清楚才是好头”的理论发扬光大。</p></blockquote><hr><p>◆ 68．公鸡为什么早上打鸣</p><blockquote><p>对于公鸡打鸣，专家给出这样的解释，认为那是一种“主权宣告”，一方面提醒家庭成员它至高无上的地位，另一方面警告邻近的公鸡不要打它家眷的主意。这就好比狗能从一泡狗尿中嗅到很多信息一样，鸡也能从一声鸡叫中听出很多故事。</p></blockquote><hr><p>◆ 71．螃蟹的抉择：横行，还是直走</p><blockquote><p>那么，为什么螃蟹会横着走呢？首先，结构决定功能，螃蟹的每只步足都由七节组成，关节只能上下活动，跟人的胳膊肘不能往外拐、膝盖不能向后弯是一个道理。</p><p>事实上，螃蟹可以缓慢地向前行走，但步幅、速度和效率远低于横着走。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 追根溯源 </tag>
            
            <tag> 小巫博士 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《增长黑客》</title>
      <link href="2021/01/02/zeng-chang-hei-ke/"/>
      <url>2021/01/02/zeng-chang-hei-ke/</url>
      
        <content type="html"><![CDATA[<p><strong>《增长黑客》，肖恩·埃利斯 摩根·布朗著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>增长黑客的主要目的是使用低成本、高效率的方式实现精准营销，为了实现黑客式增长，肖恩为我们提供了完备的方法论和经过实际验证过的技巧。虽然并非书中的每一个方法都能在实际项目中获得奇效，但这套增长逻辑是增长的底层设计，按照这样的方法，可以帮我们在实际项目中找到实现增长的方向。</p><p>工作中大家多久汇报一次项目进展呢？是每周，每月，还是没个季度呢？一个项目取得成效又需要多久时间呢？互联网时代价值迭代非常快，也许这个季度还有意义的事情，到下个季度可能就没有了意义，更快占领市场的才更有可能成为优胜者（当然这里我比较同意快人半步是英雄，快人一步是先烈的说法）。增长黑客一书中提出的方法是以周为维度检验效果的，这种低成本、高效率的方式，值得当下每一个互联网人学习。</p><p>本书主要分为两个部分，分别是方法论和实战。在方法论部分，核心告诉我们三点，第一：设立一个跨职能团队或几个团队，打破营销和产品开发部门之间的筒仓，凝聚公司人才；第二：进行定性研究和定量数据分析，深入了解用户行为和喜好；第三：迅速产生新思路并进行测试，根据严格的指标对试验结果进行评估并采取相应行动。在实战部分，分别告诉我们如何实现获客、激活、留存、变现，以及如何在增长实现之后维持并加速增长，做到增长的良性循环。</p><p>本书的核心观点是在有好的产品后，组建独立的增长团队就相应的增长目标，开展快节奏的试验。不管是获客、激活、留存还是变现，没有任何一个通用方法可以保证成功，唯一需要做好的就是快节奏的试验。肖恩比较强调在速度上取胜，每次试验的效果在周维度上检验，甚至一周会开展多次试验，这种战术会有很多失败，但是只要能快速的找到一个快速增长的试验，就能取得巨大的成功。</p><hr><p>◆ 前言 低成本、高效率的精准营销</p><p>细想一下，我们有多久没有认真的看一封产品说明书了。着陆页已经在我们生活中深深的内化了，这是商业进化中形成的潜规则。就像一个路口的红绿灯，如果只有绿灯，不是简化了人们对路口形势的判断，只会让人迷茫，如果某天出现一颗蓝色灯，可能没人知道代表啥。</p><blockquote><p>意识到这点之后，我将我的营销团队和技术团队召集在一起进行头脑风暴，让大家献计献策，思考如何改进用户“着陆页”，如何更好地向用户传达这并非圈套，让他们相信LogMeIn真的提供免费的产品。我们尝试了许多营销方案和网页设计，但是，这些试验几乎没有带来任何实质性的改变。之后我们决定在页面上增加一个购买付费版本的简单链接，结果这让我们找到了页面设计、信息传达和服务选项的完美组合，使我们的转化率提高了不止两倍。</p></blockquote><hr><p>返现和赠送空间，这种裂变式营销，现在各大社交平台上层出不穷，在二十年前互联网资源还比较匮乏的年代，已经相当超前了，而且就是在今天，很多所谓的裂变式营销，也没有领悟作者这里提到的精髓，只是为了所谓的裂变而裂变，完全脱离用户的实际需求。</p><blockquote><p>于是我们将贝宝作为样板设计了一个用户推荐计划，用户每推荐一个朋友使用我们的服务，我们就额外提供给他们250兆的存储空间，同时他们的朋友也可以额外获得250兆的空间。</p></blockquote><hr><p>◆ 人员分工</p><p>增长团队的定位是清晰的，但是一直对增长团队的存在形式有点抓不透，特别是对于业务复杂的大中型企业，数据采集存储，产品设计，产品体验，软件研发，数据分析等都是有特定部门负责的，增长团队的独立出现，可能减少了很多中间成本，但这个团队对于特定领域环节来说竞争力可能不够明显。</p><blockquote><p>如果团队里有用户体验设计师，他/她可能会负责收集并分析用户关于他们最看重的产品功能的反馈，并将分析结果汇报给团队。而这样的调研可能会引导团队提出改变某个功能或者测试某个新功能的想法。而后，团队可能会让工程师负责相应的编程工作，比如，如果调研发现用户在浏览网站时容易“找不着北”，工程师就可能需要对网页进行调整，比如修改购物车界面。</p></blockquote><hr><p>◆ 第二章 好产品是增长的根本</p><p>感觉增长团队需要负责的东西还挺多，在什么样的企业规模，组建什么规模的增长团队太重要了，这可能会直接导致增长团队能否成为企业的支柱团队。因为对于一个没有具体业务做支撑的团队要想在企业中持续绽放生命力，还是很有难度的。</p><blockquote><p>此外，增长团队需要认识到，有些时候，产品或服务的核心价值并不仅仅在于它的功能，而是在于它是否与恰当的核心市场相契合，而这一核心市场可能和公司一开始所设想的相去甚远，</p></blockquote><hr><p>啊哈时刻是产品的核心价值所在，是产品在市场上存在的意义，这固然非常重要，不过只找到啊哈时刻可能并不能实现黑客增长，因为啊哈时刻只能保证对用户有价值，不能让用户实现自增长，增长黑客的出现需要实现用户裂变与啊哈时刻的正向循环，就像Dropbox的啊哈时刻是文件分享，而促使增长的是邀请好友赠送存储空间，获得更多存储空间可以让用户分享更多的文件。</p><blockquote><p>啊哈时刻”就是产品使用户眼前一亮的时刻，是用户真正发现产品核心价值——产品为何存在、他们为何需要它以及他们能从中得到什么——的时刻。换句话说，就在这个时候，用户认识到这个产品对他们来说为什么不可或缺。正是这个时刻下的体验使早期用户转变成产品的超级用户和宣传大使。</p></blockquote><hr><p>设计一个好的调查方案太重要了，希望达到的目的是什么，获得产品的用户反馈是什么，如何让用户用尽可能少的时间完成反馈，如何从反馈中分析到想要的结果，预期什么样的反馈可以支撑什么样的决策……</p><blockquote><p>如果这个产品明天就无法使用了你会有多失望？</p><p>a）非常失望</p><p>b）有一点失望</p><p>c）不失望</p><p>d）不适用——已经弃用产品</p></blockquote><hr><p>◆ 成为不可或缺的产品</p><p>一个产品的啊哈时刻在开始是可能是明确的，但随着业务的逐渐丰富，很容易迷失初心。同时有时候一个产品设计者定义的啊哈时刻，并不是用户最关注的，歪打正着到另一个。时刻与用户站在一起，定期组织用户调研很有必要，这能让产品与用户的距离尽量小。问卷的设计同样重要，比如如果没有这个产品你最舍不得的功能是什么，就比你最喜欢这个产品的什么功能更能找到啊哈时刻。</p><blockquote><p>必须采用分析手段找出“啊哈时刻”没有实现的原因以及如何才能实现，而不是单纯依靠主观臆测。为此应同时采取下列三个措施。</p><p>• 开展更多的客户调查，包括采访和实地调研，真正与客户和潜在客户交谈。</p><p>• 针对产品改动和信息传达进行高效试验。</p><p>• 深入分析用户数据。</p></blockquote><hr><p>啊哈时刻不是用户决定的，更不是产品设计者决定的，是在用户和产品的交互之间形成的，所以通过快速的AB测试迭代，才能让交互关系保持活力，从这种程度来说，重要的可能不是具体的功能，应该是一种关系，你需要，我正好有。</p><blockquote><p>在我们合作过的公司，我们亲眼目睹了数百个类似的案例：通过实施A/B测试所发现的非常简单的改变，这些公司成功为客户创造了“啊哈时刻”，从而实现了用户的大幅增加。</p></blockquote><hr><p>◆ 深挖数据</p><p>这一点在现在app满天飞的时代非常明显，大家都喜欢轻应用，上手简单，使用方便。微信，抖音的霸主地位很大程度上可能正因为如此。当然不排除重的应用也能称霸，就像支付宝。关键在于使用app是为了达到某个目的还是使用某个功能。</p><blockquote><p>正如凯斯·索耶在他的《Z创新：赢得卓越创造力的曲线创意法》（ZigZag: The Surprising Path to Greater Creativity）一书中所说，“太多功能堆在一起反而让人困惑”。</p></blockquote><hr><p>◆ 不要偏离路线</p><p>非常厉害，回关的数量直接决定了网站的性质，发现这种指标需要非常强的商业洞察力，不同的行业之所以不同，是因为定位不同，那定位是怎么出现的呢，是用户使用场景不同，使用场景不同，用户对场景中获得的反馈也不同，只要清晰的找到这种反馈并尽可能的强化反馈回路，距离成功就应该就不会太远。</p><blockquote><p>通过给用户致电进行采访，团队得到的反馈是，如果自己关注的人中超过1/3的人“回关”，那么推特就跟其他社交网络没有什么区别了，产品的特殊价值就无从体现。如果不到1/3的人“回关”，那么推特似乎就更像一个新闻网站，而可供选择的其他新闻网站实在是数不胜数。</p></blockquote><hr><p>◆ 第四章 快节奏试验</p><p>有效试验永远是针对性试验，漫无目的的试验只会耗费更多的资源，让公司死得更快，有全面的数据，有清晰的目标，才能指导快速的试验。国内最知名的快速试验可能要算腾讯的赛马机制了，这种机制需要大量资源，也注定会有失败，可每一个失败的产品，都会为下一个成功的产品指明方向，谁叫腾讯拥有中国最大的流量池呢。</p><blockquote><p>一开始便试图启动太多试验可能会导致试验执行欠佳，使团队成员感到困惑，或因为试验结果不理想而使士气受挫。开展漫无目的或设计不当的试验可能得不偿失。就像你不应该在没有进行足够的训练和热身的情况下参加铁人三项赛一样，你同样不应该以太快的速度一头扎进增长黑客过程中去，这样做的结果必然是失败。</p></blockquote><hr><p>◆ 第五章 获客：优化成本，扩大规模</p><p>这两种匹配解决了获客的两个根本问题，语言市场匹配解决了用户从心理上接受产品的问题，它是产品在用户群体中的定位；渠道产品匹配解决了用户从消费上获得产品的问题，简便快捷可能就是最好。</p><blockquote><p>扩大获客规模，首先要实现另外两种匹配：（1）语言—市场匹配，也就是你对产品优势的描述打动目标用户的程度；（2）渠道—产品匹配，即你所选择的营销渠道在向目标用户推广产品时的有效程度。</p></blockquote><hr><p>广告语是用户最先接触到的产品定位，初识效应也是最强的，这将直接导致用户是否会使用和传播产品。广告语需要解决两个问题，第一，如果让广告语简单好记，最好是用户普遍认知；第二，如何把广告语和产品定位联系再一起，让用户想到这个广告语就能联想到产品。</p><blockquote><p>计划测试第一批增长黑客手段，请先从语言开始，因为这是一切的起点。</p></blockquote><hr><p>◆ 初步筛选</p><p>读到这里，看到了拼多多的影子，拼多多初期面向的用户主要是中低端，不管商品质量如何，至少拼购让这些用户实现了互惠，裂变式的传播后在规模效应中获利，因为抓住了下沉市场，在淘宝天猫京东的夹缝中异军突起。</p><blockquote><p>我们不介意把人们骗去看他们喜欢的内容，”Upworthy的创始人伊莱·帕里泽说，“如果他们不喜欢，他们就不会分享。病毒传播是在好的包装和好的内容之间取得平衡。”我们可以学到的经验是，尽管找到能打动人心的语言非常重要，但是要实现病毒式增长必须提供真正的价值。</p></blockquote><hr><p>这就是企业的飞轮效应，以阿里淘宝和百度搜索举例，淘宝商家数越多，用户可以选择的就越多，用户就越多，商户也会越多，形成了正向循环；百度收录的网页越多，用户能解决的问题越多，用户就会越多，广告商就会越多，资金流就会越多，就能收录更多的网页，以此形成正向循环。每一家成功的企业都应该在商业模式上形成飞轮效应，整个过程最好不要让企业承担过多的角色，让用户忘记是在一个用一个企业的产品最好，因为那时候这个产品才是无处不在。</p><blockquote><p>因此，具有网络效应的产品在获得病毒式增长方面具有得天独厚的优势：使用产品的人数越多产品体验就越好，所以人们是愿意鼓励其他人加入的。</p></blockquote><hr><p>被其中的这一句话吸引“一定要感谢你的朋友”，在现在社交网络如此发达的社会，人们之间的关系是非常弱的连接，而值得产生分享的连接必定是相对强的，一句简单的感谢为这种连接无意识间增加了正向反馈，用户不会觉得这种分享是一次打扰，更像是一次社交。</p><blockquote><p>“你的朋友摩根为你在Airbnb上的第一次旅行省去了25美元，Airbnb是最好的旅行方式，一定要感谢你的朋友！”它的行为召唤也很简洁醒目：一个写着“领取奖励”的大按钮。</p></blockquote><hr><p>如果一个用户发出4份邀请，就有2个用户接受，那对于发出邀请的用户来说是兴奋的，因为至少有50%的朋友肯定了自己的邀请。如果一个用户发出40份邀请，只有20个用户接受，那对于这个发出邀请的用户来说可能是沮丧的，这让他知道有一半自己愿意分享的用户拒绝了自己这个残酷的现实。</p><blockquote><p>领英也同样惊讶地发现，相比原来的用户提示语，如果建议用户发送更多邀请——但也不能太多——那么邀请计划的效果会更好。一开始提示语建议用户邀请两个人。但增长团队并没有就此罢休，他们增加了邀请数量并进行测试，结果用户照做了。但当团队将邀请数量增加到6份的时候，用户反应开始变得冷淡。增长团队最终发现，建议用户发出的最优邀请数量是4份。</p></blockquote><hr><p>◆ 第六章 激活：让潜在用户真正使用你的产品</p><p>当用户进入某一个产品，那肯定是出于某种理由或期待，而离开某个产品，多数为得到的与期望不符合，所以从离开的用户那里更能得到产品缺少什么，而且只要没有过分的侵犯到用户，多数人还是希望这个世界变得更好的。</p><blockquote><p>你一定会惊讶地发现，很多人都愿意在离开前停下来回答你的问题（问卷越简洁回应率也会越高）。</p></blockquote><hr><p>◆ 消除用户体验中的摩擦</p><p>这个太高明了，从不知不觉开始，自己已经深陷其中，这简直就是产品的艺术，使用最厉害的产品不会让你觉得是在用一个产品，它就是生活中的一部分，而且你自己都会忘记最开始是怎么用上的。不知现在还有多少人记得微信支付宝百度这些APP最开始是怎么出现在自己手机上的。</p><blockquote><p>最初采取行动时人们在心理上做出了承诺，而且不管承诺的难度发生怎样的变化，人们倾向于在做出承诺之后通过后续行动来恪守承诺。游戏设计者精明地意识到，与其给用户提供游戏说明，不如先让他们做出承诺。他们需要通过一些简单的小步骤让用户开始游戏，让他们明白怎么玩并玩起来。</p></blockquote><hr><p>结合后面提供的案例，主要提到了以某种方式给用户返现过提供优惠，就像星巴克的星计划和礼品券，这种基本上都是实物奖励，商家需要提供具体的折扣或返现。感觉还有另外一种奖励方式，直接去满足心理需求，每个人都是独一无二的，消费某个产品，也可以要让用户感觉到自己的独特性，消费分级，定制化与产品相关的创意礼品，这种不止能吸引用户进阶，应该还能引发裂变式传播。</p><blockquote><p>如果游戏化能够带来挑战和乐趣并提供有意义的奖励，那么它可能成为一个强大的激活手段。但它也可能起反作用。如果奖励没有任何价值，或者奖励与用户体验的核心价值毫不相关（也就是没有实现“产品—奖励匹配”），就会让人觉得这是在捉弄用户或是让人觉得莫名其妙。</p></blockquote><hr><p>◆ 什么是好的留存</p><p>设备的生命周期长，就用服务来填补间歇空缺，这种增加留存的方式是何等的高明，从这中程度上来说，到底是硬件成就了苹果，还是软件成就了苹果，增长黑客可能会认为是软件，苹果app store的生态闭环就是苹果最强的增长力。</p><blockquote><p>所以苹果只能等三年之后甚至更长的时间才能知道是否留住了某个iPhone客户。正因为如此，苹果逐渐发展为不仅向客户提供设备，还提供服务。这是一个了不起的增长策略，它使苹果公司得以在新产品发布的间歇更大地挖掘留存用户的价值。</p></blockquote><hr><p>这需要很强的数据分析能力，用户量增加，很容易能想到有活动或改变了广告投放方式，留存率降低，很容易能想到产品没有满足新增用户的需求。但实际分析中经常会陷入如何留住这些流失用户的局限中去，很少去怀疑新增的这些用户是否真的就是目标用户，也就很少去怀疑活动或广告方式是否有效，毕竟新增用户的确增加了。实际中经常会被结果带偏，忽略了过程。</p><blockquote><p>意识到广告宣传和留存率下降之间存在某种关联之后，增长团队就可以利用这个宝贵信息来决定尝试哪种试验。</p></blockquote><hr><p>◆ 提供实际的、体验式的回报</p><p>作者在写这本书的时候个性化推荐还没有那么火爆，现在各种信息流，短视频遍地开花，个性化推荐在用户使用产品的同时迅速获得体验式的回报，这种会对当下的体验更加沉迷，听不到其他声音，用户也就不知不觉掉入了被机器学习精心设计过的陷阱中。</p><blockquote><p>要实现个性化不仅可以利用用户提供的个人信息或者他们在公司网站或者App上的行动，还可以利用他们在整个互联网中的行为数据。</p></blockquote><hr><p>◆ 第八章 变现：提高每位用户带来的收益</p><p>体验式的个性化设计可以增加留存，个性化的分组画像也能提高变现效率，不同用户的偏好不同，使用产品解决的问题不同，对产品的预期不同，这都会使得用户与产品的交互差异，如果忽略这些差异，使用相同的变现方式，在某些地方可能很高效，可有的地方可能就会很低效，甚至给用户带去更大的摩擦。</p><blockquote><p>创建分组的目的在于更好地想出满足客户特殊需求的方式。许多营销者可能非常熟悉用户画像这种做法，即为每个群组中最具代表性的客户创建虚拟档案。</p></blockquote><hr><p>◆ 优化定价</p><p>降价很容易，但提价就会非常困难，用户会把价格和价值进行置换，降价可能是优惠活动，同步几乎都能获得更大的销量，但从长期来说，降价经常会损坏品牌价值。长期持续的降价还会让用户降低对该产品的价值度量，一旦价格向上波动，就会促使用户去更广泛的市场进行对比，用户忠诚度顺势降低。</p><blockquote><p>心理学家、畅销书作者罗伯特·西奥迪尼解释说，这是因为人们将价格看作是质量的信号，这在技术和专业服务市场特别常见。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 增长 </tag>
            
            <tag> 肖恩·埃利斯 </tag>
            
            <tag> 摩根·布朗 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《第三次工业革命》</title>
      <link href="2021/01/02/di-san-ci-gong-ye-ge-ming/"/>
      <url>2021/01/02/di-san-ci-gong-ye-ge-ming/</url>
      
        <content type="html"><![CDATA[<p><strong>《第三次工业革命》，杰里米·里夫金著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>这是一本写互联网与低碳能源结合的可持续性发展战略纲要，杰里米在书中探讨了第三次工业革命基础设施和经济体制可能的特征、工作原理，预测未来40年它可能的轨迹，并探索社区和世界各国在执行这一计划时存在的困难和机遇。</p><p>这种新经济模式的五个支柱分别是可再生能源的转变、分散式生产、储存（以氢的形式）、通过能源互联网实现分配和零排放的交通方式。</p><p>作者认为，08年的金融危机很大程度上是受到第二次工业革命减速的影响，而比金融危机更严重的是气候危机，是第一次和第二次工业革命的熵账单即将到期，近200年来，燃烧煤炭、石油、天然气推动了人类的工业化进程，但也为推到地球气候的第一块多米勒骨牌提供了条件。</p><p>那么第三次工业革命应该是什么样的呢？作者认为，网络通信技术与可再生能源技术相融合。</p><p>那么要做到这点，首先我们有这么多可再生能源存量吗？答案是肯定的，仅地热能一项，存量就是充足的。那么我们有能力做到对新能源的高利用率吗？如何收集太阳能、风能、水能、地热能，以及生物能源。</p><p>欧盟各成员国现在约有1.9亿栋楼，而每一栋楼都是一个潜在的小型发电厂，它能吸收可再生能源—照射到楼顶的太阳能、墙外的风能、从房子里排出的污水、楼房下面的热能等。</p><p>阳光不会一直明媚，风力不会一直充裕，在极端天气条件下，没有明媚的阳光，没有风，这种情况肯定会出现，所以能源存储就变得尤为重要。作者认为氢可以担次大任。可以存储了，但是存储的地方并不一定就是使用的地方，所以如何进行能源传输的问题亟待解决。</p><p>作者在欧洲是一名影响深远的人物，他通过自己的亲身事迹想我们展示了可持续发展能源在各国发展中的重要性。甚至在欧盟国际环境的影响下，提出了更多洲际化的发展思路，东盟，非洲联盟，南美联盟，秘密的北美联盟都是区别于全球化的洲际化存在。</p><p>在作者看来，随着新能源革命的到来，我们的经济活动、个人财富、金融资本、社会资本、生活质量以及对空间是时间的定位都会发生显著变化。当然要做到这些，最好也是最直接的方式是就是教育，特别是青少年教育，我相信，在某种程度上，作者出这样一本书，也是为了给新能源革命布道，也是一种教育。</p><p>作者所说新能源是一场新的革命，但历史上的革命带来的是整个产业的革新，而作者提出的互联网与可再生能源的整合方案，或许更多的是产业的进化，就像现在遍布的铁路网络一样。</p><hr><p>◆ 中文版序</p><p>第一次与第二次工业革命都是自上而下展开的，在少数工业巨头的推动下完成了产业巨变，第三次工业革命其实也不能完全摆脱这样的可能，不可否认，成千上万中小型企业的力量是巨大的，但是要实现产业变革，这也是非常低效的，如果能在巨头们的领导和指挥下，这种变革会更快。只是从另一个角度看，作者之所以认为会更加扁平化，有可能是经过第一第二次工业革命，当下的产业结构已经比较稳固，要想改变，不是几家巨头可以做到的，就像今天的自动驾驶，不是仅仅能研发出一个具有AI能力的汽车就可以，它关系到整个基础交通设施的变革，这没有哪一家企业可以做到。不过话说回来，当爱迪生刚发明电的时候，他估计也不敢想让全世界每个人都能享受到电力的便利，毕竟在那时候，架设输电线的变革程度不亚于改变今天的交通基础设施。</p><blockquote><p>第三次工业革命的组织模式却截然不同，其采取的是扁平化结构，由遍布全国、各大洲乃至全世界的数千个中小型企业组成的网络与国际商业巨头一道共同发挥着作用。</p></blockquote><hr><p>◆ 第一章 这才是真正的经济危机：你一定不知道</p><p>这种不合时宜又是必须的，社会的发展是连续性的，不会越阶，20世界下半页是第二次工业革命的竞技场，不会因为通信技术出现，就马上出现下一个极端，总会让新技术在旧产业上运行一段时间，当人们逐渐发现该应用过程的助力和制约后，才会寻求其他方案。</p><p>信息和通信技术与第二次工业革命的组合是否真的不合时宜，不宜直接定论，毕竟信息技术提高了效率，即使是还没有完全商业化落地的5G、物联网，他们都是信息技术与第二次工业革命产物的融合，从这个角度看，世界说不合时宜有点武断了。</p><blockquote><p>20世纪90年代和21世纪的前10年，信息与通信技术革命和第二次工业革命完成了整合。从一开始，这便是不合时宜的。虽然信息和通信技术提高了生产效率，优化了操作实践，创造了新的商业和就业机会，这有可能延长传统工业模式的寿命，但它不可能完全发挥分布式通信的潜力，其阻力来自能源集中化的体制与商业基本结构的内在制约因素。</p></blockquote><hr><p>为什么信用泡沫和金融危机会21世纪初集中爆发，因为其发生在第二次工业革命减速之际，这听起来有点事后诸葛亮的感觉，但是的确是一个非常好的角度。人们已经习惯了第二次工业革命带来的经济高速增长，对未来经济预期非常好，导致过度消费，但随着第二次工业革命效能减速，人们必须要有一个合理的理由来伪装向好的经济预期，于是大量的信用衍生品出现，此类产品越多，导致实际经济中的高估程度越大，也就是所谓的泡沫，直到被过度包装的次级贷款成了压垮这一海市蜃楼的最后一根稻草。</p><blockquote><p>信用泡沫和金融危机不会凭空发生，它们发生在第二次工业革命减速之时。20世纪80年代中期，经济增长开始减速，当时，郊区建设—建设州际高速公路网—达到顶峰，这意味着汽车时代和石油世纪已达到全盛期。</p></blockquote><hr><p>记得有个气候变化零界点的说法（具体出处有点忘记了），早期阶段我们可能感知不到非常剧烈的气候变化，但是当达到某一个临界点，就像作者前面提到的3摄氏度，这会导致大量冻土层消失，释放大量二氧化碳和甲烷，反过来再加剧气温上升，冰川融化，大量海底生物死亡，海平面上升……，当触及零界点，就已经是人类难以控制的地步了，就像多米勒骨牌，一旦第一块倒下，所有曾经的秩序都会被打破。</p><blockquote><p>阿拉斯加大学费尔班克斯分校北极生物研究所的科学家警告说，在本世纪的某个时间，随着数量可观的冰层消失、大量二氧化碳和甲烷排放到大气中以及短短几十年温度的急剧上升，人类将迎来严峻的考验。如果这种情况发生，人类将无法阻止这一生态系统的毁灭，地球上的生命将会消失。</p></blockquote><hr><p>◆ 第二章 第三次工业革命新构想</p><p>经济是有关信任的游戏，一直都是这样，白银黄金作为等价物，是因为稀缺性，人们信任其价值，货币也是一样，因为国家背书，当自己的财富远不及国家财富时，人们就会信任。当一个人的信用很高时，可以做到低成本甚至零成本借贷，也是这个原理。</p><blockquote><p>经济是一种有关信任的游戏。虽然人们通常认为商业交往和贸易活动是靠黄金或者白银来维持的，但是，在现实中，它却总是以一种更为重要的资源—公众的信任为依托来运作的。这就意味着，当公众的信任足够时，经济就会繁荣，未来就有保障；反之，经济就会衰退，前景就会暗淡。</p></blockquote><hr><p>为什么第三次是互联网与可再生能源的结合，这是从第一次、第二次比较平滑的过度想象，第一次是蒸汽动力，第二次是电力动力，第三次自然想象也是动力，不过可再生能源并没有像前两次那样从根本上解决了动力来源问题，所以仅靠这不够，结合互联网的结构，于是作者这里提出来了分布式能源结构，到那时，现在的随处可见的电线，可能都变成双向的了。</p><blockquote><p>互联网信息技术与可再生能源的出现让我们迎来了第三次工业革命。</p></blockquote><hr><p>不论这种分布式的能源互联网能不能成，至少这个构想是值得肯定的，上一次看到这种构想还是在KK的失控中，我们习惯了中心化的存在，去中心化在近几年已经越来越多的出现在我们身边，但是人们对这种分布式的结构利用似乎并没有很强，就像现在的区块链技术，并没有发挥到其最强的能力。</p><blockquote><p>虽然太阳照射强度不一，但是太阳光确实照射在地球上的每一个角落。虽然风力频率不一，但是风也确实吹过世界上每一个角落。无论我们走在哪里，地下都有一个滚热的地热核。我们每一个人都会产生垃圾。在农业地区，有大片的庄稼和森林。而在那些人口聚集的海岸，波浪和潮汐每天都会出现。住在山谷里的人们靠从冰山上流下来的溪水发电。</p></blockquote><hr><p>这的确能提高企业主和业主安装太阳能电池版的动机，但是这远远不够，让人去为未来八九年可以收回成本的东西投资，这虽然有很高的收益率，但很多业主并不会这样做，引用前面的说法，这就是信任的问题，人们不愿意用八九年的时间去赌一个自己不确定的东西，即使现在看起来价值很高。相比而言，提高太阳能利用率，降低安装使用成本，才是王道，就像人们愿意用电，除了能带来便利，还有一个原因是成本足够低。</p><blockquote><p>绿色抵押贷款同样也可以起到促进作用。银行和其他贷款公司可以以较低利率为安装太阳能电池板的企业和业主提供贷款。</p></blockquote><hr><p>不管这个构想多么伟大，推开市场的大门才是最重要的。人们永远难以拒绝低成本的诱惑，可是新技术刚开始时，成本往往居高不下，这和人们的需求动机并不吻合。</p><blockquote><p>他们对是不是先驱不感兴趣，他们都急于发起一场经济革命，但在现实中却都遇到了难题，甚至是绝望—他们突破性的技术和产品可能在几十年中乃至永远无人问津。</p></blockquote><hr><p>◆ 第三章 世界大趋势：第三次工业革命从理论到实践</p><p>创造全新的设施的本身成本更低，同时可以比维护旧设施带来更多的就业机会，这些都是优势，但是为什么如此多的公司没有选择这么做，因为创造新设施舍弃旧设施，这是赌上了公司的全部，这成本大到难以承担，还不如按照旧模式延续生存。</p><p>如果现在有两个试验，投入1万块钱，现在有百分之百的概率获得2万块钱，另一个是有百分之五十的概率获得10万块钱，另外百分之五十的概率是什么奖励也没有，还会损失那1万块钱，你会怎么选择。如果你不是在赌场中，你有100万，那很有可能选择第二种，如果只有1万块，那很有可能会选择第一种。</p><blockquote><p>因为维持陈旧设施需要的成本不断增加，而创造一个全新的设施所需要的费用却相对较低。维护老旧的设施几乎不会提供什么新的就业岗位，也不会给经济带来什么新的实际价值。相比之下，新的基础设施能够催生出各种相互关联、相互依存的以及其他配套的企业。</p></blockquote><hr><p>这非常重要，改变是连续性的，不会跃阶，必须基于已有的基础设置进化，充分利用当前的建筑、墙体、窗户，即使转化率有限，也比重新改造实惠得多。只是在新修建的建筑上向转化率更高的方案倾斜，这才是进化。</p><blockquote><p>庆幸的是，很多企业正在将小型的太阳能光伏发电板直接安装在琉璃瓦、建筑物遮篷、墙体、玻璃、百叶窗甚至窗帘上，用各种方式加以隐藏。</p></blockquote><hr><p>◆ 第四章 能源改变了世界，也改变了我们</p><p>能源机制能改变社会文明、组织、贸易、财富结构，这毋庸置疑，就像范德比尔特的铁路，又或是洛克菲勒的石油，都是如此，但能源也并不是改变这些结构的唯一因素，就像JP.摩根，有时候我们的思维要放得更宽一些。</p><blockquote><p>能源机制塑造了文明的本质，决定了文明的组织结构、商业和贸易成果的分配、政治力量的作用形式，指导社会关系的形成与发展。</p></blockquote><hr><p>很少能看到这样对教育的描述，不得不说，这翻译也是非常的地道。学生不再是一个活生生的人，更像是流程化成产出来的产品，真是因为这个生产过程工序繁多，不能面面标准化，所以才有不同的三六九等，可这真的是未来教育需要的吗？我们或许永远也找不到标准答案。</p><blockquote><p>学生们所学到的就是永不挑战教师的权威，他们每天要做作业，同时老师还会为其制定标准。学生的测验也是标准化的，表现则是根据反应的时间和效率来评估。学生被孤立在一个个单独的单元中，并被告知与同学交换信息是一种欺骗行为，会受到惩罚。学生根据客观的标准被分为三六九等，以成绩为基础升级。这样的教育模式时至今日仍在发挥作用。</p></blockquote><hr><p>这就是马太效应的威力，有钱的人会越来越有，贫穷的人会越来越穷。对于贫穷的人来说，数十年如一日坚持的，不过是在挣扎着怎么不被时代淘汰，如果挑不出贫困陷阱，谈何跻身食物链顶端，不过是为他人做嫁衣。</p><blockquote><p>截至2001年，美国最大的几个公司的首席执行官的平均工资是普通工人的531倍，而这一比值在1980年只有42倍。更令人震惊的是，在1980～2005年间，美国人收入增长的80%属于1%的人。2007年，美国最富有的1%的人口收入占美国国民税前总收入的23.5%，而这一数值在1976年只有9%。而与此同时，美国中产阶级的数量在减少，赤贫人口的数量却在不断增加。</p></blockquote><hr><p>一个概念的价值，特别是迎合目标群体的概念，即使一个汽车不够环保，但是如果它有环保的概念，那么就能在环保领域占据一席之地，因为并不是每个消费者都那么希望环保，他们不过时希望别人认为他们希望环保而已，如果能达到这么目的，又何必在意自己是否真的在消费环保商品。</p><blockquote><p>2010年，其位于洛杉矶的分公司推出了一项混合电力汽车的试验。在环保意识日渐觉醒的千禧一代中，公司具有很大的影响力，公司的会员自称为“zipsters”。</p></blockquote><hr><p>◆ 第五章 能源革命：无法躲避只能面对</p><p>能感觉到杰里米在美国和欧洲到不同待遇，抛开可持续发展能源是否真到是第三次工业革命，这里映射出一个有趣到现象，美国是第二次工业革命的最大受益者，所以当向美国掌舵人提出第二次工业革命即将结束的观点，这无疑是在质疑美国未来的发展，不管这个观点是否正确，都难以被人接收。相反，欧洲很多国家都错过了第二次工业革命，他们渴望一次新的革命来让他们脱颖而出，所以当杰里米提出第三次工业革命的构想时，自然趋之若鹜。</p><blockquote><p>2009年，我亲身感受到了美国民众对此的漠视。当时我同时任美国能源部第一副助理部长亨利·凯利在沃顿院士培训项目于华盛顿举行的一次商务论坛上发表联合演讲。在我的演讲之后，沃顿的杰里·温德教授对凯利关于美国应该同欧洲一样开始着手设计第三次工业革命蓝图的设想提出了质疑。温德以棒球赛为例，问道：“我们的选手现在是在一垒、二垒、三垒还是在本垒打跑垒的路上？”凯利回应说：“我们刚开始击球。”</p></blockquote><hr><p>◆ 第六章 从全球化到洲际化</p><p>洲际化的确为可再生能源的全球化奠定了基础，可再生能是需要互联网分配的和零排放的交通运输的，而要做到这一点，在全球化范围内启动的成本非常高，可是这种实践，如果在小区域内推广，比如一个城市或一个国家，这必定异常艰难的，因为不能保证这个城市甚至这个国家的可持续能源可以稳定持续产出，而比国家大，比全球化下，最好的方式无疑就是洲际化，这对于抗风险能力和推广效用都是更强的，也能为推动全球化的进程。</p><blockquote><p>事实上，洲际化的进程无处不在，大洲内各区域彼此相连，形成了第三次工业革命的绿色基础设施。正如化石能源倾向于集中式的层级管理体制一样，总体而言，最适合可再生能源的管理体制就是在相邻的区域实现本地化生产和扁平式共享。</p></blockquote><hr><p>地缘政治的说法经常听说，生物圈政治的说法却并不多见，可是仔细一想，好像也有道理，而且和洲际化还真有一些关系。在全球化的影响下，地缘政治的影响在逐渐变小，国家与国家之间的竞争与合作边界已经不在局限在地缘上，有了更加丰富的维度，当贸易的发生已经不是局限在地理位置的周边，这种来源于金融、石油、期货等关系链的生物圈政治越来越强。</p><blockquote><p>洲际时代将会实现国际关系从地缘政治到生物圈政治的缓慢转变。</p></blockquote><hr><p>◆ 第七章 渐渐远去的亚当·斯密</p><p>将经济学与热力学定理联系在一起，这个观点很新颖，如果把经济活动放到整个热力学系统中去，那么经济活动只能算是热力活动的一小部分，用低熵的能源转化为暂时性、有价值的产品和服务，然后把更高熵的能量排放出去，从某种意义上来说，这些有价值的产品就是提取的熵减产物。</p><blockquote><p>经济活动只是从环境借用低熵的能源并将其转化成为暂时性、有价值的产品和服务。在转换的过程中，散失到环境中的能量要比生产出的产品和服务大得多。</p></blockquote><hr><p>这个论点太精彩了，哪些有价值的产品和服务都来源于低熵到高熵的过程，换个角度说，就是内嵌在货物或服务中的能源，一个国家的这种内嵌的效率和总量，将觉得其技术发展能力和国内生产总值，一旦这些内嵌的能量变成熵，随着热力学活动消失，相应的经济活动也会破产，所以国内生产总值，也是能源消耗的成本总值。</p><blockquote><p>那么，我们现在该如何归纳国内生产总值的本质呢？我们将国内生产总值视为衡量国家每年所生产的财富的重要标准。但是从热力学的角度而言，它只是一个衡量暂时内嵌在货物或服务中的能源的标准，而这是以可利用的能源资源的消耗和热力学废物的增加为代价的。一旦我们生产的货物和服务最终变成熵，无论是何种经济学理论，都会意识到经济将会面临破产的危险。也就是说，当所有的一切成为现实，每个文明都会不可避免地从自然界中攫取更多的能量，以维持自身的存在和发展，尽管是以对地球涸泽而渔为代价。如此看来，所谓的国内生产总值也许改名为国内成本总值更加贴切，因为一旦有能源消耗发生，其中的一部分便无法再利用了。</p></blockquote><hr><p>这个步子迈得有点大，经过上万年的进化积累，人类的财产观才从河面上自由航行，森林中自由捕猎的这种公共财产观到私有财产观，不排除互联网催生了交流，共享，互动这类无形财产的发展，但是要做到分散合作式的经济活动，这不是三年五载可以改变的。</p><blockquote><p>在分散、合作型的经济中，进入全球社交网络的权利同在国家市场上拥有私人财富的权利变得同等重要。生活质量的重要性日益显现，特别是在虚拟空间中寻求融入数百万人组成的全球性社团这一诉求。这样，互联网的接入权利就成为新兴的、相互连接的世界中一个强有力的新型财产观。</p></blockquote><hr><p>不管是不是受到作者所说的第可持续发展能源革命的影响，从买卖关系到供用关系、从所有权到特定时间服务的方式或许真能成为未来的趋势，当人们的生活水平逐渐提高，不再为生理、安全等基础需求而忙碌时，他们会更在意自己的生活质量，而不是简单的拥有某一个产品或服务，拥有不一定快乐，快乐来源于消费，高潮来源于消费的满足。</p><blockquote><p>这种由买卖关系向供用关系、所有权交换向网络内特定时间服务的获得之间的转换正在改变我们对经济理论和时间的定位与思考。就更深层的角度而言，新兴的第三次工业革命的能源和通信基础设施正在改变我们衡量经济成功的标准。</p></blockquote><hr><p>◆ 第九章 工业时代的终结：活着不仅仅是为了工作</p><p>这是一个美好的画面，但是这也是一个令人细思极恐的画面，这一度让我想起《机器人总动员》中飞船上人类的居住环境，当活着就是为了游乐的时候，活着的意义是什么，或许真到那一天才会真正明白。</p><blockquote><p>我们对工作看法的转变将更加具有挑战性。在农业机械和化学品代替人类劳动发挥作用时，上百万农村劳动力转移到城市，在工厂里从事技术性或非技术性的工作。接着，在工厂实行自动化生产后，上百万蓝领工人换上衬衫，提高技能，成为白领队伍的一部分，供职于快速发展的服务行业。同样，在智能技术应用于服务行业，大规模取代人类劳动时，劳动大军又转移到关爱产业和体验领域，比如医疗保健业、社会工作、娱乐业以及旅游业。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工业 </tag>
            
            <tag> 新能源 </tag>
            
            <tag> 杰里米·里夫金 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《第四次工业革命》</title>
      <link href="2021/01/02/di-si-ci-gong-ye-ge-ming/"/>
      <url>2021/01/02/di-si-ci-gong-ye-ge-ming/</url>
      
        <content type="html"><![CDATA[<p><strong>《第四次工业革命》，施瓦布著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>蒸汽机驱动了第一次工业革命，流水线和电力引发了第二次工业革命，半导体、计算机和互联网催生了第三次工业革命。而第四次工业革命，在施瓦布看来其核心是智能化和信息化，是一个高度灵活、人性化、数字化的生产、服务模式。</p><p>第四次工业革命很容易被认为是第三次工业革命的延续，但是施布瓦认为，第四次工业革命在速度、深度、广度和系统性上是有非常大的不同的，而这本书的目的也是让人们更好地认识技术革命的全面性、速度及其全方位影响，并构建技术革命的思维框架，列出核心问题与可能的应对措施；同时提供一个平台，激励公共部门与私营部门就技术革命问题开展相关合作。</p><p>本书从经济、企业、国家、社会，技术等五个方面分别阐述了第四次工业革命带来的变化和挑战，而且文章最后还列出了23个与实际紧密结合的案例，具有非常大的参考价值。本书很多信息摘自世界经济论坛，完全可以作为工具书，部分方案甚至可以拿来即用，不管是对政府、对企业、对个人，在第四次工业革命到来之际非常有指导意义。</p><p>工业革命不是因为定义了工业革命才有的，而是因为已经有革命了，才回过头来定义，我们从小接受的教育也是这样，那么首先定义有革命的来临有价值吗？是有的，不管这是不是真的新革命，至少让我们更好的认识变化。</p><hr><p>◆ 前言</p><p>第四次工业革命的高度灵活、人性化、数字化，这非常容易被认为是第三次工业革命的延续，但是施布瓦认为，第四次工业革命在速度、广度、深度和系统性方面是有很大不同的，希望能在后面找到更有说服力的答案。</p><blockquote><p>一些学者和专业人士认为我所讨论的这些进步只是第三次工业革命的延续。但在我看来，我们正在经历一场具有自身特性的第四次革命，主要有以下三大原因：速度：和前几次工业革命不同，本次革命呈现出指数级而非线性的发展速度，这是因为我们目前生活在一个高度互联、包罗万象的世界，而且新技术也在不断催生更新、更强大的技术。广度与深度：第四次工业革命建立在数字革命的基础之上，结合了各种各样的技术，这些技术正给我们的经济、商业、社会和个人带来前所未有的改变。它不仅改变着我们所做的事情和做事的方式，甚至在改变人类自身。系统性影响：它包含国家、公司、行业之间（和内部）以及整个社会所有体系的变革。</p></blockquote><hr><p>◆ 从工业4.0到第四次工业革命</p><p>我们很容易认识到第一次工业革命和第二次工业革命的异同，但是对于第三次工业革命，我们的认识一直都比较模糊，甚至在第四次工业革命到来的时候，很多人还没有清晰的认识到这其中的变化。这是为什么呢？当局者迷肯定是其中一个非常重要的的原因，但是除了这个，还有一个原因不可忽视，教育对这种认识的影响同样深远。我们之所以很容易能清晰的定义第一次工业革命和第二次工业革命，是因为我们从小学课本里开始了解这两次革命，但是对于第三次，别说小学、中学教育，甚至到今天，我们虽然密切感知到计算机带来的影响，但很少用革命去定义它。想象几十年后我们亲身经历的计算机革命被写进教科书，想想都激动。</p><blockquote><p>第一次工业革命大约从1760年延续至1840年。由铁路建设和蒸汽机的发明触发的这次革命，引领人类进入机械生产的时代。第二次工业革命始于19世纪末，延续至20世纪初，随着电力和生产线的出现，规模化生产应运而生。第三次工业革命始于20世纪60年代。这一次革命通常被称为计算机革命、数字革命，因为催生这场革命的是半导体技术、大型计算机（60年代）、个人计算机（七八十年代）和互联网（90年代）的发展。</p></blockquote><hr><p>◆ 一场深刻的系统性变革</p><p>随着技术的进步，颠覆必定会到来，所以不要一直焦虑自己会不会被颠覆，重点思量颠覆什么时候会到来，以什么的形式出现，对我所在的组织会有什么影响。就像施布瓦前面所说的不平等性，现在已经在很多平台级企业愈演愈烈。PC时代是看住了流量的大门就有生意，就像百度，移动互联网时代是谁有更多的垂直应用就有更大的潜能，就像字节，而未来十年，把门打开，让大家都能平等做生意，可能才是主流，直播就是在这种背景下催生的产物。</p><blockquote><p>对于所有行业和企业而言，问题不再是“我是否会被他人颠覆”，而是“颠覆会何时到来，会以什么形式出现，对我和我所在的组织会产生怎样的影响”。</p></blockquote><hr><p>◆ 大趋势，大机遇，大挑战</p><p>看完施瓦布的描述，真的很惊讶，以后再看未来新技术，再也不能简单理解为无人驾驶、5G，物联网了，从物理、数字和生物三个角度再来看无人驾驶、3D打印、高级机器人、新材料，数字货币、共享经济、数字平台，基因测序、合成生物学、精准治疗、基因编辑，就会清晰很多。</p><blockquote><p>为明确这些大趋势，全面反映第四次工业革命背后的技术驱动力，我将这份技术名单归为三类：物理类、数字类和生物类。这三个门类相辅相成，各项技术均可从彼此的发明和进步中受益。</p></blockquote><hr><p>◆ 经济：爆发式增长和就业困境</p><p>这不仅想起克里斯坦森提出的那条第二曲线，过去的20年算是第一条曲线（第三次工业革命）的高速增长期，可是现在已经到了极限点，何时迎来第二条曲线（第四次工业革命）的破局点并成功击穿第一曲线，这段时间将挑战重重。</p><blockquote><p>另一个观点则认为，第三次工业革命提升生产率的势头已经减弱，同时第四次工业革命的那波核心技术还没有导致生产效率真正爆发。</p></blockquote><hr><p>◆ 企业：不改变就灭亡</p><p>资源的价值不在于生命周期，而在于流动。一种技术、一个方案、一种模式，一直以来都被认为是有生命周期，更迭过程经常被认为是从第一曲线跳跃到第二曲线的过程，有时候换个角度想想，或许让技术、方案、模式流动起来，让他们自己在流动的过程中进化，似乎也是一件神奇的事情。就像熊彼特所说，只要我们能拆解旧事物、进行新组合，就能得到非常多的创新，而流动的过程正好为这种拆解和组合创造了条件。</p><blockquote><p>核心是要改变企业和消费者“攫取——制造——废弃”的线型资源使用模式，因为这种模式会消耗大量容易获取的资源。企业和消费者应采取另一种新型的工业模式，在这种模式下，材料、能源、人工和信息之间实现高效流动和互动，共同推动建立一个可修复、可再生并且更高效的经济体系。</p></blockquote><hr><p>◆ 放眼国家和全球</p><p>政府进行自我调整的能力将决定了其是否有存在的价值，在中国而言，这可能要细分到资源控制上，看现在国企、央企的变化就能感觉到，大量的国企、央企集中在资源密集型产业，而在近20年飞速发展的互联网行业中，政府的资源注入并没有那那么大，即将到来的第四次工业革命，线性的资源会逐渐网状化，资源密集型产业劣势将更加明显，政府经济体面临的竞争会更加激烈。但是一旦成为了这个网状结构中一部分，那政府的价值将比以前任何一个时期的价值都要大。</p><blockquote><p>政府进行自我调整的能力将决定其能否继续存在。如果政府积极适应当今飞速变革的时代，使其组织结构具有透明度和效率，政府就会具有竞争力，将继续存在。然而，在这个过程中，政府的形态将彻底被改变，变得更紧凑、更高效，不断适应竞争更为激烈的新环境。</p></blockquote><hr><p>不得不说，在城市创新的这些领域，可通过数字技术改编程序的空间、水网、通过社交网络认养一棵树、下一代出行、热电联产、联合供暖和联合制冷、按需出行、智能路灯，阿里巴巴是国内做得最好的企业，从这个程度上来说，杭州有望成为第四次工业革命中的标杆城市。</p><blockquote><p>资料来源：“十大城市创新”，世界经济论坛全球议程理事会“城市的未来”议题组，2015年10月。</p></blockquote><hr><p>第四次工业革命肯定会到来，对企业、对劳动力市场、对政府的改变也肯定是划时代的，个人而言，这些都不用过分担心，但是唯一担心的就是国际安全和战争，无人机，自动化武器，太空军事化，可穿戴设备，增材制造，可再生能源，纳米技术，生物武器，生化武器，社交媒体的应用，会把国际安全推向一个新高度，一旦出现军备竞赛，难度和复杂性将远远超过冷战时期。</p><blockquote><p>专栏3-6 新兴技术正改变国际安全</p></blockquote><hr><p>◆ 前所未有的社会变革</p><p>社会的进步肯定会把蛋糕越做越大，但是在马太效应的作用下，注定会让财富差异也越来越大，如何解决财富分配问题，应该会成为第四次工业革命最棘手的问题之一。</p><blockquote><p>全球互联的数字化平台和市场正在给为数不多的“明星”个人或企业提供巨额收益。在这样的趋势下，只有提出新想法、创建新商业模式、推出新产品和新服务的人才能在创新驱动的生态系统中取胜，而从事低技术含量工作的劳动力和普通资本将被淘汰。</p></blockquote><hr><p>◆ 无孔不入的技术</p><p>施布瓦在前面将第四次工业革命分为物理、数字和生物三个领域的时候，就能想象到生物技术的进步注定会迎来伦理问题，有时候从技术发展的角度看是提高人的某一些能力，但是真的提升了这种能力，人还是原来的人吗？初次之外，当人工智能遇到伦理问题，仍然只是以概率来判定会不会有失偏颇，当全是冷冰冰的机器面对问题时，“人”是否也会被明码标价。</p><blockquote><p>技术进步将我们推到了新的伦理边界。</p></blockquote><hr><p>互联网时代我们已经经历过享受服务和保留隐私的两难抉择，在四次工业革命的时候，接入互联网的设备将会更多，能收集到的信息也会更多，同时为了建立一人为中心的价值网络，被采集的信息的隐私性会更强，想享受服务，又想保留隐私，最好的办法可能就是在用户端对所有设备的信息输出进行单向加密。</p><blockquote><p>互联网时代给个人带来的一大挑战，以及人与人之间总体来说愈加密切的相互联系，均涉及隐私问题。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 工业 </tag>
            
            <tag> 经济 </tag>
            
            <tag> 施瓦布 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《断舍离》</title>
      <link href="2021/01/02/duan-she-chi/"/>
      <url>2021/01/02/duan-she-chi/</url>
      
        <content type="html"><![CDATA[<p><strong>《断舍离》，山下英子著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>断舍离是什么，咋眼一看都知道是断掉、舍掉、离掉一些东西，但是具体都是些什么东西，这就很难说了，山下英子用“出”的艺术来阐述了这一观点，它不是简单的处理杂物、抛弃废物，是一种在出与进之间循环反复带来的精简生活。理解到这一点，断舍离就不只是对物对价值观，甚至可以算作是生活的新陈代谢解决方案。</p><p>本书介绍了很多对于杂物的收纳的方法和实操经验，前半分布主要集中在物上，后半部分主要集中在生活方式上，虽然是基于物的处理的方式，但是读到一定程度，结合一定思考，不难迁移到更大的价值观上。</p><p>作者认为，我们喜欢囤货、无法舍弃的原因，一方面是消费型社会给我们的物质数量太多了，再有继承上一个物资匮乏的时代的价值观，于是在没有对居住空间深刻考量的条件下，导致了大量的有进无出。断舍离注重的不是物品，而是空间，所以目的不是一味的扔掉东西，是为了保证空间整洁，把物品经可能缩减为适当的量。</p><p>本书前半部分给出了断舍离的一些方法论和具体操作方法，后半部分更多是一些生活方式和断舍离式的心灵鸡汤，同时也包含一些实际案例，读完前半部分后，后半部分80%的内容都可以预想到，所以我重点读了前半部分，后半部分扫描了一遍。不过读完后发现后半部分还是有过一遍的必要，从断舍离的角度看生活中很多问题还是很有意思。</p><hr><p>◆ 断舍离的奥义不只是“扔东西”</p><p>断舍离是什么，眨眼一看都知道断掉、舍掉、离掉一些东西，那么这些东西到底是什么呢？这就比较难说了，定位到断的是物欲，舍的是废物，离的是执念，很有穿透性。</p><blockquote><p>斩“断”物欲“舍”弃废物脱“离”执念</p></blockquote><hr><p>◆ “不收拾”的深层原因是顽固的“物质轴”思维</p><p>说成有效性和必要性关系，有道理，不过说实话好像并没有那么贴切的说明这个问题，这里大胆剖析一下。我们为什么不愿意扔掉一些东西，因为这东西是我的，我在获得或保留这东西到现在付出了一定成本，这个成本不管是什么类型，成本多大，但至少是存在的。保留可能会贬值、还会占用空间，但是贬值至少还有价值，而扔掉就会全部变成沉没成本，这种直观的比较每个人都会，至于空间，很多人很难把每个物件占用的空间价值量化，如果空间不足，更多原因归结于物件存放结构上。如此下去，物件必定会越来越多，空间会越来越小。</p><blockquote><p>某位哲学家曾说过“人们总是习惯思考‘有效性’，却往往忽略了作为‘有效性’前提的‘必要性’”。人们对物品也会有同样的定式思维——“（可能）以后也没有使用的必要，不过还能用，姑且留下来吧”。</p></blockquote><hr><p>◆ 断舍离注重的不是物品，而是空间</p><p>断舍离的核心不是物品，是空间，想到这个点并不难，不过从扔掉的物品到节省下来的空间，至少上升了一个高度，在这个高度下，我们会更加容易接受对物品的断舍离，因为从某种意义上来说，空间已经可以和物品放在一起衡量价值了。</p><blockquote><p>断舍离的“空间轴”思维注重的是“扔掉东西”之前——“为确保空间的干净整洁，而将物品量尽可能地缩减成最适合的量。”这种思维是实践断舍离不可或缺的。</p></blockquote><hr><p>◆ “无法放手”的人有三类</p><p>我们每个人都会有时间感，只是把这三类人和时间感联系起来，好像不是那么容易理解，难道是因为觉得空间和时间同时存在，所以空间拥挤了，必定是因为时间意识淡薄，如此看来作者一定读过爱因斯坦的相对论，哈哈。</p><p>这里的三类人或许可以这样理解，他们都是在生活中找到平衡的人。逃避现实型是没有找到工作与生活的平衡，大量的工作让他们好像忘记家里应该是什么样子，只知道应该和工作不太一样，所以既然工作上尽然有序，那么生活上或许就是要乱一点。同理，执着过往型是没有找到过去与现在的平衡，而忧虑未来型是没有找到现在与未来的平衡。</p><blockquote><p>这三种类型的人共通的一点就是“对时间的意识比较淡薄”。</p></blockquote><hr><p>◆ “舍”与“弃”的不同</p><p>这个有点意思，虽然我们常说“舍弃”，但是“舍”和“弃”截然不同，舍是让物品变成另外一种形式，是出的艺术，弃是置之不理，舍可以换来更有价值的空间，但弃可能还会放在那里，只是被不管不顾而已。</p><blockquote><p>断舍离，不是要求人们随意地“弃”，而是把“舍”作为解决问题的方法之一。</p></blockquote><hr><p>◆ 断舍离，就是扔东西</p><p>要想做到断舍离，首先需要从观念上认识到它的重要性，第一步，要做到认识现状，打开所有的储物柜，让所有东西暴露出来，清楚认识到断舍离的必要性，只有确认了物品的量，才能判断居住空间的质处于什么水平。第二步，停止自我否定，毕竟我们处于物质和信息极为丰富甚至过剩的社会，加入没有明确的如何与物质和信息打交道的方向标，很容易就陷入物质和信息的洪流中，所以要经常告诉自己，造成这种局面并不全是因为你自己。第三步，描绘家的具体构想，当我们觉得家里空间异常狭小时候，停下来想一想，我们需要的空间蓝图是什么样的，不要为了收拾东西而收拾东西。</p><blockquote><p>观念上的断舍离1．认识现状2．停止自我否定3．描绘家的具体构想</p></blockquote><hr><p>完成思维上转变，接下来就是物质上的断舍离，第一，拿出杂物，俯瞰，而且在处理的时候要从小单位开始，单位越小，收纳时间越少，持续积累，就能实现大单位的断舍离，如此最为高效。第二，给物品加筛子，第一层是怎么看都是垃圾的东西，第二层是以自我·时间为判断基准判断关联度的东西，第三层是以必要·合适·愉快为标准的东西。第三，收纳在杂物最适化之后进行，当经过第二步以后，家里的杂物量已经被大量压缩了，空间变得更加宽敞、轻松、呼吸顺畅，此时再收纳才能事半功倍。</p><blockquote><p>杂物上的断舍离1．拿出杂物，俯瞰2．扔掉“怎么看都是垃圾·废品”的东西3．以自我·时间为判断基准，考虑自身与物品的“关联度”，再进行取舍4．以“必要·合适·愉快”为标准进行取舍5．收纳在杂物最适化之后进行</p></blockquote><hr><p>那么对于收纳，应该如何做呢，作者也给出了相应的方法论，第一，三分法，简单来说就是把杂物按照大中小分为三类，先大后中最后小。第二，7·5·1法，即把空间总量压缩为7成、5成和1成，具体而言，看不见的收纳空间占7成，看得见的收纳空间占5成，展示性的收纳空间占1成。第三，1 out 1 in法，既然前面的第二个已经按7·5·1把空间占满了，那么当新物品进来时，就需要1出1进，对空间进行总量限定。第四，one touch法，物品经查杂乱很多时候是因为收纳步骤很繁琐，使用时候需要互很多时间才能物归原位，所以尽量让常用的东西一键式。第五，自立·自由·自在法，自立式让杂物有一定立体感，自由是选择自由，自在是对于无法立起来的杂物，按照适合的方式规矩起来。</p><blockquote><p>收纳指南1．“三分法”2．“7·5·1法”3．“1 out 1 in法”4．“one touch法”5．“自立·自由·自在法”</p></blockquote><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 生活 </tag>
            
            <tag> 精简 </tag>
            
            <tag> 山下英子 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《非暴力沟通》</title>
      <link href="2021/01/02/fei-bao-li-gou-tong/"/>
      <url>2021/01/02/fei-bao-li-gou-tong/</url>
      
        <content type="html"><![CDATA[<p><strong>《非暴力沟通》，马歇尔·卢森堡著</strong></p><p>我相信很多人看过这本书，一定会推荐给自己身边的好朋友，这的确能让我们的生活变得更友爱美好，但这本书更大的价值不在于推荐给别人，是让我们自己用尊重、理解、感激、欣赏、慈悲的方式去与任何一个人沟通，不管他是否掌握非暴力沟通的技能。</p><p>本书核心观点为非暴力沟通的四个要素，观察、感受、需要和请求。不管是与别人沟通，还是公众演讲，还是善待自己，表达愤怒，表达感激，都非常通用。不管什么时候，静下心来抽丝剥茧，会发现我们经常被冲动操控，其实沟通可以变得更温暖。</p><p>人天生热爱生命，乐于互助。用异化的沟通方式使我们难以体会到心中的爱，淡化我们对自己思想，情感和行为对责任意识。尽量少用道德评判或比较的方式与人沟通，它们会蒙蔽对人对己的爱意。</p><p>非暴力沟通的第一个要素是观察。将观察和评论混为一谈，别人就会倾向于听到批评，并反驳我们。非暴力沟通是动态的语言，不主张绝对化的结论。它提倡在特定的时间和情境中进行观察，并清楚地描述观察结果。</p><p>非暴力沟通的第二个要素是感受。通过建立表达感受的词汇表，我们可以更清楚地表达感受，从而使沟通更为顺畅。而且在表达感受时，示弱有助于解决冲突。</p><p>非暴力沟通的第三个表达需要，对他人的指责、批评、评论以及分析反映了我们的需要和价值观。如果直接说出我们的需要，其他人都很可能作出积极的回应。反之，如果我们通过批评来提出主张，人们的反应常常是申辩或反击。</p><p>非暴力沟通的第四个要素是请求。在沟通时，我们将自己的请求讲得越清楚，就越有可能得到理想的回应。不过这里需要避免把请求表达成命令，一旦人们认为不答应我们就会受到责罚，他们就会把我们的请求看作是命令。如果我们清楚地表达我们无意强人所难，人们一般会相信，我们提出的是请求而非命令。</p><p>应用非暴力沟通的四要素，我们可以很好的去倾听，去表达，去处理情感，去消解自责，去享受生活的热情。</p><p>倾听使我们勇于面对自己的弱点。它还可以帮助我们预防潜在的暴力，使谈话生动有趣，并了解“不”和沉默所反映的感受和需要。</p><p>非暴力沟通一个重要的应用还在于培育对自己的爱。当我们的表现不完美时，我们可以通过体会忧伤和自我宽恕，来看清个人成长的方向，以及避免自我惩罚。评价自己的行为时，我们专注于尚未满足的需要；这样，我们就不再依赖羞愧、内疚、恼怒或沮丧的心理来寻求改变，而让爱主导我们的学习和成长。</p><p>在生气时，批评和指责他人都无法真正传达我们的心声。如果想充分表达愤怒，我们就不能归咎于他人，而把注意力放在自己的感受和需要上。与批评和指责他人相比，直接说出我们的需要更有可能使我们的愿望得到满足。</p><p>通过运用非暴力沟通，我们不再试图分析自己或他人有什么毛病，而是用心去了解我们的需要，这样，我们的内心将逐渐变得平和。一旦我们发现自己心底深处的愿望，并采取积极的行动，我们将会重获生活的热情。</p><p>写这么多都只是我自己的感觉，正如马歇尔书中所说，少一些评论，多一些观察，不带评论的观察才是人类智力的最高形式。 </p><hr><p>◆ 插图</p><p>这些插画都画得好好，有时候成人看着小孩子画的画，感觉乱七八糟的，但那是孩子表达的方式，而且表达的内容甚至是成人难以表达的，让孩子保持好奇，就是对孩子最大的成长帮助。当然这些插画放在这里，或许还有另一个意义，每一个想法都希望被温柔以待，与人沟通可以不用那么暴力，先倾听理解，远好过盛气凌人。</p><blockquote><p>妈妈心中，我是可爱的花朵。”</p></blockquote><hr><p>◆ 前言</p><p>这个世界有无数的竞争，竞争就代表着一定会存在弱肉强食，但这更多的存在于职场竞争、商业博弈，而且这也并代表需要不择手段。在生活中，怀有尊重、理解、欣赏、感激、慈悲、友情的心态去感受生活的美好，能让我们更具力量。这或许就是常说的生活与工作的一个差异吧，而且这种差异不需费尽心思去平衡，用拳头去开辟世界，张开双手去拥抱生活。</p><blockquote><p>让尊重、理解、欣赏、感激、慈悲和友情，而非自私自利、贪婪、憎恨、偏见、怀疑和敌意，来主导生活。人们常说：这是一个弱肉强食的世界，为了生存，我们必须不择手段。这个观点，请恕我无法同意。</p></blockquote><hr><p>◆ 非暴力沟通的要素</p><p>观察：两只脏袜子</p><p>感受：不高兴</p><p>需要：房间整洁</p><p>请求：把脏袜子放进洗衣机</p><p>把一个看似不好解决的问题，按照这四个维度一拆解，好像也没有那么费劲。我们通常是从观察直接跳到请求，没有表达自己的感受和需要，这就导致了很多不必要的关系危机。</p><blockquote><p>举例来说，一位母亲可能对她处于青春期的儿子说：“费利克斯，看到咖啡桌下的两只脏袜子和电视机旁的三只，我不太高兴，因为我看重整洁。”</p><p>接着，她立即提出非暴力沟通的第四个要素——具体的请求：“你是否愿意将袜子拿到房间或放进洗衣机？”这一要素明确告知他人，我们期待他采取何种行动，来满足我们。</p></blockquote><hr><p>◆ 道德评判</p><p>对他人的评价实际上反映了我们的需要和价值观，可是这种需要我们通常没有清晰明白的表达出来，不愿意与别人一起探讨这种评价的合理性，导致我们总是活在自己的世界中，而且还乐此不疲的宣泄自己的感受，其实别人又何尝不是这样评价我们自己。</p><blockquote><p>如果女友想多一些体贴，那她就“太粘人了”。可是，如果我想多一些体贴，那她“冷漠得像个木头”。如果同事更关心细节，他就是“有强迫症”。反之，如果我更在乎细节，他就是“粗心大意”。</p></blockquote><hr><p>◆ 回避责任</p><p>其实当我们说“不得不”作出某一个选择的时候，我们已经做出了选择，这或许已经是此时此地我们能想到的最好的选择，而之所以表达出不得已的感受，不过是为了回避责任。就像每到公司发薪日，老板可能会说，我不得不又要给员工发薪水了，员工可能会说自己不得不又要拿那一点微薄的工资了，其实创造多少价值，获得多大报酬，这都是他们当时最好的选择。</p><blockquote><p>我们对自己的思想、情感和行动负有责任。可是，人们广泛使用“不得不”这一短语。例如：“不管你是否喜欢，有些事你不得不做。”显然，这种表达方式淡化了个人责任。</p></blockquote><hr><p>“一旦意识不到我们是自己的主人，我们就成了危险人物。”</p><p>看到这句话，真的有种掷地有声的感觉，不管外界环境如何，我们终究是我们意识的主人，当然，选择逃避也是意识的决定，只是这对我们的成长毫无意义。</p><blockquote><p>一旦意识不到我们是自己的主人，我们就成了危险人物。</p></blockquote><hr><p>◆ 第三章 区分观察和评论</p><p>这让我想起费孝通先生在乡土中国一书的文字下乡部分对愚的描述，“乡村工作的朋友们说乡下人愚，显然不是指他们智力不及人，而是说他们知识不及人了。”就事论事，其实并没有那么简单，不带评论的观察绝对是非常高的境界。</p><blockquote><p>负面标签的消极影响很明显——例如用“懒惰”和“愚蠢”这样的词形容人。然而，正面或中性的标签也会妨碍我们全面了解一个人，例如用“厨师”一词定义人。</p></blockquote><hr><p>◆ 人类智力的最高形式</p><p>我们经常用评论去夸奖或指责一个人的是非对错，并希望对方能有所接纳，而往往并不指出他们具体的行为。现在想来，真的是too young to sample。一个关键在于我们经常都不是那么善于观察，只能想到对一个人的评论，想不起来具体的行为。</p><blockquote><p>接着，我们注意区分观察和评论，一起列出了校长的具体行为。例如，在全体教员会议中，校长会讲他的童年和战时经历，有时导致会议超时20分钟。我问他们是否已向校长反映问题，他们说，他们试过，但从没有提及具体行为——例如校长在会议中回忆往事。最后，他们同意，在校长参加讨论时，指出这些行为。</p></blockquote><hr><p>◆ 建立表达感受的词汇表</p><p>一直很难区分想法和感觉，看到具体词汇表以后，有了一点可以区分的自信，比如我能感到自信，高兴，喜悦，陶醉和满足，但我无法用想法表达他们，我感到高兴表达的是我的意识，我想要高兴则是在表达一种需求。</p><blockquote><p>兴奋 喜悦 欣喜 甜蜜 精力充沛 兴高采烈</p><p>感激 感动 乐观 自信 振作 振奋 开心</p><p>高兴 快乐 愉快 幸福 陶醉 满足 欣慰 心旷神怡喜出望外</p><p>平静 自在 舒适 放松 踏实 安全 温暖 放心 无忧无虑</p></blockquote><hr><p>◆ 听到不中听的话：四种选择</p><p>我们都是我们意识的主人，任何好的感受或不好的感受都是我们自己的选择，别人从来没有让我们失望，我们只是因为没能预期的表达自己而失望。</p><blockquote><p>例1：</p><p>甲：你昨晚没来令我很失望。</p><p>乙：昨晚你没来，我很失望，因为我想和你说一些烦心事。</p><p>在上面的例句中，甲认为，她的感受是由他人的行为引起的。而乙认为，她感到失望，是因为她的愿望没有得到满足。</p></blockquote><hr><p>◆ 小结</p><p>我们经常碍于面子或其他原因难以启齿我们的需要，而这恰恰是非暴力沟通非常重要的四要素之一，有的观察，有了感受，可是如果无法表达出自己的需要，那就很难让别人下一次做的和自己预期方向一致，毕竟自己可能都没有想明白需要什么。</p><blockquote><p>对他人的指责、批评、评论以及分析反映了我们的需要和价值观。如果我们通过批评来提出主张，人们的反应常常是申辩或反击。反之，如果直接说出我们的需要，其他人就较有可能作出积极的回应。</p></blockquote><hr><p>◆ 提出具体的请求</p><p>这是我们经常会陷入的误区，知道应该避免什么，但很少知道什么值得肯定。就像当别人提出一个方案，我们可以很快找出这个方案的缺点、困难和挑战，很少去关注这个方案有哪些地方有突破性的创新进展，更别说给出一些建设性的建议或行动。</p><blockquote><p>在越战期间，我被邀请去参加电视辩论。晚上在家看节目的录像带时，我十分不安，因为我很不喜欢自己的辩论方式。我告诫自己：“在下一次辩论时，决不能再这么被动。”请注意，我只是提醒自己要避免出现什么，而没有提醒自己主动做些什么。</p></blockquote><hr><p>◆ 请求反馈</p><p>请求反馈和需要一定要密切结合起来，就像问“我说明白了吗”就比“你听明白了吗”更友善。</p><blockquote><p>请求反馈能确保对方准确把握我们的意思。有时，问一句“我的意思清楚吗”，然后，对方表个态就足够了。</p></blockquote><hr><p>◆ 非暴力沟通的目的</p><p>所有的观察、表达感受和表达需要，多数时候都是为了让对方能满足自己的请求。可是感觉最后在请求反馈这临门一脚才是最难的，不管前面做得多么非暴力，一旦别人把请求理解为命令，那就注定是以暴力沟通结束。</p><blockquote><p>我注意到这位女士把请求和命令混为一谈。在她看来，非暴力沟通是否有用取决于她的“请求”是否能得到满足。在刚开始运用非暴力沟通时，我们也许会发现，有时我们只是在运用非暴力沟通的表达形式，而忘记了它所服务的目的。</p><p>然而，在另一些时候，即使我们以适当的方式提出请求，有些人仍会误以为是命令。特别是当我们处于强势的一方，那些曾受过权威威胁的人尤其容易作出那样的判断。</p></blockquote><hr><p>◆ 第七章 用全身心倾听</p><p>这表达了多少人的心声呀，我们总是急于提建议，安慰或表达我们的态度和感受，看似在换位思考，看似为对方好，其实不过是在表达自己，让自己的想法的得到对方的认可，并希望对方按照自己的想法做，简直是不能太糟糕。下一次再遇到这种情况，不要着急做什么，先就站在那里。</p><blockquote><p>有些人认为他们可以做到，实际上，绝大部分的人还不具备这种能力。”遭遇他人的痛苦时，我们常常急于提建议，安慰或表达我们的态度和感受。可是，倾听意味着全心全意地体会他人的信息——这为他人充分表达痛苦创造了条件。有一句佛教格言恰如其分地描述了这种能力：“不要急着做什么，站在那里。”</p></blockquote><hr><p>当别人向我们提出一些诉求或抱怨时候，我们经常是分析这个问题为什么会出现，如何避免这样的问题，我现在有一个什么样的建议可能有用，你或许可以采取什么行动解决这个问题。看似是在帮助解决问题，可惜对方可能压根就不想让你帮助你解决，对方在说出来之后已经有了自己的答案。</p><blockquote><p>分析妨碍了倾听。</p></blockquote><hr><p>◆ 给他人反馈</p><p>疑问句的目的是跳出评判的封闭圈，去挖掘致使对方现在这个感受的行为，只有找到行为，才能对症下药。在自己不知道背景的情况下，疑问可以帮助我们去观察。</p><blockquote><p>非暴力沟通建议我们使用疑问句来给予他人反馈。</p></blockquote><hr><p>◆ 倾听预防潜在的暴力</p><p>读了这么多案例，非暴力沟通有标准的三段式。先观察对方，比如看起来，听起来；说出对方的感受，很难过，很生气；最后推测对方的需要。然后等待对方提出请求。</p><blockquote><p>别人生气时，要倾听，不要说“但是”。</p><p>“所以，我深吸了一口气，对他说，‘看起来，你真的很生气，你想有一个房间可以休息’。他大声嚷道，‘就算我是个瘾君子，我也需要尊重。没有人尊重我，气死我了。连我的父母都看不起我！我需要尊重！！！’于是，我就问他，‘得不到别人的尊重，你是不是很气愤？’”</p></blockquote><hr><p>◆ 非暴力沟通的忧伤</p><p>非暴力也可以用来与自己沟通，去观察是什么让自己不及预期，去深层体会自责的感受，并提出一些可操作的需要，剩下的就是让自己主动去响应这些请求，而不至于陷入无尽的自责痛苦之中。</p><blockquote><p>非暴力沟通鼓励我们直面人生的苦难：在遇到挫折时，充分体会人生的悲哀和内心的渴望。是的，感到遗憾是难免的。但它能帮助我们从经历中学习，而无须责备自己。我们意识到过去的行为违背了自己的需要及价值观，并允许这种觉察引发的情感充分流淌。一旦专注于尚未满足的需要，我们就会考虑如何满足它。反之，如果用苛刻的语言指责自己，我们不仅难以找到解决办法，而且容易陷于自我惩罚的痛苦中。</p></blockquote><hr><p>◆ 外衣染上墨水带来的启发</p><p>读到这里，马歇尔这种抽丝剥茧的手法让我感到一丝喜悦是怎么回事。我们经常自责自己的愚蠢，其实我们只是想照顾好自己。</p><blockquote><p>幸运的是，二十分钟后，我意识到自己正在做什么。我静了下来，开始想外衣染上墨水使我什么样的需要得不到满足。我问自己：“我责备自己‘粗心’和‘愚蠢’，是想要满足什么需要呢？”</p><p>我马上就明白了，其实我是想照顾好自己：在匆忙地回应他人的请求时，要多留意自己的需要。此时，我的心情也随即发生了变化。我不再感到恼怒、羞愧和内疚，身体也一阵轻松。我体会着损失一件新外衣及忘记戴笔帽的悲哀，以及照顾好自己的强烈愿望。</p></blockquote><hr><p>◆ 用“选择做”代替“不得不”</p><p>如果说不得不做是逃避责任，那么选择做就是承担责任。而且每一次不得不，都是选择的结果，只是我们不愿意承认这是自己的选择罢了，安静下来，听听灵魂深处的声音吧。</p><blockquote><p>不论你选择做什么，了解自己为什么要那样做。</p></blockquote><hr><p>◆ 深入理解我们行为的动机</p><p>我们的动机似乎都很简单，而且达到目的可以有很多选择。</p><p>为了钱</p><p>为了得到赞同</p><p>为了逃避惩罚</p><p>不想感到羞愧</p><p>为了避免内疚</p><p>为了履行职责</p><p>一旦认识到我们行为所服务的具体需要，不管实现有多困难，过程应该会是快乐的。</p><blockquote><p>深入理解我们行为的动机</p></blockquote><hr><p>◆ 为什么我们会生气？</p><p>生气是因为我们把责任归咎于他人，希望对方收到惩罚，但是当对方真的受到惩罚后，我们似乎也没有预期的那么满足，甚至有一些失落。因为我们根本没有真正的去解析内心的感受和需要。</p><blockquote><p>听到不中听的话时，我们有四种选择：1．责备自己；2．指责他人；3．体会自己的感受和需要；4．体会他人的感受和需要。当我们选择第二种反应时，我们认为别人应当认错或受罚——我相信这就是我们生气的原因。</p></blockquote><hr><p>◆ 表达愤怒的四个步骤</p><p>表达愤怒的四个步骤是：（1）停下来，除了呼吸，什么都别做；（2）想一想是什么想法使我们生气了；（3）体会自己的需要；（4）表达感受和尚未满足的需要。</p><blockquote><p>现在让我们看看非暴力沟通表达愤怒的具体步骤。首先，停下来，除了呼吸，什么都别做。我们避免采取行动去指责或惩罚对方。我们只是静静地体会自己。接着，想一想是什么想法使我们生气了。例如，无意中听到某个人的谈话后，我们认为由于种族的原因自己遭到了排斥。这时，我们体会着愤怒，并留意脑海中盘旋的想法：“这太不公平了！她这是种族歧视！”我们知道，像这样的想法是尚未满足的需要的可悲表达。于是，接下来，就去了解自己想要满足的需要。如果我把某个人当作种族主义者，我的需要也许是接纳、平等、尊重或联系。</p></blockquote><hr><p>◆ 解决内心的冲突</p><p>这太重要了，错误已经发生，追究谁对说错顶多起到杀鸡儆猴的效果。专注于想要的，定位错误导致的原因，如何可避免这类错误的再次发生，而且大多数人并不会主动犯错，犯错前都是因为没能很好的了解需要。</p><blockquote><p>专注于我们想要做的，而不是追究错在哪里。</p></blockquote><hr><p>◆ 赞扬的动机</p><p>从表达这个过程本身就可以获得愉悦，表达自己的善意，可以让大家都开心，何乐而不为。</p><blockquote><p>用非暴力沟通的方式表达感激时，我们只是为了庆祝他人的行为提升了我们的生活品质，而不是想得到任何回报。</p></blockquote><hr><p>◆ 小结</p><p>很多人渴望获得感激，可又不希望被公开的表达出来，当听到感激时又不自在。这种时候很有可能是表达感激的方式不太对，比如表达的是一个感受，并没有提到具体有益的行为，满足的需要自己自己都心情。</p><blockquote><p>我们说出：（1）对我们有益的行为；（2）我们的哪些需要得到了满足；（3）我们的需要得到满足后，我们是什么样的心情。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 沟通 </tag>
            
            <tag> 亲密关系 </tag>
            
            <tag> 马歇尔·卢森堡 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《从0到1：开启商业与未来的秘密》</title>
      <link href="2021/01/02/cong-0-dao-1-kai-qi-shang-ye-yu-wei-lai-de-mi-mi/"/>
      <url>2021/01/02/cong-0-dao-1-kai-qi-shang-ye-yu-wei-lai-de-mi-mi/</url>
      
        <content type="html"><![CDATA[<p><strong>《从0到1：开启商业与未来的秘密》，蒂尔 马斯特斯著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>彼得是一个企业家、投资人，他看重的是公司价值，本书主要是写给掌握世界上80%财富的那20%的人看的，书中难免会有一些观点不太适合普通员工心声，不过透过这本书，我们可以更好的理解从无到有的创造和从1到n的市场演变，以及企业高管这个职业。</p><p>彼得认为，成功不是中彩票，都是有技能支撑的，公司也是如此，如何打造从0到1的创业创业模式，同样有规律可行。简单总结为七点：</p><p>工程问题决定着自己是否能规模化盈利；</p><p>时机问题决定着是吃螃蟹还是成为先烈；</p><p>垄断问题决定着能否获得市场利润；</p><p>人员问题决定着这个公司最开始的基因和文化；</p><p>销售问题决定着产品与市场的关系；</p><p>持久问题决定着幂次增长的可用时间；</p><p>秘密问题决定着是选择竞争还是垄断。</p><p>书中对以上观点都做了比较详细的论述，比如如何抓住风险投资中的幂次规律，如何从小市场开始建立一个垄断企业，如何去相信秘密的存在并展开探索，如何处理员工与企业价值的关系，为了拉近员工之间的关系，还提出了常被人讨论的帮派文化，最后，彼得还就人工智能、创始人悖论展开了大量讨论。</p><p>本书曾四年前在时速百余公里的火车上一夜读完，今天，坐上时速350的高铁又读了一遍，这种交通演变本身也就商业的进步，这一中国速度或许也可以用彼得所说的七大问题来解答。 </p><hr><p>◆ 第1章 未来的挑战</p><p>在什么重要问题上与别人看法不一致，这并不简单，首先这问题要是重要的，人们甚至很难列举出自己做出的重要的决定，在者，与别人看法不一致，在重大问题上，人们更愿意选择从众，不管这是否正确，至少别人也这么做，多数人没有特立独行的魄力。能问出这个问题，说明彼得蒂尔的确是一个逆行者。</p><blockquote><p>当我面试应聘者时，都会问这样一个问题：“在什么重要问题上你与其他人有不同看法？”</p></blockquote><hr><p>◆ 从0到1：进步的未来</p><p>都说从1到n的边际成本是越来越低的，这没有问题，不过从1到n的创新成本却是越来越高的，复制得越多，创新者的窘境会越来越明显，稀缺的资源只能支撑先行者致富，一直复制无法致富，只会恶性循环。</p><blockquote><p>如果全世界都用同一种旧方法去创造财富，那么创造的就不是财富，而是灾难。在资源稀缺的今天，丢掉科技创新的全球化不会长久。</p></blockquote><hr><p>◆ PayPal狂热</p><p>能拍板这个方案绝对需要强大的魄力，不说这个方案行不行，至少风险极大，这不同于现在大公司动则数十上百亿的补贴，这面对的是裂变式的营销，而且需要对自己的产品粘性有足够的信心，同时对风控的要求极高。</p><blockquote><p>每位新用户一注册即可得到10美元，每推荐一个朋友来注册就能再得10美元。这个方法帮我们招来数十万新用户，呈指数级增长。当然，这个揽客战略本身并不持久——你要付钱让用户注册，呈指数级增长的用户就意味着呈指数级增长的成本。</p></blockquote><hr><p>◆ 获得的经验教训</p><p>可以说，很多人对企业的认识都是建立在过去成功或错误的反应之上，并非这种认识不合理，毕竟我们存在的本质就是习得性进化，只是除了去匹配过去的成功和错误，还要形成独立的思考，这是属于我们自己的自然选择。</p><blockquote><p>要问自己：你对企业的认识有多少是基于对以往过错的错误反应形成的？最反主流的行动不是抵制潮流，而是在潮流中不丢弃自己的独立思考。</p></blockquote><hr><p>◆ 企业的谎言</p><p>我们通常都会陷入自己认为了那些细微的特色之中，实则很多特色在激烈的竞争中根本不值一提。我们经常会说自己的朋友圈被什么东西刷屏了，但是和一个不同领域的人一聊，对方可能丝毫不知，这种认识的不平衡让越来越多的人生活在了相对封闭的认知中，局限在自己的特色中难以认识各种信息之间激烈的竞争，而且各种推荐算法加剧了这种不平衡。</p><blockquote><p>开一家南印度菜餐厅很难赚钱。如果你忽略了激烈的竞争而只看到你开的菜馆那些细微的特色——也许你认为你家的印度薄饼很棒，因为你曾祖母给了你超棒的配方——那么，你的生意不可能持续下去。</p></blockquote><hr><p>用并集和交集这一相对的概念阐明这种不平衡，这个角度很犀利。现实比我们认识的更极端，那么这种认识是怎么出现形成的呢。非垄断者将自己市场定义为更多小市场的交集来凸显特色，而垄断者更希望将自己市场定义为更大市场的并集来伪装它们的垄断性。</p><blockquote><p>非垄断者通过把他们的市场定义成各种更小市场的交集来夸大自己的独特性：</p><p>图3-4 你的市场是交集还是并集</p><p>英式食品∩餐厅∩帕洛阿尔托</p><p>说唱歌手∩黑客∩鲨鱼</p><p>相反，垄断者通过把他们的市场描述成若干大市场的并集来伪装他们的垄断性：</p><p>搜索引擎∪手机∪可穿戴装置</p><p>电脑∪自动驾驶汽车</p></blockquote><hr><p>◆ 垄断资本主义</p><p>法律保护其独占地位是为了激发更多的创新，让更多的人知道创新垄断有利可图，这才是从0到1的过程，这才能推动社会文明的进步，只是这是世界一直都是经济体系与政治体系并存的，而政治体系需要绝对的领导权力，当经济垄断者的力量开始与政治力量匹敌，政治体系就会开始恐慌。</p><blockquote><p>就连政府也知道这些，因此还专门有部门努力创造垄断企业（授予新发明专利权），尽管也有另外的部门在扼杀它们（实行反垄断措施）。有人可能会质疑：仅仅因为第一个想出好点子，比如设计出手机软件，一个人就应该获得法律保护的独占地位吗？但是我们可以很清楚地看到：iPhone手机的设计、生产和营销给苹果公司带来的垄断利润就是对苹果公司的嘉奖，奖励它丰富了世界，而非人为造成稀缺，消费者也乐意花高价买一部好用的智能手机。</p></blockquote><hr><p>◆ 战争与和平</p><p>当两人因为某一事物建立敌对关系以后，他们会就未来的任何机会放大这种敌对，以至于最后双方可能都会忘记最初矛盾产生的原因，只是为了敌对在敌对。同样，似乎不少企业认为的竞争，都是为了竞争而竞争，还记得那句耳熟能详的词吗？对标竞对。</p><blockquote><p>《罗密欧与朱丽叶》开篇就说：“两家人，同样尊贵体面。”这两家人差不多，但是他们互相敌对。随着矛盾升级，他们甚至变得更相似。直到最后，他们自己也忘记了最初矛盾产生的原因。</p></blockquote><hr><p>◆ 第5章 后发优势</p><p>十年之后，你的公司还能存在吗。现在的商业环境瞬息万变，别说10年，怎么活到5年之后可能都是一个问题，到那时，它存在的价值是什么，它在市场上的位置是什么，这些通过一般量化是找不到答案的。</p><blockquote><p>如果你把短期增长看成重中之重，就会错过最重要的问题：10年之后，你的公司还能存在吗？仅凭数字不能告诉你答案：你必须认真思考公司的本质特征。</p></blockquote><hr><p>◆ 建立垄断企业的方法</p><p>这里让我再一次认识了市场天花板，我们通常说创业或一个产品，一定要选择天花板足够高的市场，否则很容易遇到市场瓶颈，而这也很多企业家画饼是津津乐道的。彼得这里建议从小市场开始扩大规模，做到小市场中的垄断者，利益才是最可观的，这个角度去看很多新兴产品，的确是这样，但是好像很多人并不这样认为。</p><blockquote><p>占领小市场</p><p>每个初创公司刚开始时都很小，每个垄断企业都在自己的市场内占主导地位，因此，每个初创公司都应该在非常小的市场内起步。宁可过小也不能大，理由很简单：在一个小市场里占主导地位比在大市场里要容易得多。如果你认为自己起步的市场可能太大，那就一定是太大了。</p></blockquote><hr><p>◆ 第6章 成功不是中彩票</p><p>成功并非运气，说是靠运气的，对于成功者而言，可能是交际策略或是谦虚，又或是为了给自己定成功添加一些未知的神秘色彩，或多或少为自己加持一些被上帝眷顾的力量。对于失败者而言，运气不好可能是最好的安慰。成功学没有标准的公式，也不会有任何一本书可以道明成功的精髓，但成功的概率的确应该可以被技能定性化。</p><blockquote><p>商界最有争议的问题是——成功是靠运气还是靠技能？</p></blockquote><hr><p>◆ 当今的世界——对未来不明确却很乐观</p><p>人们都不知道钱能拿来做什么，就是觉得钱很重要，因为其具有可选择性，钱吃其他任何能用钱来得到的东西都有价值。这种对金钱不明确的乐观，会让金融系统非常脆弱。</p><blockquote><p>在这样一个金融化的世界中，大概是这样的：</p><p>·企业家不知道拿钱做什么，所以存在银行里了。</p><p>·银行家不知道拿钱做什么，所以他们把钱交给不同的机构投资人，用于不同方向的投资。</p><p>·机构投资人不知道拿钱做什么，于是他们投资到了股票。</p><p>·公司试图产生自由现金流来提升股票价格，做法是发放股息，或是回购股份，然后周而复始。</p></blockquote><hr><p>◆ 为什么人们不探索秘密</p><p>渐进主义、风险规避、自满和扁平化，让我们不再去探索秘密，甘愿去经历从1到n的工作和生活。</p><blockquote><p>伴随着地理隔阂的淡化，四种社会趋势已经合力瓦解了人们仍然相信秘密存在的信念。</p></blockquote><hr><p>◆ 如何发现秘密</p><p>学校传授的是很多人都关注的，不管是因为大家都关注了才传授，还是因为大范围传授了导致更多人关注，这些都注定发现不了什么大的秘密。</p><blockquote><p>探索秘密的最佳处所就是无人关注的地方。大多数人只以学校教授给他们的方式思考，而学校本身的目标在于传授常规知识。所以你可能会问：还有哪些重要领域没被标准化和制度化？</p></blockquote><hr><p>◆ 第9章 基础决定命运</p><p>这和吴军的企业基因论观点有点相似，这里的企业创生基础就像基因，它决定了公司的商业模式、市场定位以及社会价值。虽然这在后面可能会发生变化，但多数时候只能修改细节，于是就开始了各种布丁，使得臃肿的大象转身越发困难。</p><blockquote><p>开头很特殊，它在本质上有别于之后的阶段。138亿年前宇宙的形成正是如此：诞生的最初那几微秒里，宇宙增大到原来的1030倍。在天体演化的新纪元到来的那一瞬间，物理法则与今天我们知道的大相径庭。</p></blockquote><hr><p>◆ 股票报酬才能让员工全力以赴</p><p>股票算是近似的为理想买单，这对于企业来说是划算的，但对员工来说并不一定划算，不把自己的工作和资金都放在同一个篮子里似乎更明智，毕竟大多数员工都无法成为那拥有80%收益的20%的人。</p><blockquote><p>恰恰是因为这些限制，股票才成为有力的工具。如果有人愿意拥有你公司的部分所有权，而不是现金工资，表明他愿意长期致力于增加公司的价值。股票虽然不是激励员工的最佳方法，却是创始人使公司保持团结一致的最好方法。</p></blockquote><hr><p>◆ “PayPal黑帮”</p><p>和工作上的人建立持久合作到社会关系，彼得作为投资人和企业创始人高管，这样到观点很自然，但是对于绝大多数的员工而言，这非常困难。一个很大的原因是金字塔顶端的圈层非常小，即使大家的绝对差异很大，但相对差异并不大，这让他们有了保持持久社会关系的动力，并且成本并不高，可是对于绝大多数员工来说，这每一个在社会生活中都是致命的。</p><blockquote><p>时间是最宝贵的资产，将时间浪费在不能长久合作的人身上得不偿失。如果你不能在工作上建立持久的关系，那么你就浪费了时间——即使纯粹从财务的角度来看，也是如此。</p></blockquote><hr><p>◆ 销售是隐形的</p><p>价值是从交易产生的，而很大一部分交易都来自有“预谋”的销售，我们通常称这为推销。好产品可以改变这个世界，不过推销才是推动了这个世界的进步。</p><blockquote><p>即使是企业人士也低估了推销的重要性，根本原因在于，各个领域各个层面合力掩盖了这一点，让我们察觉不到世界正是由推销驱动的。</p></blockquote><hr><p>◆ 如何销售产品</p><p>工商管理中有个很重要的观点，定位目标客户。读了一些商业相关书以后发现，有的产品不是销售给目标客户的，就像很多人买不起豪车，但是豪车车企还是会在很多地方打广告，他们的广告就是打给买不起的人看的。</p><blockquote><p>把公司推销给媒体是推销给其他人的必要前提。出于本能，技术精英不相信媒体，常常犯忽视媒体的错误。但就像你不会期待仅仅靠产品的外在优点而没有使用任何推广策略人们就会购买优质产品，你也不会认为没有使用公关策略人们就会欣赏你的公司。即使因为你有病毒式营销策略，而不需要媒体曝光来赢得顾客，媒体也会帮助你吸引投资者和员工。任何值得雇用的潜在员工都会先了解公司，他上网找到了公司的哪些信息，对你公司的成功至关重要。</p></blockquote><hr><p>◆ 聪明的计算机：是敌，还是友</p><p>要么得到理想国，要么被取代，这难免有点悲观。经过近几年的发展，计算机并没有彼得所说的那么笨，也没有那么吓人。以后计算机肯定会更聪明，就像今天的GPT-3，甚至未来它们可以自己进化。或许最让人担心的不是是敌是友，而是我们再也离不开它们，当这种关系愈加复杂，也会变得愈加脆弱。</p><blockquote><p>强大的人工智能就像宇宙彩票：我们赢了，得到理想国；我们输了，被天网（Skynet）取代。</p></blockquote><hr><p>◆ 第13章 绿色能源与特斯拉</p><p>任何一家公司都需要考虑这七个问题。工程问题决定着自己是否能规模化盈利；</p><p>时机问题决定着是吃螃蟹还是成为先烈；</p><p>垄断问题决定着能否获得市场利润；</p><p>人员问题决定着这个公司最开始的基因和文化；</p><p>销售问题决定着产品与市场的关系；</p><p>持久问题决定着幂次增长的可用时间；</p><p>秘密问题决定着是选择竞争还是垄断。</p><blockquote><p>多数能源公司折戟是因为至少忽略了以下7个问题之一，而这些问题是每个公司必须回答的：</p><p>1.工程问题：</p><p>你的技术具有突破性，而不仅仅是稍有改进吗？</p><p>2.时机问题：</p><p>现在开创事业，时机合适吗？</p><p>3.垄断问题：</p><p>开创之初，是在一个小市场抢占大份额吗？</p><p>4.人员问题：</p><p>你有合适的团队吗？</p><p>5.销售问题：</p><p>除了创造产品，你有没有办法销售产品？</p><p>6.持久问题：</p><p>未来10年或20年，你能保住自己的市场地位吗？</p><p>7.秘密问题：</p><p>你有没有找到一个其他人没有发现的独特机会？</p></blockquote><hr><p>◆ 第14章 创始人的悖论</p><p>我们只是更愿意看到那些不同的地方，这让每个人都具有独自的特点。这不正是竞争市场中为了体现自己特色而做的交集吗？这样我们更能记住它们。</p><blockquote><p>所有的创始人都特立独行吗？或者我们只记住或夸大了创始人身上那些最独特的地方？更重要的是，创始人身上哪些个人特质是帮助他们成功的？</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 思维 </tag>
            
            <tag> 彼得·蒂尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《伟大创意的诞生》</title>
      <link href="2021/01/02/wei-da-chuang-yi-de-dan-sheng/"/>
      <url>2021/01/02/wei-da-chuang-yi-de-dan-sheng/</url>
      
        <content type="html"><![CDATA[<p><strong>《伟大创意的诞生》，史蒂文·约翰逊著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>生物进化无疑是世界上最伟大的创意，史蒂文·约翰逊在本书中带领我们从进化论的视角去把很多创意出现的条件和可能性联系起来。如果说分形、组合、类比等是提供了一套创新的方法论，那么本书则是讲了一个关于连接式创新的故事。</p><p>用一句话来强行总结本书的观点。从推开第一扇相邻的门开始，让时间从含有噪声的液态网络中孕育出意外的功能变异，在平台的堆叠中让创意不断生长。</p><p>本书划分为7个部分，也是史蒂文给出的7个创意来源，分别是：</p><p>相邻扩展：不断去打开相邻的门</p><p>液态网络：在液态网络中让信息外溢</p><p>时间孕育：灵感需要在时间中不断沉淀</p><p>意外收获：收获机缘巧合的意外</p><p>噪声污染：让创新实验室接受一些“污染”</p><p>功能变异：功能变异让不相关变成相关</p><p>堆叠平台：在堆叠平台中不断成长</p><p>史蒂文·约翰逊被称为创意届的达尔文，本书把创新放在进化论的放大镜下，从复杂网络中寻找尺度的变化，听起互不相关的两件事——创意和进化，在史蒂文这里就变成了相关，这或许本身就是史蒂文在书中提到的功能变异。 </p><hr><p>◆ 引言 珊瑚礁，城市，网络</p><p>每一项技术发挥其价值至少都要经过两次发明，一次是走进实验室，一次是走出实验室。不确定是否都需要经过10年的时间，而且不同的技术所需要经历的时间周期肯定不一样，但需要这两次发明是肯定的。</p><blockquote><p>我们把这神奇的一致性称为“10/10规则”。根据这条规则，一项新的发明若要建成平台，需要10年；若要在所建平台上推广并取得主流大众的认可，又需要再花去10年的时间。</p></blockquote><hr><p>“长焦距视角”很新颖，说到创新，所有生物的演变进化绝对算得上非常强的适应性创新，不论这种创新是布丁式的延续性创新还是颠覆式的破坏性创新，至少这种创新维持了复杂网络的平衡。所以如果把创新的焦距拉长，或许不仅能看到网络中的类比，还能看到很多忽略的细节。就像杰弗里在超市里的原始人中表达的一样，放把一件事映射到进化的尺度下，我们或许能看到不一样的结果。</p><blockquote><p>在这种意义上，从“长焦距视角”来研究与创新相关的问题，我们收获的不仅是一些新的比喻说法，更重要的是，我们可以发现许多之前不曾注意到的事实。</p></blockquote><hr><p>◆ 第1章 创新就是一扇不断打开的门</p><p>婴儿恒温箱能为婴儿在成长之处提供保护，但是其复杂的工艺是高昂的维修成本，让其在发展中国家快速推广遇到阻碍。而育婴器就不同了，零件来源汽车零部件，在美国，汽车零部件几乎每家都有，可见，模块化的重要性。</p><blockquote><p>从设备呈流线型的外部观察，它和现代的婴儿恒温箱一样，但其内部则是利用汽车的部件来制造的。</p></blockquote><hr><p>很多时候，我们对一个创意的看法，觉得如果不能彻底改变现状，就不是颠覆性的创新，其实不然。创新不是凭空产生的，是“进化”而来的，把历史的碎片进行组合与类比，就能看到很多不一样的结果。</p><blockquote><p>按照普遍的趋势，人们通常会把颠覆式创新的产生过程浪漫化，想象一个个伟大的创意超越环境的限制，横空出世，天才的眼睛会从一些旧思想和僵化的传统中发现一些全新的创意。但实际上，新创意更像是一个个想法的拼接物，它们都是由思想的碎块拼组而成的。我们继承了前人提出的一些旧点子，也会在偶然之间闪现一些其他的想法，于是我们把两者加工、组合成一些新想法的形状。</p></blockquote><hr><p>生命的诞生就是伟大的组合创新，这锅原始汤中成千上万的组合，使得生命的出现成为了偶然中的必然。或许不止地球的生命，整个宇宙的发展，可能都是一种偶然的组合，我们现在的宇宙之前或之后，还有无限的可能，甚至在同一时间点，还有无数平行的宇宙在不断组合形成。放在这个尺度上，我们的渺小简直不可描述。</p><blockquote><p>在地球上不存在任何生命的时候，遍布着一些最基础的分子：氨、甲烷、水、二氧化碳、各种氨基酸，以及其他简单的有机化合物。在“原始汤”（Primordital Soup）里，这些分子之间可以产生一些有限的变形与发展，比如：甲烷和氧气重新组合，以形成甲醛和水。</p></blockquote><hr><p>◆ 第2章 在思想的大池中让信息外溢</p><p>城市的出现让创意出现得更频繁了，城市是一个密集的社会网络，这种网络促使了创意可以得到流传、扩散和沉淀，所以从某种程度上说，不是城市让创意变多了，而是网络让创意更好的留存了下来。读到这里，可以比较深刻的理解到斯蒂文所说的流动的信息外溢，也能明白碳为什么能在生命创新中起到至关重要的作用，兼具流动与稳定，这种“液态”形式就是形成创意的“原始汤”。</p><blockquote><p>在一个低密度、混乱的网络系统里，好创意出现以后就消失了。而在城市密度较高的社会网络里，好创意很容易得到流传与扩散。</p></blockquote><hr><p>当某一种创意被广泛流传和扩散，那么这种创意的所有权就很难归属于某人或某团队，这种创意虽然并非显而易见，但是由于其不具备排他性，很难申请到专利保护。那么从这个角度看，专利保护到底是促进了创新还是阻碍了创新，专利保护为提出创新的人保证了一段时间内在特定地域的排他性，激励着创新，可以也真是因为这种保护，也阻碍了创意的广泛流传和扩散，把部分创意封闭了起来，就像我们能在专利公开网站上查询到很多专利，但是很多在实际场景中并不能看到，专利到头来就变成了一纸尘封的文件。</p><blockquote><p>复式记账法帮助人们更清楚地了解自己所拥有的财产，但却没有任何人拥有这一记账法的所有权。</p></blockquote><hr><p>◆ 第3章 好创意永远是时间的玫瑰</p><p>网络很强大，同样也非常脆弱，强大之处在于网络中丰富的冗余让其非常稳定，任何连接断开都不会影响到网络的可用性，脆弱之处在于因为连接，每一个节点的暴露都会导致整个网络裸奔，对于这类情况，如果从普通的连通网络到有向连通网络，或许会好很多。</p><blockquote><p>当然，如果联邦调查局的探员们对扎卡里亚·穆斯塔法·苏布拉的个人物品进行全部查看，那么肯定会发现，他不仅与“9·11”事件的11个劫机人之间都有直接关联，而且通过追踪他的西联（Western Union）汇款账号，可以从他最近的汇款操作中发现其汇款对象就是“9·11”事件关键联络员拉姆齐·比纳尔谢赫（Ramzi bin al-Shibh）。</p></blockquote><hr><p>一个没有连接的灵感，注定只能是灵感而已。这句话足以概括这本书截止此处之前所有的观点，一个灵感只有和网络结合在一起，才能不断推开相邻的门，才能呈现流动的溢出状态，才能再时间中扩散、沉淀。</p><blockquote><p>一个没有连接的灵感，注定只能是灵感而已。</p></blockquote><hr><p>这句话应该是史蒂文对本章最得意的总结，可是何为汗流浃背式的辛苦，何为足够的营养，何为提供肥沃的土壤，这有点玩弄文字的嫌疑，这放在幸存者偏差中，怎么说都对，但是放在我们当下，或许并没有太强的指导意义。</p><blockquote><p>只是在大脑里一直保持这一想法。维持一个灵感的存活更多的只是慢慢地培育它，而并非是一种汗流浃背式的辛苦耕耘。只需要给灵感足够的营养，并且让它生长在能让根须建立新连接的肥沃的土壤里，然后，给它时间，静待开花结果。</p></blockquote><hr><p>灵感相对于创意，可以算是一个导火索，历史接触的所有事物会在神经网络中形成网络，这个网络可能零碎的，就像气态的水，也有可能是一些封闭对小网络，就像固态的水。其实我们经常会冒出一些灵感，只是他们大多数并没有被进一步思考记录，只有当某一个灵感出现，犹如推开创意的第一扇门，或许把所有零碎的节点连接成了网络，又或许是打破了封闭的小网络形成更大的网络，一触即发。</p><blockquote><p>所有这一切意味着，我们不能确切地认为，达尔文恰好就是在1838年9月28日那天，突然想出了自然选择理论。我们最多可以这样认为，在1837年的夏天，达尔文开始做研究时，他的大脑里还没有完全抓住这个想法；而在1838年11月，这个想法在他的大脑中终于形成了。这并不是说历史记录中存在着缺憾。而是说，要明确无误地指定达尔文想到自然选择论的具体时间是相当不容易的，或者说是不可行的，因为这一想法并非是瞬间出现在他的大脑中的，而是随着时间的推移，像波浪一样，渐渐地流进他的思维意识里。</p></blockquote><hr><p>摘录是在时间维度上捕捉灵感的有力方法，自然史需要丰富的群岛进行自然选择，创新则需要自己的思维孤单。我到并不觉得这之间有多么明显的差异，创新的思维孤单来源于过去时间的摘录汇聚，这种摘录本身就是我们有目的的自然选择，这种思维孤岛的建立同样没有脱离自然进化史。</p><blockquote><p>我们需要一种系统来捕捉灵感，但并不需要对灵感进行分类。因为类别会设置壁垒，将相异的创意限制在只属于自己的“思维孤岛”上。这是人类创新史与自然史的差异之一：群岛无法培育出旺盛的新创意。</p></blockquote><hr><p>◆ 第4章 机缘巧合的力量</p><p>我相信史蒂文这里想表达的是触发灵感那一瞬间的机缘巧合，梦作为了这一机缘的某种载体，并不是说所有的梦都会给予创新的灵感，也不是大量的突破性进展都来源于梦境。很多科学家、企业家成名之后回忆起自己曾经的创意，觉得其来自梦境，不过是为了增加自己疯狂想法的神秘性，后来者继续认可这种说法，也是为了让故事更具可读性，就像一个想法，来源于某一晚上的梦境就比经过某一晚上辛苦的演算更具神秘感和可读性。就像史蒂文前面所说，所有的创意都是时间的朋友，很多想法已经逐渐成型，需要的就是推开第一扇门的灵感。</p><blockquote><p>在通常情况下，一想到梦中得来的创意或灵感，我们便会将其与艺术创作相关联。但是，在科学发展的过程中，大量的突破性进展和成就最初都源于梦中的思路或猜测。在一次夜间的梦中，俄罗斯科学家门捷列夫想到可以根据原子的重量来进行排序，他为各种元素建立了一个表格，最终创立了化学元素周期表。</p></blockquote><hr><p>这里对“意外收获”的描述太精彩了，意外收获源于一些愉快的事件，是让我们获得意外之喜的机遇，但这些都不是最重要的，最重要的是它验证了我们的灵感，推开了那一扇近在咫尺却被忽略的门。不要妄想看过一本，听过一个讲座就能让你学到很多，它们都不过是在不断打开被我们忽略了的门，顺便添加一些砖瓦，而这些门背后的大多数东西，需要我们用更多的书、更多的讲座去创建。</p><blockquote><p>但是，这种意外收获并不只是一种让你收获意外之喜的机遇。可以肯定的是，意外收获源于一些愉快的事件，但真正让你感到愉快的是，这种发现对你很有意义。它验证了你的灵感，或者为你打开了一扇近在咫尺却被你忽略的门。</p></blockquote><hr><p>这和我们通常接触到的阅读习惯不太相符，大多数阅读指导都是每天预留一定的阅读时间，然后坚持。史蒂文这里的观点是留出专门的时间来阅读，在那一段时间里让尽可能的思想交叉，形成网络，然后沉淀成创意。这两种方法好像都很有说服力，但又好像缺点是什么。我尝试用史蒂文前面的观点来认识一下。坚持每天预留时间阅读是为创意提供源源不断的营养，只管持续壮大自己的认知树，而能否开花结果则交给时间去证明，这没有问题。休假阅读则是在短期内增加网络的混乱程度，让大量的想法尽可能交叉，为想法提供梦境一般的肥沃的土壤，这也没有问题。至于选择哪一种，这依赖个人的目的和能提供的条件。</p><blockquote><p>比尔·盖茨和微软公司的继任者雷·奥兹（Ray Ozzie），有个众所周知的习惯：每年都会休阅读假。在这一年内，他们会刻意收集大量的阅读材料（其中大部分内容与他们在微软公司的日常工作无关）。然后，他们会留出一两周的时间对他们收集的内容进行深层次研究。通过把阅读时间压缩到短短几天，他们更有可能建立起新思想之间的连接。</p></blockquote><hr><p>这个算法对于读书经常写想法的人而言是一个非常好的选择。它能帮助让这些想法形成网络，比如平均读一本书写下30个想法，这些可能都是读到某一个位置的灵感，但是一段时间以后，再回忆起来会比较困难，如果使用算法把这些想法连接起来，那么每一个历史想法在以后任何时候都能发挥巨大的价值。</p><blockquote><p>DEVONthink有一个重要的特征，即巧妙的算法。这种算法能检测到文本不同段落之间存在的、微妙的语义连接。</p></blockquote><hr><p>我一直对“头脑风暴”的效果持一定的保留态度，但也很难说好为什么，这里算是找到了一些证据。因为头脑风暴非常受限于时间和空间的限制，虽然密集的思维碰撞会增加网络混乱度，提高连接可能，但是在一个会议室中集中讨论并不能表达每个人足够的想法，难以为创意提供足够肥沃的土壤，而且，还有一个更重要的原因，时间是创意的朋友，而头脑风暴并没有很好的对待这个朋友。</p><blockquote><p>然而，最近的一些研究表明，“头脑风暴”法的效果并不如预期那么好。其中会遇到的一个问题就是时间和空间的有限性：一群人聚集在一个房间里，花费几个小时想出了许多疯狂的创意，然后就散会了。或许，可能会出现一些有用的连接，但大多数情况下，都没有什么效果。</p></blockquote><hr><p>◆ 第5章 绝佳的创新实验室总是有“污染”的</p><p>这个有意思，在确定的描述中加入一些不确定的噪声，能触发更多的连接，一定概率的噪声能产生更多的可能，也会让结果变得更加稳定。</p><blockquote><p>徘徊在概率表边缘的联想词语突然成为主流。通过故意将噪声引入到决策过程中，内梅特发现，结果与我们对真理和错误的直觉假设相反。与置于纯粹环境中的群体相比，那些接触到错误信息的群体建立了较具独创性的连接。即使从技术上来讲，“异议”演员为这个环境输入了不正确的信息，但他们会刺激其他受试者去探索新的可能性。</p></blockquote><hr><p>看到错误铸就了人类这一标题还有点没想明白，读到这里恍然大悟，人类进化就是在筛选错误的过程，DNA转录随机的产生误差，让自然选择来调整这种误差，最终实现突变与稳定性之间的平衡。</p><blockquote><p>这就解释了为什么有些科学家会认为，自然选择决定DNA转录过程可以出现微小而又稳定的误差率。从某种意义上说，这种进化通过“调整”误差率，实现了突变和稳定性之间的最佳平衡。</p></blockquote><hr><p>◆ 第6章 让完全不相关变成相关</p><p>以前经常把突变和功能变异混为一谈，从史蒂文这里的观点可以看出，它们存在本质的区别。突变可能是错误，可能是意外收获，它不过是网络中随机的连接，但功能变异不止于此，它为突变加选择的结果赋予了新的可能性，这是多么神奇的视角。</p><blockquote><p>如果说是突变、错误和意外发现帮助我们打开了相邻可能的大门，那么功能变异会帮助我们探索潜伏在这些门背后的新的可能性。当你打开一扇门，发现里面有一堆木头和一个壁炉时，那些用以照亮黑暗房间的火柴就有了一个完全不同的功能，这种可以帮助你看清事物的工具最终却给你带来了温暖。这就是功能变异的精髓。</p></blockquote><hr><p>郊区和小城镇因其网络的简单性无法形成液态的网络，顶多可能是气态的，某人有什么需求或爱好，要找到具有类似需求或爱好的人太难，没有足够的种子用户，就无法形成健壮的网络，更谈不上如液态一样溢出。而城市则不同，有足够的人成为种子用户，而且可以不断溢出，不断促使城市超线性生长。</p><blockquote><p>这么说来，城市为功能变异提供了一个适宜的环境，因为它培养了专业技能和兴趣，而且还创造出了一种液态网络，这些亚文化信息会外溢，并且以一种惊人的方式影响着它的近邻。这也是城市创造力呈超线性比例增长的原因之一。</p></blockquote><hr><p>这里有种恍然大悟的感觉，为什么网络可以孵化创意，为什么乡村和小城镇无法形成液态网络，而大城市可以超线性生长，一个非常重要的原因就是共享空间的存在，这种空间，或许就是史蒂文前面说到的孵化创意的沃土。</p><blockquote><p>然而，创造力不一定是由鼓励诱出的，真正起作用的是碰撞——当不同的专业领域聚集在一个共享的物理或智力空间时，就会发生碰撞。真正的火花就是在这种空间内产生的。</p></blockquote><hr><p>不禁想到邓肯·瓦茨在六度分割中的小世界观点，以及尼古拉斯·克里斯塔斯基和詹姆斯·富勒在大连接中提到强弱连接。小世界提取出网络的骨架，其中强连接影响着我们的行为，弱连接传递着信息，和本书史蒂文的观点结合，或许就是强连接可以形成液态的溢出，弱连接可以碰撞出创意的可能。</p><blockquote><p>透过功能变异的镜头来看社交网络的弱连接，我们能看到一些重要的变化：这种弱连接使得信息在整个社会网络中高效流通，即信息没有被困在一个由紧密结合的团体形成的孤岛上。</p></blockquote><hr><p>◆ 第7章 在生态圈中不断成长</p><p>这里对“站在巨人对肩上”这句话体会尤为深刻，基于已有能力进行组合、连接创新，能高效的生成丰富的创意，蒂姆·伯纳斯-李基于SGML和HTTP创造了计算机网络，YouTube基于网络和Flash而出现。有时候站在居然的肩上可能还不够，还要学会从很多居然那里找到关系。</p><blockquote><p>在现有平台之上的建设能力，说明了为什么三个男人能在6个月的时间里创建YouTube，而一大批专家委员会和电子企业却花了20年时间才使高清电视成为现实。</p></blockquote><hr><p>随着技术的发展和用户使用习惯的变化，产品肯定会在未来发生变化，所以如果一个产品在设计之初就定好设计成什么样，甚至已经定好未来的三年规划和五年规划，在一定程度上并不靠谱。跳出产品本省，如果从用户需求看，或许能看到更远一些的未来。有句话是，未来唯一不变的就是变化，在设计烤箱的时候谁也很难说以后用户会使用微波炉，除了变化，更重要的是看到不变的地方，用户快速烘焙食物的需求才会在未来三年、五年一直存在。</p><blockquote><p>这就像有人发明了一个烤箱，一年后发现，使用者自行想出了办法，将它变成了微波炉。</p></blockquote><hr><p>不管今天我们的文明多么先进，其实都是建立在历史的堆叠之上，但也不是所有的历史都能为今天的文明产生价值，我认为只有工具类的历史发展堆叠在一起才会带来更大的价值。工具要么解决了生产力，要么解决了生产关系，本质上工具让我们的社会变得更高效，因为我们不需要知道工具是怎么来的，只需要知道怎么使用工具就好了。如果我们带着今天的文明技术穿越到3万年前，或许根本无法生存，因为我们今天生存依托的工具，在那时候几乎还什么都没有。</p><blockquote><p>有趣的是，“堆叠”平台的真正好处在于，你不再需要掌握所有的知识。你不必知道怎样向卫星发射信号，或者解析地理数据发送微博并通过网络生态系统进行传播。迈尔斯·戴维斯不必建造有活塞的小号，或者发明D调多利安音阶去录制《泛蓝调调》专辑。</p></blockquote><hr><p>◆ 结语 第四象限，伟大创意的诞生</p><p>这就是功能变异，开利对空气调节装置只是那个时代众多突变的一种，但是这个突变让空调得以出现，然后改变了地理环境对人们生活条件对限制，以此带来美国社会和政治版图的变化，整个过程几乎具备史蒂文在本书中所说的所有创意出现的条件，这虽然有点幸存者偏差，不过细想还真有那么一回事。</p><blockquote><p>由于开利的奇思妙想，20世纪下半叶，美国民众掀起了迁往阳光地带和南方腹地的宏大移民潮。在空调普及前，这些地方的气候是让人难以忍受的。毫不夸张地说，开利的创意重新划分了美国社会与政治版图。</p></blockquote><hr><p>从个人/网络，市场/非市场两个角度、四个象限来看，的确是要容易理解很多，不过感觉这中间的界限似乎并没有那么清晰。团队协作的团队大小很难界定，所以很难界定是个人还是网络；在一个创意彰显其价值之前，也很难用市场或非市场去界定。史蒂文这里用四象限来划分，可能是希望我们把更多的精力集中在资源共享的环境中，促成更多的网络连接。这也是本书最主要的观点。</p><blockquote><p>四个象限归类结果是：第一象限表示私企或个人创业家；第二象限表示多家私企相互影响的市场；第三象限表示免费分享创意的业余科学家或爱好者；最后，第四象限表示资源共享或学术性的环境，可以通过大型、协作式网络建立或改造创意。</p></blockquote><hr><p>大型组织有足够的资源，但是还真不一定就能驾驭第四象限，大型组织都有一个通病，也就是克里斯坦森所说的创新者的窘境。如果能开辟独特的共享空间，提供资源，但不受企业本身商业模式影响，或许能诞生很多第四象限创新并从中获利。</p><blockquote><p>大型组织是否能更好地驾驭第四象限系统的创新涡轮——无论是公共、私营企业，还是政府部门。在私营企业这一块，像谷歌、Twitter和亚马逊（Amazon）这些公司的成功表明，适量的开放就能带来巨大的利益这一点至少是适用于软件领域的，而这些公司也都以不同的方式对第四象限的创新作出贡献并从中获利。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创新 </tag>
            
            <tag> 史蒂文·约翰逊 </tag>
            
            <tag> 进化论 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《认知盈余：自由时间的力量》</title>
      <link href="2021/01/02/ren-zhi-ying-yu-zi-you-shi-jian-de-li-liang/"/>
      <url>2021/01/02/ren-zhi-ying-yu-zi-you-shi-jian-de-li-liang/</url>
      
        <content type="html"><![CDATA[<p><strong>《认知盈余：自由时间的力量》，克莱·舍基著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>时间盈余的总量虽然大得惊人，但每个人能掌控的认知盈余其实很有限，如何让这些盈余发挥最大的价值，我们需要一个工具，工具让我们的行动具有可能性。我们有时候贡献自己的认知盈余并非为了获得金钱，只是为了让自我得到满足。在认知盈余中，我们渴望自治和获得胜任感。</p><p>最近几年，企业对认知盈余的使用变得空前高效，特别是在中国，人们碎片化的时间在不断被抢占，层出不穷的现象级App到底做对了什么，本书给出了很多答案，是工具，是平台，是机遇，是动机，是共享，是累积的自由时间里，在方式，动机和机会的融合里产生了这些认知盈余。回想充斥在我们身边的各种互联网产品，微信，抖音，滴滴，信息流，王者荣耀，吃鸡手游，都是从自由时间上产生的认知盈余。同样，看完这本书，回看我们身边的通讯录，朋友圈，订阅，点赞，关注，转发，留言，这些都变得异常的合理和必然。</p><hr><p>◆ 第1章 当自由时间累积成认知盈余</p><p>时间盈余一直都在那里，就看人们用什么去消费这些盈余，喝松子酒是一种消费方式，看电视是一种消费方式，政府三番五次没能遏制人们消费松子酒，因为人们没有其他消费方式，当转移到电视以后，松子酒的时间盈余就被稀释了，人们不在意看的是什么，只要在消费时间就好。</p><blockquote><p>同样，电视的问题也不在于节目的内容，而在于节目的量：对于个人以及整个文化的影响都取决于量。我们不仅收看好节目和烂节目，其实我们什么都看——情景喜剧、肥皂剧、电视导购节目（infomercial）以及家庭购物节目。人们往往在关心当时正在播放什么节目之前就已经决定要看电视。</p></blockquote><hr><p>◆ 多即是不同</p><p>如果把消费，创造和分享看成是基本需求，那就能解释为什么维基百科可以成功，为什么现在看网络视频时到处都是弹幕，为什么网络上有这么多社区。</p><blockquote><p>但实际上媒介就像铁人三项运动，由三种不同的活动组成：人们喜欢消费，但他们也喜欢创造和分享。我们总是喜欢所有这三种活动，但直到最近为止，电视媒介依然只回报其中的一种。</p></blockquote><hr><p>从概率论的角度这个很好理解，两个独立事件同时发生的概率是他们分别概率的乘积，当带相机的人概率接近为1时，整体概率就变成了事件被人看到的概率。但是从认知世界的角度看，这很难得，从带相机的人遭遇一个事件到一个事件被人看到，这不仅时思考角度的变化，还有因为控制变量促使的维度变化。</p><blockquote><p>一个拿着相机的人遭遇一件全球性大事的可能性，很快就变成了一个事件会有目击者看到的可能性。</p></blockquote><hr><p>◆ 认知盈余，一种全新的资源</p><p>作者在前面主要说明了我们的认知盈余很大，但是这种大对我们个人或小型企业来说并没有太大的指导意义。就像生活在水里的鱼，它们几乎不会意识到水的存在，即使有人告诉它们全球的水很多，这些水能维持气候变化，能养育生物，能产生动能，但这对于鱼自身来说，并没有太大意义。</p><blockquote><p>从过去孤立的时间和才能中脱颖而出的认知盈余，仅仅是一种原材料。要从中获得价值，我们必须让它变得有用或者能利用它做一些事情。</p></blockquote><hr><p>◆ 第2章 工具赋予的可能性</p><p>东方神起并没有让小女孩们去抗议疯牛病，而导致的结果东方神起却做梦也想不到。而且当时发布这一消息的媒介肯定不止东方神起一个，为什么是东方神起引爆了这一现象呢。如果说是认知盈余导致对疯牛病的抗议规模如此之大，抗议后期可能是，但抗议前期肯定不是，对为什么会引爆这一抗议的逻辑思考对我们个人来说比认识到认知盈余更有价值。</p><blockquote><p>“是因为东方神起我才来这儿的”和“是东方神起让我来这儿的”并不是一回事。东方神起从未真正建议任何公共甚至政治活动。但他们的网站或多或少向这些小女孩们提供了一个可以随心所欲讨论包括政治在内的所有问题的平台。</p></blockquote><hr><p>◆ 新方法，解决老问题</p><p>就像飞轮效应，用户越多，匹配的可能性越大，匹配的可能越大，用户更愿意使用，从而用户变得更多。当一个企业具有稳定的飞轮效应时才会有渊源不多的盈利能力，这个效应中的元素最好是自发的，不需要企业过多的参与，企业只需要提供一个工具，在这一点上国内的阿里和腾讯就比百度运用得更纯粹。</p><blockquote><p>其次，它创造了集合价值（aggregate value）——用户越多，匹配的可能性就越大。原有的逻辑，如电视逻辑，仅仅把观众当做个体的集合，每个个体都无法为彼此创造真正的价值。而数字媒体的逻辑则不同，它承认这些从前作为受众的人们每天都可以为彼此创造价值。</p></blockquote><hr><p>◆ 只需要按一下“发表”的按钮</p><p>1845年，近两百年前有人就意识到信息的丰富性，说明海量信息一直都在那里，是否丰富在于自己的关注圈是否够大。现在的人觉得信息越来越多，是因为每个人接触信息的成本太低，我们的关注圈变大了，在影响圈没有太大变化的时候，我们就会觉得信息过载。</p><blockquote><p>这个时代最大的祸害就是每一门学问都有太多的书。阻碍我们获得准确信息的最大障碍就是摆在读者面前乱七八糟的书，而我们必须从中去其糟粕，取其精华。</p></blockquote><hr><p>不只是从匮乏到丰富，从坏到好，很多时候都会忘记初心，在时间维度上拉长，保持平衡变得异常艰难。相反，从好到坏，我们更容易沉迷于曾经的辉煌难以自拔。常被人宣讲不忘初心，危机意识，可似乎说完也不知道自己的初心是什么，危机又是什么。</p><blockquote><p>资源匮乏要比丰富更容易解决，因为当某样东西越来越稀少的时候，我们会简单地想到它比从前更珍贵，这仅仅是一个概念上的小变化。而丰富则不同：它的出现意味着我们可以开始像浪费一切廉价的东西一样去处理此前珍贵的东西，仿佛它们便宜得能被拿去做实验似的。因为丰富改变了我们曾经习以为常的平衡状态，它能令在匮乏中成长的我们迷失方向。</p></blockquote><hr><p>◆ 做“酒吧”里的业余人士</p><p>分享也是一种需求，在马斯洛需求层次上这可能属于社会需求，而我们经常看中的金钱属于什么需求呢，生理？安全？尊重？自我实现？可能都不是，它是我们认为的实现这些需求的基础。</p><blockquote><p>大家分享各自的作品、视频、病症甚至是车上空位的动机并不是对金钱的渴求</p></blockquote><hr><p>市场的作用（之一）是提供平台，它本身不生产也不消费，它只维持着某一种特定的秩序，如果一个产品或企业要做大，可能把自己定位成一个维持某一种秩序的平台比为社会创造了什么更有价值。</p><blockquote><p>市场的作用之一就是为我们在市场之外所专注投入的事情提供平台，这个平台的形式可以是酒吧，也可以是网站。</p></blockquote><hr><p>◆ 自治和胜任感</p><p>就像自我实现，我们有时候解决一个问题后能身心愉悦，这是对胜任的满足感，这是单独的金钱给不了的，有时候我们甚至不愿意使用金钱对这种胜任感进行定价。</p><blockquote><p>一个关于电子游戏的研究表明，最吸引玩家的并非游戏中高仿真的画面和暴力场景，而是玩家在精通这个游戏后能够控制并胜任它的感觉。</p></blockquote><hr><p>◆ 成员资格和慷慨</p><blockquote><p>任何伟大的成就都是由一定数量渺小的工作积累而成的，而感谢页面中所展示的为人们提供了一种激励，使他们完成某项工作并非是因为这些工作需要完成，而是因为他们明显对组织存在价值。人们具有做某项具体工作的动机，而不是作为普通志愿者去做任何需要他们去做的事情。</p></blockquote><hr><p>◆ 放大渴望的反馈循环</p><p>我们常说的约束有法律和道德，每个社区里也有其独特的规则，社区自治会让社区更具活力，尽量不要让社区之外的力量做过多的干预。</p><blockquote><p>他们还区分出了金钱世界和情感世界的实际差别，因为这对他们意义重大，尽管这样的区分在法庭上没有丝毫意义。在这样一个社区的界限内，社区内部的动机纯度远远比社区外部行动的合法性更加重要。</p></blockquote><hr><p>◆ 第4章 “我们”为“我们”创造机会</p><p>对作者开篇提出来每年高达千亿的电视盈余的价值是持怀疑态度的，觉得那只能算花费在看电视上的时间盈余，并不算认知盈余，认知盈余不是所有碎片化时间的简单相加，它应该来自于某一个共同的认知。</p><blockquote><p>20亿人通过互联网相互连接，自由时间总计高达数万亿小时，但认知盈余并不等同于这些散落在全世界的自由时间的简单相加。相反，它是所有人共有的。</p></blockquote><hr><p>一个工具有用，人们当然会去使用，可是在没人用之前，怎么确定它是否真的有用，仅是自己觉得有用就真的能被大众认可吗？答案是否定的。传统信件到电子邮件，再到即时通讯，这种进化可能不只是有用，可能还有人们对效率的共同认知。</p><blockquote><p>如果一个工具是有用的，人们就会使用它。（意外吧！）就算这个新工具和已有的存在天壤之别，但只要能帮助人们去做他们想做的事，它就一定会为人所用。长辈们为什么开始使用电子邮件并不难理解，令人费解的是，我们怎么会认为使用电子邮件只关乎科技创新，而与社会延续无关呢？</p></blockquote><hr><p>◆ 最后通牒游戏</p><p>再看最后通牒游戏，太有意思了。会接受1美元是因为理性人假设的存在，不能接受1美元是因为不患寡而患不均的社会人心态的存在。如果在不改变占比（10%）的条件下不断增加总额，当我们分得100美元1000美元，还是10000美元的时候，我们或许就会妥协了。这个平衡点不就是雇主付给雇员的薪酬吗？</p><blockquote><p>提议者会拿走其中的9美元，剩下1美元给你，并且你肯定会接受。毕竟，有1美元总比两人什么都没有好。1美元，尽管与提议者得到的数量相比微不足道，但始终聊胜于无。</p></blockquote><hr><p>◆ 联合协作：群体创造价值</p><p>将是非感内化到各成员，这个看似有用的废话实则经常被忽略，就像后文作者的举例，同样是不要把行李车推上自动扶梯的指示牌，当被机场工作人员外形纸人举着时，它的内化效果是明显的。</p><blockquote><p>需要管理共同资源的团体对于合作规范有着共同的承诺，这与能够发现错误并进行惩罚是不一样的。最容易处理的是那些还没有发生的违规行为，因此，不论是在处理过度灌溉还是越界捕鱼的问题上，将是非感内化于各成员都是不可或缺的治理工具。</p></blockquote><hr><p>◆ Napster的成功，新机遇与旧动机</p><p>有人在因为自己的选择而面临问题时，总会抱怨如果再给自己一个机会，一定不会这样选择，可是如果真回到做出选择的那个实际场景，我相信多数人还是会做出一样的选择，那是当时的环境和自身的认知所决定的。如果以现在的环境和认知去做曾经的决策，这种模拟没有任何意义。</p><blockquote><p>我们会将年轻人的这种行为与我们在这方面的美德做比较：“你们这些暴露狂！我们像你们那么大的时候，绝对不会这么做！”这样的比较显然忽略了一个事实，那就是，我们之所以没那么做是因为那时没有机会。（从我对自己20岁时的记忆来说，如果那时有机会的话，我们一定会很乐意也那么做的。）</p></blockquote><hr><p>一种新的思考维度，之前在我个人看来，优秀的创新不仅是一种纯粹的从无到有，更多的是组合的创新，很多基本元素都已经存在，需要进行一些排列组合让其实现价值，但我仍然只能想到同一时间上的组合。这里作者提供了一种新的思考维度，在时间维度上的组合，当曾经的旧动机与现在的新机遇组合同样能擦出不一样的火花，这似乎就能理解风口的来源了。</p><blockquote><p>首先，数字化资源无需花费任何边际成本就可无限复制；其次，如果分享足够容易，人们会很乐意分享，在同样的情况下，我们一般不愿表现出恶意；最后，肖恩·范宁利用正确的激励方式，设计出一个程序，很好的将前两个原因连接起来。</p></blockquote><hr><p>◆ 第5章 这是一个创造慷慨文化的时代</p><p>刚从象牙塔走出来时，作为一个理工科学生，我是不太能理解文化的魅力的，觉得文化过于形而上学，经过几年职场打磨，文化作为一种凝聚力，这是内化的力量，就像作者前面提到的，内化到各成员不止事半功倍，更得取得质的变化。</p><blockquote><p>一个实践社区的存在，与其说是为了维护社区中某些特殊的知识，不如说是为了维护将社区团结在一起的文化</p></blockquote><hr><p>一直对类似的社会研究实验持保留意见，对于研究者而言，这就是一个实验，对读者而言，就是一个论据，可对参与者而言，这可能就是他们很长一段时间里的全部，个人觉得试验对象应来自于自发进行，研究者不应该过多干预，而研究者最应该做的是寻找案例，而不是去干预事件的发展。</p><blockquote><p>第一个星期，每个中心都会有七到八位家长迟到。接下来，研究者们在其中6所日托中心设立罚款制度，声明说：从今往后，迟到10分钟以上的家长，将会被罚款，罚金会被自动添加到他们的账单上。（另外4所中心作为控制组，依然保持不变，以保证在选定的6所中心里任何被观察到的现象都是罚金带来的后果。）</p></blockquote><hr><p>这可以用等价的方式进行衡量，因准时而导致的时间匆忙是一种损失，因迟到内心的愧疚是一种损失，因迟到而需要接受的罚款是一种损失。每个人都会衡量这些损失的大小关系，3美元每个人都可以接受，如果罚300美元还有这么多迟到吗？</p><blockquote><p>从威慑理论的角度来看，这个结果是有悖常理的。罚金很少，只有10谢克尔（约合3美元），但是再少也应该有一定的威慑作用。应该说在惩罚制度实施之前，接孩子迟到再不好，总强过罚款10谢克尔。即使数额太小以至于起不到威慑作用，也不应该不减反增吧。不过事实就是如此。</p></blockquote><hr><p>能用钱解决的问题都不是问题，这并不是有钱人的狂妄，这是对社会规则的敬畏，能用钱解决，说明是可以被标价的，说明是有限价值。而对于无法用钱解决的问题，无法被标价，价值也就难以衡量，自然需要保持一颗敬畏之心。</p><blockquote><p>德西的研究重点放在自治和竞争两方面的个人动机，结果证明将动机标价会减少人们做事的动机。格尼茨和鲁斯蒂奇尼关注社会动机，证明将非市场交易行为标价以后，人们会减少把对方当做可以保持长期关系的人来对待的意愿</p></blockquote><hr><p>◆ 共享经济学</p><blockquote><p>知识是人类所拥有的最具兼容性的东西，但是要想利用它，就需要具备一些特殊条件。在《知识经济学》（The Economics of Knowledge）一书中，作者多米尼克·弗瑞（Dominique Foray），这位来自瑞士洛桑联邦理工学院（Ècole Polytechnique Fédérale）的法国经济学家指出，这些条件分别是：社区规模的大小，共享知识的成本，被共享知识的明晰性，以及接收者们的文化规范。</p></blockquote><hr><p>◆ 业余参与所带来的归属感</p><p>一千个读者有一千个哈姆雷特，每个人的认知地图不同，看问题角度不同，得出的结论自然不同。这种矛盾很难直接解决，因为矛盾来源于长久积累的认知。解决这样的问题需要探究到更深处，比如就这里提到的兴趣小组，大学的立场真的觉得学业不应该分享吗，那和同桌老师分享学习算什么。阿凡尼尔真的觉得faceboo只是校园之外的延伸吗？那为什么不让更多的老师指导员加入。如果是每个老师同学都能共同参与学习交流的社区，问题可能就没有那么棘手了。</p><blockquote><p>凡尼尔的立场则截然不同。对于他来讲，facebook只不过是校园的延伸。如果学习小组真的在一个叫做地牢的房间做化学作业，那在学校里做作业和在网上做作业没有任何区别。阿凡尼尔说：“如果这都算是作弊的话，那么私人补习也是作弊，学校里导师带学生做项目也是作弊。”</p></blockquote><hr><p>◆ 同病相怜</p><p>同病相怜就是一个社区，业余者存在的最大意义在于他们搭建起了初来者与专业者沟通的桥梁，这样的社区如何能存在，就要看人们在多大程度上愿意贡献自己的认知盈余。</p><blockquote><p>“同病相怜”的故事阐明了我们在社会化媒体使用中面对的最重要问题之一，也就是，我们在多大程度上愿意利用认知盈余来创造真正的公民价值？</p></blockquote><hr><p>◆ 沙发旅行与粉色内衣</p><p>沙发旅行可能面临着很大的监管风险，会员的社交方式过于简单粗暴，而且难以保证会员隐私，这种社交网络太重了，直接一点，这就是一个在线预订平台。</p><blockquote><p>“沙发旅行”设立的目的是为了改变人们旅行的方式，它不光为会员提供免费住宿，还帮助他们在全世界建立联系。“沙发旅行”是旅行者的一种社交网络（截止到目前，该网站已经拥有10万会员），它在需要短期住宿的人和愿意提供住宿的人之间架起了沟通的桥梁。</p></blockquote><hr><p>◆ 个人、群体与自由</p><blockquote><p>个人分享（Personal Sharing），在原本没有任何联系的人们之间进行，比如“大笑猫”。</p><p>公用分享（Communal Sharing），其参与性更强，在一个协作的群体之间进行，例如Meetup.com上面的应对产后抑郁症小组。</p><p>公共分享（Public Sharing），协作群体积极尝试创造公共资源，如Apache软件计划。</p><p>公民分享（Civic Sharing），表现为一个群体积极尝试改变社会，如“粉色内衣”行动。</p></blockquote><hr><p>◆ 群体与治理</p><p>如果群体不能相比个体更好的满足个人需求，那群体必定走向衰败。而且群体中每个个体的需求不同，要同时满足个体需求就变得更加艰难。忽然想到很多公司招聘时提到要有共同的价值观，以前一直觉得是套话，实则含义深刻，只是可能很多人都听听罢了。</p><blockquote><p>因为我们作为人类，无可救药地既想满足个人的需求，又想实现集体的效率，全心全意致力于为社会或公众服务的团体很难长久维持。</p></blockquote><hr><p>◆ 第7章 寻找鼠标，世界是“闲”的</p><p>自由时间是原材料，动机是用这个原材料做什么，方式则是如何做，最终这种原材料将带来前所未有的机会。看起来有点宏观，不过作者提到的三个要素似乎真是那么一回事。</p><blockquote><p>方式、动机和机会三者的融合，从累积的自由时间这个原材料中，生产出了认知盈余。真正的变化来自于我们认识到这种盈余所带来的前所未有的机会，或者更确切地说，它带来的前所未有的让我们为彼此创造机会的机会。</p></blockquote><hr><p>◆ 改进可能性</p><p>看起来就很有趣和价值的东西，才会有更多的用户愿意尝试，曾经张小龙说过微信的成功是因为它的简单，这让微信的价值一下子简单明了，任何人几乎不需要学习成本就能找到乐趣。反观很多功能异常丰富的产品，结果确导致了大量用户从入门到放弃。</p><blockquote><p>用户只会去利用那些能够被理解，并且看起来有趣又有价值的机会。</p></blockquote><hr><p>这在统计学的解释是，在广播系统中，影响因素是相对比较独立的，于是最终导致的团体行为更加趋于平均化。而在参与性系统中，影响因素之间高度相关，导致活跃的更加活跃，不活跃的更加封闭，严重两极分化。</p><blockquote><p>在广播系统里，团体越大，就有越多的行为汇聚到某一平均水平上。而在参与性系统里，“平均”则几乎是个无用的概念。最活跃与最不活跃的用户的行为随着总人数的增加，明显地区分开来。社会系统越大，最活跃和最不活跃参与者之间的区别越大。</p></blockquote><hr><p>看到这样的结论，一下子恍然大悟，亲密度是有上限的，我们每个人能接触到的节点一直都只有那么多，清楚的认识到这一点，回看我们周边的通讯录，朋友圈，空间，订阅，点赞，关注，留言，一切似乎就是那么的合理和必然。</p><blockquote><p>在一个小团体里，每个人可能都紧紧相连。但是随着系统的扩大，这种可能性便消失了。不是一些参与者变成了观众，就是人们各自形成了小型的、相互重叠但依然亲密的团体。</p></blockquote><hr><p>◆ 寻找鼠标</p><p>每个人都可能深陷曾经的记忆，而社会的发展永不停滞，在历史长河的一瞬间，世界可能已经发生了质的变化，而短暂的人生可能还来不及适应，就已经结束了。寻找鼠标，也是寻找世界的认知盈余。</p><blockquote><p>在历史上的一瞬间，我们已经从一个有两种不同媒介模式的世界——专业人员掌控的公共广播和人与人之间的私人对话，转变成一个公共和私人媒介糅合在一起，专业和业余生产界限模糊，志愿公共参与从无到不可或缺的世界。</p></blockquote><p>完 ～ </p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 商业 </tag>
            
            <tag> 自由时间 </tag>
            
            <tag> 克莱·舍基 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《不可消失的门店：后电商时代的零售法则》</title>
      <link href="2021/01/02/bu-ke-xiao-shi-de-men-dian-hou-dian-shang-shi-dai-de-ling-shou-fa-ze/"/>
      <url>2021/01/02/bu-ke-xiao-shi-de-men-dian-hou-dian-shang-shi-dai-de-ling-shou-fa-ze/</url>
      
        <content type="html"><![CDATA[<p><strong>《不可消失的门店：后电商时代的零售法则》（新零售三部曲），大卫·贝尔著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>本书的观点稍微有点过于重视线下门店的作用，这可能和作者生活工作环境有关，而且本书的很多结论来源美国数据，在Online和Offline方面，中国的发展毫无疑问领先全世界，所以从我们的角度出发，需要辩证的看待一些论点。我们生活在这个充满连接线上线下通道的世界，现在国内很多人已经开始逐渐忽视线下门店的价值，透过作者的视角，我们会看到不一样的线下门店存在的意义。</p><p>作者从地理，阻力，相邻，近区，隔离，地形等六个方面产出了不可消失门店的商业逻辑。本书首先定义了网络世界中究竟都有谁，然后探讨了数字鸿沟的概念，接着观察了我们从固定网络走向移动网络时发生的巨变。当移动网络与你如影随形时，比如通过使用iPhone或者三星盖乐世这样的移动设备，你所处的本地环境就会对你的行为会产生更强大的引力。当线上线下交互结合得越来越紧密时，会如何在搜索、购物和销售方面给人们带来不一样的体验。</p><p>我们一般熟知的是O2O（Online To Offline）模式，这是有潜在顺序在其中的。但是作者这里在本书中提出O+O，这种顺序没有了，反而觉得Online和Offline的关系更加紧密了。不要一味的把线上的东西搬运到线下，也不要一味的把线下的东西搬运到线上，有时候并没有 To 的必要，两者相互合作，或许能找到截然不同给商业模式。</p><p>阅读本书，可以重点思考这一些问题。</p><p>为什么电商模式的销售会出现爆炸式增长？</p><p>为什么相隔甚远地区的人有时候会对同一件商品产生相同的反应？</p><p>为什么地理位置的“相似性”与地理位置的远近并没有太大关系？</p><p>为什么在品味和偏好上与邻居“不同”的人们会对网络世界有特殊需求？</p><p>为什么线下社区的信赖和信息共享可以帮助互联网商业发展？</p><p>为什么企业在新零售时代要积极开展线上、线下全渠道运营？</p><hr><p>◆ 中文版序 新零售时代已来</p><p>一些思维觉得线上线下是竞争关系的原因可能在于，没能跳出商品本身去看待整个市场，认为用户只有那些，商品也是那些，如果用户去线上了就不会再去线下，实则不然，很多商品的属性是可以被拆分的，用户买衣服真的就只是买衣服吗，他们去商场，选择，试穿，结账，这些都属于买衣服的这个动作的过程，而这些过程就提供了线上与线下的连接的桥梁。</p><blockquote><p>在当今新零售的大格局中，线上与线下已经无时无刻不融为一体了，服务于消费者的零售商应该同时部署线上和线下的战略。</p></blockquote><hr><p>◆ / 引言 / O+O模式，未来零售行业的新模式</p><p>从现在线上线下的关系看，除了我和你是谁，我和你的位置在哪里，还有一个非常重要的因素是我和你的关系是什么，甚至这种关系成为了现在最重要的因素，它直接决定了线上和线下联动的商业模式。现在的线上现在已经不再是单一的对立或互补关系，它可以拓宽到行业的边界上，这种关系本身就会出现很多新的商业模式。</p><blockquote><p>从出现交易和商业开始，经济的根本就在很大程度上由地理位置决定了。我清楚地认识到，答案并不只是我和你是谁这么简单，我和你在哪里也同样非常重要。在线下，重点仍然是“位置，位置，位置”。</p></blockquote><hr><p>如果让贝佐斯或马云来看这句话，他们可能会觉得，线上直接替代门店难度较大，但是通过电子商务，门店的位置已经不再那么重要了，门店位置已经不再是决定一切的终极要素，而能决定这一切的或许是店铺的网络排名，而这排名的权利掌握在电子商务平台手中。</p><p>就我来看，在可预见的未来，门店不会消失，不过未来门店主要的功能不是产生交易，用户进入门店，更多的是消费时间和服务。从位置上看，特立独行的门店会逐渐失去竞争力，更多的门店会入驻Shopping Mall，提供丰富多样的周边服务可能比频繁上新更有诱惑力，线上购买 + 就近提货，线下试穿 + 线上发货或许会成为主流，同时会通过店铺直播、流媒体、在线活动等建立垂类影响力。</p><p>所以从这个角度看，以后把门店的位置与在线用户的位置联系起来或许能促成一些交易，以直播为例，店铺直播的同时（特别是连锁店铺），向授权获取地址的用户提供周边店铺位置信息，这在一定程度上会增加用户的安全感，同时增加店铺与用户的粘性，另外，除了向用户推荐所关注店铺的直播情况，想用户推荐周边店铺的直播情况，也应该能增加交易量。</p><blockquote><p>影响我们网络搜索、购物和销售行为的究竟是什么呢？这就是本书要讲的全部内容。事实证明，门店不可消失，位置（依然）决定一切。</p></blockquote><hr><p>◆ 消费者个体的购物选择</p><p>假如哈尔冰啤酒和青岛啤酒同时存在于货架上，黑龙江的货架上哈尔冰啤酒份额是青岛啤酒的两倍，在山东则相反，这也很正常。不过啤酒只是一个角度，当购买衣服的时候你会很在意这个衣服品牌是当地的还是外地的吗？或许很多人不会，人们不会过多关注线上店铺在实际中的位置，毕竟现在物流这么发达。那么什么样的商品会导致这种差异呢，最直接的或许有两点，第一，品牌的可识别度，就像我们会关注啤酒品牌，但是很少会关注螺丝钉品牌。第二，线下门店购买的频次，频次越高，线下门店份额高的品牌可以培养选择惯性。</p><blockquote><p>如果A品牌和B品牌真的几乎无法分辨，那么在线下实体门店中，A品牌的份额是B品牌的两倍，这是难以想象的事情。</p></blockquote><hr><p>齐普夫定律：在单词频率分布中，排名第n的词出现次数约为第一的1/n。这个定律有意思，它在什么样的背景条件下会发生，又在我们现实世界中有什么指导意义呢。</p><p>当影响一个事件发生的可能性多到不可控，那么在大数定律的指引下，这一事件的出现概率通常会接近正态分布。把正态分布旋转90度（这里不只是坐标轴的旋转，是统计参数的旋转，比如原来统计数量，现在统计市占率），一般就能得到另一个常用分布——长尾分布，这好像就比较接近齐普夫定律的条件。</p><p>根据齐普夫定律，可以很好的度量自己所在的位置。比如，一个企业在市场中占有多大的市场份额，其实是比较难统计的，因为这个市场上有多少参与者，他们分别有多少市场份额，很难面面俱到。但是通过齐普夫定律，你只需要知道第一名有多少销售额，自己有多少销售额，就可以大概估计出自己的位置。是不是很神奇。就像我们常用平均数，但不常用中位数，因为知道总量和个体数量，我们就可以知道平均数，但是计算中位数要收集的数据会多得多，但平均数在很大程度上已经可以代表整体数据了。</p><blockquote><p>齐普夫定律是美国语言学家齐普夫（G.Zipf）于1935年提出的词频分布定律。该定律发现了在按频率递减顺序排列的频率词表中，单词的频率与它的序号之间存在“幂律”（power law）关系，即如果把单词按使用频率排序，那么使用频率与序号之间几乎恰好成反比。换言之，如果把一段文字中的所有词语按出现频率从高到低排列起来，排第二的词语其出现频率就约为第一的一半，排第三的词语出现频率就约为第一的三分之一，以此类推，排第n的词语出现次数约为第一的1/n。</p></blockquote><hr><p>◆ 02 铲除线下搜索阻力和位置阻力</p><p>从这里能进一步理解三四线城市电商的崛起，拼多多、快手、今日头条成功的逻辑。不同目标群体在电子商务和信息流上的反应差距如此之大，不确定作者这里的结论是否正确，不过的确存在很不错的参考价值。</p><blockquote><p>在其他条件均等的情况下，为什么居住在规模较小、位置较偏、商品多样性较弱地区的人们会比居住在较大地区的人们更有可能使用互联网来购物；而在那些规模更大、城市化程度更高、商品更多样化地区的住户更喜欢利用互联网获取信息。</p></blockquote><hr><p>◆ 现实世界的购买阻力</p><p>这就是信息不对称和用户额外成本为企业创造的盈利空间，而且这种盈利空间经常会因为企业的规模效应而得到提升。而如何为这种信息不对称和用户额外成本定价，可能是最需要考虑的问题，就像我宁愿多花20美元在本地买一个电视机，但是不愿意多花20美元在本地买一个闹钟，即便我去另一个城镇的成本是相同的。</p><blockquote><p>你喜欢的那一款售价是1995美元，而你了解到镇上还有一家门店，售价可能更低。此时，你要么购买眼前这一台，要么开车穿过半个城市到镇上看看另一家店的货。当然了，开车过去就必须消耗汽油和时间，也就是说，为了获得物美价廉性价比高的商品，或者为了在你目前所考虑的商品上获得更优惠价格的可能性，你需要承担搜索成本。</p></blockquote><hr><p>在互联网的思维下，不只我们的时间碎片化，我们自身也是碎片化的，线下门店是否有必要存在就依赖于我们这种碎片化资源的聚集性，互联网拓宽这种相似人群的地域边界，也拉长了企业的触手。假如在互联网之前，一个门店的一年的成本是100万元，周围用户能为门店创造90万元的收入，那么这个门店同样会亏损，可以不开这个门店，就会损失90万元的收入，这种决策难度相当大。在互联网背景下，建立一个200万元的库房，通过50万的物流覆盖500万元的收入，盈利可以达到50%，这就是价值。</p><blockquote><p>互联网通过将不同位置的人们凝聚起来，解放每一个人，创造出一个庞大、有利可图的市场。我们回过头来再看看Diapers.com。现在问问自己：如果马克和维尼把尿不湿母婴店开遍全国，会和现在一样成功吗？很可能不会。不管在某个地方有多少带孩子的人，其人数依然不太可能足以支撑起一家只销售尿不湿的公司。只有在每个区块都有若干人会网购尿不湿母婴相关商品，加起来很快就会有一大群人！在这个例子中，互联网解放了那些与周遭“不同”的人，即便他们正好住在同一个大城市里。</p></blockquote><hr><p>天性使然，我们都喜欢触手可及，如果我们需要的东西在周边就可以触手可及，我们还会使用互联网购物吗？或许不会。可关键问题是我们需要的东西在周边无法得到全部满足，在这种现实环境的阻力下催生了电子商务。那么进一步思考，我们会愿意花费多大的成本（多远的距离、多长的时间）来满足这种需求，这就又与前面说的我们会愿意本地多花20美元买个电视，但是不愿意多花20美元买个闹钟结合了起来。这种愿意多花的成本就决定了门店规模和门店密度，可能没有最优解，但应该有相对最优解。</p><blockquote><p>天性使然，我们天生就不爱跑大老远买东西，我们总是希望一切事物都触手可及。令人颇感意外的是，我们发现了一些人们愿意为了什么而“移动”多远的规律。</p></blockquote><hr><p>记得刚知道亚马逊的时候，一直觉得亚马逊就是买书的，而且当时当当这类图书网站也如日中天，在这里找到了些许答案。大多数人从真实门店的消费状态转变到在线消费，很多消费模式需要发生改变，当一下子接受不了怎么办，这可能是所有新商业模式诞生时都会面临的问题。选择什么样的过度尤为重要，人们一开始因为不可试穿难以接受网上购物，但是可以接受网上购书，这种过度方式堪称一绝，如果当时线上平台和用户面临的问题硬钢，希望通过技术手段解决用户在线试穿的问题，那可能就没有结果了，毕竟过去了20年，现在的技术也还没有完全解决这个问题。</p><blockquote><p>大多数人都喜欢先试穿，然后再买衣服。衣服具有“被触摸并感受”的属性，这很难在网络上交流。杰夫·贝佐斯正确地认识到这可能会成为购买的阻碍，于是就一路向下，选择了当时在商品品类销售排名第25名的流行品类，即图书。因为图书与互联网能完美结合，书中并没有什么需要触摸感知的东西。如果你知道了价格、作者、主题以及一点评论信息，就可以下单了。</p></blockquote><hr><p>◆ 相邻个体口碑相传与模仿感染效应</p><p>邮政编码（英语：Postal Code，又称邮递区号），是一个国家或地区为实现邮件分拣自动化和邮政网络数位化，加快邮件传递速度，而把全国划分的编码方式。从作者这里的观点来看，每一个邮政编码区就会存在一种趋同性，这是有一定道理的，邮政编码不只是快递员的活动范围了，也是当地人通常的活动范围。</p><blockquote><p>美国共有40000多个邮政编码，尽管这并不一定总是衡量社区的最佳方法，但围绕着它所产生的基础设施表明，通过邮政编码划分区块显然是个行之有效的办法。市场营销人员、保险公司、信贷机构，甚至政治团体都会根据所居住的邮政编码区块来寻找目标个人家庭。</p></blockquote><hr><p>不要妄想一种商业逻辑可以覆盖所有人，面对某一个特定的虚拟社区，就已经可以实现巨大的价值，把一个线上平台理解为一个门店，或是一个商场，尽可能满足周边社群的需求，从这个角度看或许能更好的找到自己的定位。就像在北京的门店，不用过多的去关注成都的用户都在购买些什么，除非你要在成都开连锁分店。</p><blockquote><p>社区也可以是虚拟的，有着相似兴趣的一组人可以在某个虚拟地点（例如RugbyHeaven.com）聚在一起，这与他们实际的居住位置无关。而拥有相同特征或者即使相距甚远但属性相似的人们也都可以被归为一组。</p></blockquote><hr><p>◆ 现实世界中的物理距离和社会距离</p><p>说小一点，每个人的朋友圈就是一个虚拟社区。我们有时候会说，xx事件在朋友圈刷屏了，可是当你向另一个和你关注点不同的朋友说这件事的时候，他如果表现得一年茫然，这非常正常。我们都会选择性的过滤消息，“刷屏”的基本上都是我们感兴趣的的事件。我们上学时候的时候刷屏的基本上和学业有关，工作了刷屏的基本上和自己工作的领域有关，所谓的刷屏不过是自己所关注的一小撮而已。</p><blockquote><p>从营销的角度，可以把虚拟社区粗略地理解为在网络上围绕着一个大家共同感兴趣的话题相互交流的人群，这些人对社区有认同感并在参加社区活动时有一定的感情投入。</p></blockquote><hr><p>克里斯·安德森的长尾理论算是火爆互联网的长尾启蒙思想，但是知道长尾是什么样的并不能解决实际问题。作者这里提出的空间长尾，虽然从本质上还是长尾，但是把它摊平放在城市地图上，给人的感觉就不太一样了，作者还未确定这种空间长尾的实际价值，不过这向我们提供了一个很好的思路，不要看着什么都是正态分布，都是长尾分布，没有结合实际环境，知道再多的名词不过是唬人的低级手段。</p><blockquote><p>这是克里斯·安德森的长尾思想的又一次实战体现，只不过这是一个空间长尾的新理论。</p></blockquote><hr><p>◆ 现实世界供应的商品和固定成本</p><p>隔离成就了网络的多样化，这个观点还是很有意思，地理位置隔离成就了区块的形成，为线下门店的辐射范围提供了定量的基础。偏好隔离形成了互联网社群，因为不同的社群，有了网络的多元化。这或许就是我们现在说所的垂直领域。用线下门店覆盖区块的思想来做垂直领域商业化，听起来就感觉是个很新颖的角度。</p><blockquote><p>隔离成就多样化网络世界中的“无限”多样性和现实世界中属于品味少数派的人们结合起来，产生了在线购物和销售的一些非常神奇的规律。</p></blockquote><hr><p>在传统零售业中，很多品类会掉入长尾中，似乎永远也没有出头之日。不过在新零售环境下，就品类而言，似乎就没有了绝对的长尾。对于你的目标客户，就你是头部，而对于非目标客户，你就永远会是长尾。可是现在线上店铺泛滥，绝大多数店铺都掉入了长尾之中，究起原因或是同质化和没有找到目标客户。如果看到别人能赚钱，复制一个一样的，不一定能赚钱，只会让长尾更加扁平；如果目标客户都不清楚，产品又该销售给谁呢，如此甚至进入长尾的门票也没有。</p><blockquote><p>因为网络世界充满了来自消费者的推荐信息，用户运用搜索功能很容易看得到。无论他们处在线下的哪个角落，网购者都能更便捷地触及长尾，发现小众商品。</p></blockquote><hr><p>如何才能找到这种沃土，这才是大多数人最关注的问题，可是这必定没有标准答案。从隔离的角度，或许能找到一些思路。直接去寻找小众商品是困难的，但发现区块是相对容易的，所以把区块拎出来，剩下的就可能是机会。就像通过聚类发现一堆数据中的异常值，不能被归为簇的数据，很有可能就是异常值。</p><blockquote><p>如果你是个卖家，并且能够找到被隔离、也想要小众或者长尾商品的消费者，那么来自他们的需求一定会特别高。消费者会很高兴，同时对于价格的敏感程度也相对较低，这一切对于卖家而言可谓是致胜的大招儿。</p></blockquote><hr><p>◆ 存在于现实世界与网络世界中的我们</p><p>从固定设备转移到移动设备上，这种改变难度不亚于从线下门店转移到线上门店，很多消费模式都会发生改变，这种改变不只是伤经动骨，很多东西要打断重接，甚至有固定设备的思维惯性，会导致在移动设备上的“不兼容”。从PC到移动，不是做一个APP，是要重新定义用户交互模式。同样，现在都说5G、人工智能，或许同样需要重新定义，当前比较广泛的定义是从手动交互到语音交互，可真的只是交互方式的改变吗？从“圆筒”音响到“有屏”音响，这就说明，人们希望的交互方式不只是语音。</p><blockquote><p>从固定设备转移到移动设备会提高线上搜索阻力，因为你点击排名靠后链接的可能性下降了，排名靠前的链接点击率得到了更大的提升。当你在固定的设备上搜索当地门店和品牌时，距离门店的距离每减少1公里，点击率就会提高大约12%。</p></blockquote><hr><p>同样是搜索，在不同的设备上进行的目的是不一样的，以买啤酒而言，在固定设备上，我可能是想买一箱，我预期的可能是家乐福、沃尔玛、山姆或Costco。在移动设备上，可能是想买一瓶，我预期的可能是便利峰或7-11，又或许是随便看看。</p><blockquote><p>如果我在家里搜索啤酒，我可能是想买一箱，也可能只是随便看看；而如果我在iPhone上搜索啤酒，那么就更有可能要么在外，要么准备出门，此时此地就准备买一箱。</p></blockquote><hr><p>我们熟知的裂变式营销一般是熟人社交中的传播，比如分享给微信好友。不过作者这里指出，有时候分享到更广泛的社交网络中，效果或许更好，比如分享到微博。作者用数据给出了论证，我试着给出三个原因：</p><p>1.非熟人社交，用户的散播受到约束会较弱，加以少许的利益诱导，分享更容易成功。</p><p>2.从趋同性看，用户知道这个商品，那用户的熟人社交也可能已经知道，再次分享的意义不大。</p><p>3.陌生人社群下，覆盖的人群更广，多样性也更强，有主意品牌传播。</p><blockquote><p>运用规模化和自动化的手段被动地接触人群反而更好，即使这些人群更加分散，与信息的发送方之间的联系也更加疏远。</p></blockquote><hr><p>一般熟知的是O2O（Online To Offline）模式，这是有潜在顺序在其中的。但是作者这里提出O+O，这种顺序没有了，反而觉得Online和Offline的关系更加精密了。不要一味的把线上的东西搬运到线下，也不要一味的把线下的东西搬运到线上，有时候并没有 To 的必要，两者相互合作，或许能找到截然不同给商业模式。</p><blockquote><p>所以，零售商和消费者可能都还得继续在现实与虚拟、线上和线下的两个世界选择之间权衡利弊。</p></blockquote><hr><p>◆ 沃比·派克如何打破零售垄断</p><blockquote><p>● 理想情况下，你的目标应该是解决一个非常常见的问题，即一个影响了庞大的市场的问题。● 你团队的创始人们（大部分研究表明，两个人或多人要比单打独斗更好）应该展现出极具吸引力的人格魅力，并对公司拥有明显、有传染力的热情。这些品质会鼓励其他人入伙，共同将愿景化为现实。● 团队必须能够高效、保质保量地完成任务。想法本身是一文不值的，成功地执行落地就是成功。</p></blockquote><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 电商 </tag>
            
            <tag> 线下门店 </tag>
            
            <tag> 大卫·贝尔 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《拆掉思维里的墙：原来我还可以这样活》</title>
      <link href="2021/01/02/chai-diao-si-wei-li-de-qiang-yuan-lai-wo-huan-ke-yi-zhe-yang-huo/"/>
      <url>2021/01/02/chai-diao-si-wei-li-de-qiang-yuan-lai-wo-huan-ke-yi-zhe-yang-huo/</url>
      
        <content type="html"><![CDATA[<p><strong>《拆掉思维里的墙：原来我还可以这样活》，古典著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>世界上有很多教人成功的书，可是很少有书教我们如何幸福，而幸福不正是我们所最需要的吗，读完古典老师这本书，或许我找到了怎样可以更幸福一点。</p><p>首先认识我们自己，我们都是安全感的奴隶。为了获得生活的安全感变身房奴；为了获得职业安全感，每一次职业选择都战战兢兢；为了获得爱，却得到了依赖与被依赖、置换和占有的变态喜欢。</p><p>古典老师认为，我们之所以被安全感囚禁，是因为恐惧，为了战胜这种恐惧，可以将自己的恐惧放入相对“安全”的地方，可以是一个信赖的朋友，也可以是一个笔记本，同时尽量规避那些压抑、恐惧的社会环境。在此基础上小范围的冒险，并把历史的成功记录下来，认识到自己的突破。</p><p>看这本书会让自己变得愉悦一些，哪怕只是一点点，让我们知道，生活其实并没有那么糟糕，只要我们敢于去一个有趣的人，很多快乐就会扑面而来，这稍微有点像毒鸡汤，不过在现在一个快速的社会节奏下，留点时间给自己，或许是每个人的生活必修课，紧张感的释放，就是快乐的源泉。如果要想获得持久的快乐，那就去追求更深层次的兴趣，比如爱、成长、超越自己、快乐、助人、宁静。</p><p>还记得看过的星座描述吗？是不是觉得自己的星座还挺准，又或是感觉每一个和自己都挺像，这就是不同的心智模式，这决定了我们想要看到的世界。我们一直都在按照自己过去的经验和记忆，处理我们看到的部分世界，然后在我们脑子里面构建一个自己的世界。</p><p>当手里有一个水杯，你会做什么呢，去接杯水？打杯咖啡？其实这些都不重要，杯子本身也不重要，只有我们要杯子作为工具的需求时，杯子才有价值，不要让杯子约束了自己的生命。如果我们都能这样主动去升级我们的心智模式，在混沌-察觉-觉醒-超越中不断迭代，我们就能拆掉原来思维里的墙，距离成功越来越近。同样，就像在职业选择中，给自己留出一点混沌，察觉的空间，或许能找到更适合的工作。</p><p>读完这本书，古典老师在书中提到的快乐的源泉是紧张感的释放对我影响颇深，同样，书中对幸福的解释也让我眼前一亮，我们通常觉得幸福是一种状态，就像我们经常会问别人，你幸福吗，或是被别人自己幸福吗，其实幸福不是一种状态，它是一种转换力，理解这个，就能理解为什么有人觉得一屋两人三餐四季就是幸福，有人觉得日出而作日落而息的规律是幸福，有人觉得朝九晚五九九六的充实是幸福。幸福和物质没关系，和状态也没关系，不过是他们对世界的转换力。</p><p>除了心智模式，生活中还有有一堵很厚的墙，是秤，市场的秤，成功系统的秤，人性的秤，我们经常被这些秤压的喘不过气来。因为这些秤，让我们怀疑价格和价值到底谁更重要，让我们把感情放到了交易的天平上，让我们在工作和生活中迷失了自己。</p><p>整体来说，这本书还是很有感染力，它带领我们打破固有思维局限，升级心智模式，打造生命三脚架，让我们成为一个快乐、有趣、幸福的人。 </p><hr><p>◆ 一套房子消灭一个梦想</p><p>作者举例都是成功的案例，放在普通人来说，买房或许已经是不错的投资，以那时30万买房来说，现在或许已经超过了1000万。古典在这里举例只是想说明投资自己比投资房产更值得，如果还房贷已经要把自己掏空，每个月几乎没有剩余现金流，那就等一等。如果一个月房贷还不足收入的20%，那不妨也可以为自己增加一个房产投资策略，更何况现在一般情况下，还有住房公积金。</p><blockquote><p>为什么是50万元？因为当时的《公司法》规定，要注册必须是50万元。马化腾的股份是47.5%，也就是23.8万元。1998年，深圳市平均房价在3000元左右，应该可以购买一个约80平方米的房子。当年的马化腾作出一个不错的选择：不买房，买梦想。</p></blockquote><hr><p>◆ 职业安全感奴隶</p><p>我们都是被安全感囚禁的奴隶，这比舒适区的说法更能让人引发共鸣，多数情况下我们都知道，现在的环境并不是舒适区，只是能给我们提供安全感，一旦跳出去，就会有非常多的不确定性，在这种不确定下，更愿意做一个被困住的奴隶。</p><blockquote><p>这又是一个被自己的安全感囚禁的人。我们往往被几个信念囚禁一生。</p></blockquote><hr><p>◆ 关于“爱”的三个误会</p><p>放把自己的付出，看成是为了获得某种回报，那就只能算是交易，喜欢，情谊都说不上，更别说是爱。这可能有点苛刻，不过现实似乎就是这样，我们经常把依赖与被依赖理解成爱，把置换理解成爱，把占有理解成爱。</p><blockquote><p>有没有过这样的情况？你发一条短信给你的女朋友，说“小红，我好爱你！”但是发过去一点消息都没有，于是你开始着急，一分钟看三次手机……</p></blockquote><hr><p>◆ 为什么美女大多不认路</p><p>这就是用进废退原则，为什么美女大多不认识路，因为她们总会有人肉GPS，不需要认识路，久而久之，自然不认识。而且她们经常被别人贴上不需要认识路的标签，如此以来，不认识路就变得理所当然，说女司机开车马路杀手亦是如此。</p><blockquote><p>有没有观察到一个好玩的现象？</p><p>在我们身边的美女，大多数都不太认路。不过，这些美女一般也不需要认路，因为她们一般有其他人接送，很少自己开车。即使要开车，她们往往也会有一个GPS，但一旦这个GPS没有电或者找不到信号，她们就彻底崩溃了！</p></blockquote><hr><p>◆ 6招快速提升安全感</p><p>小范围冒险，失败了也无所谓，只是让自己知道其实还有更多的可能，虽然突破的只是一点点，带来的却是对思维、标签、禁锢的不一样的理解和认识。</p><blockquote><p>在安全的环境下，小范围地冒一冒险吧！这是一个对你那些“思维之墙”很好的试探，看看它们是不是只是看上去坚固，其实虚弱？</p></blockquote><hr><p>◆ 必问自己的两个触底反弹问题</p><p>这里的问题太棒了。面对恐惧，触底反弹，看起来有点文绉绉的，但看到这个案例有了一点感觉。同时想到克里斯坦森再创新者的窘境中提到的破坏性创新，破局点怎么来，那就问自己一个问题。如果我失败了，新来的家伙会怎么做。</p><blockquote><p>请记住问自己格鲁夫的两个触底反弹问题：</p><p>如果我失败了，新来代替我的那个家伙，他会怎么办？</p><p>既然这样，为什么我们不这样去做呢？</p></blockquote><hr><p>◆ 投入的快乐是无条件的</p><p>从过程中体验快乐，结果什么的并不用特别在意，这有点像毒鸡汤。在这个迅速迭代的社会，如果目标不明确，随波逐流的状态，很可能会被迅速拍死在沙滩上。不过稍微换一个角度，社会节奏让很多人的生活压力越来越大，留点时间给自己，今天的努力是为了明天的快乐，何不让今天也稍微快乐一点呢。</p><blockquote><p>任何一个瑜伽教练都会告诉你，即使认真地投入你的呼吸——这个每天你做过无数次的事情——都能感受到无数的乐趣。</p></blockquote><hr><p>◆ 无趣之人，往往是无胆之人</p><p>无趣之人，并非无能，只是无胆。有道理，不过为什么无胆，孩子天生对这个社会是好奇的，导致无胆一定程度上受到了生活环境和教育的影响，对于父母来说，让孩子在安全区域内冒险，对孩子成长来说非常重要。对于成人来说，过去成长环境已经不可改变，现在又安全区域太少，冒险成本太高，要想有趣，不妨先成为一个善于发现乐趣的人，成为一个有移情、共情能力的人。</p><blockquote><p>“无趣之人”，往往不是无能之人，而是无胆之人。</p></blockquote><hr><p>◆ 第三章 心智模式决定我们的命运</p><p>是金子总会发光？当然不是，金子只有成为金矿才有被采挖的价值，经过碾磨、冲洗才能达到一定的纯度，经过打磨、抛光才能真正发光，经过再次成长才能成为真正有价值的金子。所以不要相信那些所谓的是金子都会发光的谎言，散落在尘粒中的金子不会发光。</p><blockquote><p>如果你是金子，你要提高你的含金量到一定程度，才会成为金矿。当你被挖掘出来，你要经过很痛苦的碾磨、冲刷、浸泡，要让你身上的杂质，不好的习惯、污点被熔掉。然后还要成型、打磨、抛光，最后才成为很有价值的发光的金子！</p></blockquote><hr><p>◆ 关于心智模式的几个观点</p><p>心智模式的多样性可能决定自己是否能成为一个有趣的人，是否能拥有有趣的生活。每一种心智模式在变化的世界上来说都是有局限性的，陷入某一种心智模式，也就无疑成为了心智模式的奴隶。</p><blockquote><p>外界变化了，内心的心智模式就要改变，思维方法和心态要变化。今天这个世界，唯一不会改变的就是改变。按照外界的条件变化，升级你的心智模式，就是这本书希望告诉你的东西。</p></blockquote><hr><p>◆ 拆掉思维里的墙</p><p>牛、草、猴子，分两类的时候，真的只有联系和属性两种心智模式吗？难道不会因为牛和和草都在前面吗？如果顺序变成“猴子、牛、草”，或许把猴子和牛分类在一起的刺比例会更高呢。</p><blockquote><p>如果让你把“牛、草、猴子”三件事物凭第一感觉，迅速分成两个小组，试试看，你会怎么分？</p><p>东方人倾向于选择“牛、草”一组，“猴子”一组，原因是“牛会吃草”。</p><p>美国人则更加倾向于选择“牛、猴子”一组，“草”一组，原因是牛、猴子“都是动物”。</p></blockquote><hr><p>◆ 如何超越我们的心智模式</p><p>不确定这是否能让心智模式升级，毕竟用火车举例真的是太简单。不过混沌-察觉-觉醒-超越的这个过程还是挺唬人的，这几个词都会写，可如何实现呢，并没有那么简单。</p><blockquote><p>你有没有坐过火车？当从窗口看到对面火车动的那一瞬间，你是不是以为自己的火车走了？（不知不觉—混沌）。然后你转过头，看到另一侧窗口的站台并没有动，然后你知道，刚才的是幻觉（后知后觉—察觉）。等到下一次你看到对面火车动的时候，你能够马上意识到也许是它们在动，而不是我在走（当知当觉—醒觉）。这样的经验多了，你对面停着一辆车的时候，就会知道，一会儿对面车开的时候，也许会出现那个幻觉——先知先觉，这个时候，你已经超越自己的心智模式了。</p><p>混沌—察觉—醒觉—超越四个步骤，是心智模式升级的必经之路。</p></blockquote><hr><p>◆ 独孤求败下江南</p><p>独孤求败是成功还是失败并不重要，定义它成功还是失败对我们的生活并没有什么指导价值，毕竟现实不同与武侠，基本上不会有人能打败所有高手。不过这为我们指明了一个制定人生终极目标的方向，如果目标是达到一个职位或是获得一定数量的金钱，当没有达到目标时会焦虑，当达到目标后或许会更焦虑，就这是达到目标后的失落感，就像古典老师在前面说的，我们的快乐来源于紧张感的释放，释放完了就体会不到快乐了。所以把目标定成爱、成长、超越、助人、宁静，或许能收获更多快乐。</p><blockquote><p>有打败对手，才叫成功，而独孤求败却没有对手，所以他最后郁郁而终。</p><p>这个人是成功还是失败？</p></blockquote><hr><p>◆ 成功，就是越走越近</p><p>成功是什么，是越走越近，success这个定义简直是太妙了。一个没有目标的人不会成功，也体会不到达到目标后那种紧张感释放的快乐，因为他都不知道往哪里走，当然不能越走越近。期望越高，失望越大，似乎也可以这样解释，并不能否定为了达到期望付出的努力，只是距离太远了，感知不到与目标的越来越近，紧张感无处释放。</p><blockquote><p>成功的真正本义应该是：越走越近。</p></blockquote><hr><p>◆ 你现在就很成功</p><p>虽然有鸡汤的嫌疑，但真的很喜欢这句话。如果把成功的定义放在外界，那自己的天花板就一定会成为别人的地板，当然自己现在拥有的或许也可能是别人思考的天花板，我们会一直处于得到前的恐惧和得到后的空虚的焦虑之中。</p><blockquote><p>当你把成功的定义放在外界，你会把自己陷入一种不可控的焦虑，一种得到前恐惧、得到后空虚的生活当中。你的天花板是别人的地板，而你总在向上看，从来没有留意过窗边的风景。</p></blockquote><hr><p>◆ 职业选择的一见钟情、两情相悦和白头偕老</p><p>趣味的三种境界，兴趣，乐趣，志趣。这个递进过程很有趣，兴趣可以丰富而短暂，乐趣来源于更持久的兴趣，志趣则是可能陪伴一生的存在。用下面这个比喻实在是妙，一见钟情很多人，两情相悦一些人，白头偕老一个人。</p><blockquote><p>兴趣有三种境界：兴趣、乐趣和志趣。</p><p>兴趣是让你好奇的东西，让你觉得可以尝试一下。兴趣被快乐地强化以后，就会成为乐趣。</p><p>乐趣会让你在其中获得快乐，也让你可以快乐地进入其中。</p><p>志趣会让你在其中找到自己的价值，让你觉得你可以投入一辈子。</p></blockquote><hr><p>◆ 如何找到最适合的工作——这样选择职业不后悔</p><p>选择的模式，以前知道优于前37%的就可以选择，但是从来没有细想这意味着什么，原来我们每一次选择都需要给自己一个不做选择，仅做观察的空间和底线，这是进入未知领域最好的实验。</p><blockquote><p>我们生活中的选择也是一样。打破“后来”模式的最好方法，就是在进入未知领域的时候，给自己一个不做选择、观察的空间和底线，在这个之前，不要作选择的决定，一旦过了这个底线，就大胆地开始选择。这就是最好的“选择”模式。</p></blockquote><hr><p>◆ 什么是一个好的职业规划</p><blockquote><p>下面是关于一个好的职业规划的几个建议：</p><p>1．应该有一个20年的梦想，尽可能大一些，尽可能抽象一点。因为你知道20年是很长的时间，可以发生任何事情，这个计划主要以你的梦想为主。</p><p>2．给自己一个不超过10年的理想，这个计划主要以培养和发展你的核心竞争力为主。</p><p>3．瞄准一个5年内能达到的目标，细分成为3年的职业计划。详细地了解你和这个职位的差距。这个计划以务必达成的执行为主，同时给自己一个PLAN B。</p><p>4．把你的规划保留下来，每隔一个月看一看，让自己保持进度。</p><p>5．每隔半年停下来回顾你的计划。</p><p>6．对新的机会和趋势永远保持警醒。</p></blockquote><hr><p>◆ 不要为一个水杯约束你的生命</p><p>不要为一个水杯约束了自己的生命。看到这个标题本来想了两个场景，第一，一杯水和半杯水的人生态度，第二，想喝什么就用水杯装什么的目的导向。但古典老师这里给出的答案让我真正意识到什么是水杯约束了生命，当需要装水的时候，水杯是一个工具，但更多时候，不要让水杯成为自己探索更多可能的枷锁。</p><blockquote><p>在2006年的一次职业规划师的交流会上，我问了在座所有人一个问题，如果一个人手里拿着一个水杯，他下一步最好的选择是做什么？</p><p>有人说应该去装水，有人说应该分享给别人，有人说应该分析自己，用最好的方式来利用水……</p><p>你的答案是什么？</p><p>我告诉大家，一个人手里拿着水杯，他应该去做自己想做的事情，和水杯有什么必然关系？</p></blockquote><hr><p>◆ IMPOSSIBLE和I’MPOSSIBLE：你离成功只差一点</p><p>漂泊者知道自己不想要什么，而航行者是知道自己想要什么。结局的差异显而易见。面对困难，不是只有战胜和逃避两种可能，不妨静下来思考，这是我离成功更近一步的优选道路吗？</p><blockquote><p>航行者最终能走出去很远很远，穿过那些风暴，走到自己想去的地方。漂泊者则被梦想诅咒，一辈子胡乱漂泊在海上。</p><p>IMPOSSIBLE和I’MPOSSIBLE只差一点，那一点就是你心中真正的目标。</p></blockquote><hr><p>◆ 你有没有去过受害者天堂</p><p>每个人做事都需要一个理由，这个理由可以让做一件事变得心安理得，而这个理由到底能不能站住脚并不重要。所以当让别人做一件事的时候，一定要说一个理由，这样成功的概率会大很多。</p><blockquote><p>你有没有发现，很多做坏事的人都拥有一个完美的受害者故事，这让他们做坏事的时候心安理得。</p></blockquote><hr><p>这种非常可怕，受害者天堂的人乐于在你面前给自己一刀，然后让你为这一刀负责，如果不负责，那就再加一刀。这和常说的道德绑架还不同，反而有点像边缘性人格障碍的人性特点，我恨你，但别离开我。</p><blockquote><p>看到了吗？受害者母亲先是插自己一刀，然后要求女儿为这一刀负责。如果稍有迟疑，就再给自己来一刀——不信你不听！这就是受害者最高级的“葵花宝典”。</p></blockquote><hr><p>◆ 第七章 幸福是一种转换力</p><p>父母通常是一个孩子生命路上最大的助力，他们是孩子认识世界的眼睛和参考标准，让孩子的成长事半功倍，但如果孩子只是在过着父母写好的剧本，活成父母想象的样子，也有可能是最大的阻力。</p><blockquote><p>你不妨把自己的梦想想象成一家上市公司的董事会，你和你的父母对于“你”这个公司都有一定的发言权。他们占有一定的股份。他们有权利发言，有权利表达观点，而你也有义务认真倾听、考虑。但记住在关于你人生的董事会上，你永远是最大的股东。</p></blockquote><hr><p>◆ 我爽-父母不爽的双赢模式</p><p>我爽但父母不爽的模式并不一定是双赢的，这种情况下必定会产生矛盾，而且谁也不敢说这种矛盾会持续多久，可是面对这种矛盾本身不就是一种双输吗。只是古典老师在这里希望强调的是跳出父母的剧本，活出真正的自己。而且要停止父母的质疑，最好的方法是行动起来，让他们知道自己的选择是正确的。</p><blockquote><p>所以让你的父母停止质疑的最好方式，就是尽快开始你的行动，然后用事实证明给他们看！</p></blockquote><hr><p>◆ 做自己，还是演自己</p><p>经常会有人问别人，问自己，幸福吗？他们认为幸福是一种生活的状态，其实不然，幸福是一种将物质转化为开心、快乐的能力，明白这个，就能理解为什么有人觉得一屋两人三餐四季就是幸福，有人觉得日出而作日落而息的规律是幸福，有人觉得朝九晚五九九六的充实是幸福。幸福和物质没关系，和状态也没关系，不过是他们对世界的转换力。</p><blockquote><p>如果你觉得你的生活出了问题，也许并不是因为你赚得不够多，名声不够大，而恰恰是因为你缺乏一种把物质转化为幸福的能力。</p><p>幸福是一种转换力。</p></blockquote><hr><p>◆ 与其在等待中枯萎，不如在行动中绽放</p><p>行动会让我们安定下来，即使没有想好怎么做，也得先让自己动起来，在行动中不断迭代，有可能到达不了终点，也能欣赏一些沿途的风景，只是要有目的性的尝试和行动，不要一味的成为漂泊者，要成为航海家，而且航海家就算不知道该怎么走，至少知道方向。</p><blockquote><p>与其在等待中枯萎，不如在行动中绽放</p></blockquote><hr><p>◆ 因为贵，所以好吗——价格与价值这笔账</p><p>这个有意思，买一件衣服，到底是因为喜欢衣服的款式、色泽，还是因为它的贵，即使自己不喜欢，因为它的价格，感觉自己也应该喜欢，如果不喜欢，显得自己似乎没有品味。这样一看单纯看价格不看价值的人内心似乎是有点扭曲，可是事实真是这样吗，不排除上面的说法有道理，不过有时候也得想一想为什么价格这么贵，难道真的不是因为自己品味不够吗，在无人的时候检讨一下自己，或许能让自己成长起来，毕竟这个社会的评价体系还是大众或有权势的人说了算，只是活在自己的世界里没有太大意义。</p><blockquote><p>——你这件衣服不太衬你哦。</p><p>——不会吧，这个可是名牌货，两千多块钱呢！</p></blockquote><hr><p>◆ 感情是不能放在秤上面称的</p><p>生活是无法用成功系统的东西来量化的，成功系统常有统一的检验标准，最不济，市场、经济、优胜劣汰会给予最严酷的反馈。可生活不然，每个人对生活都有自己的理解，只有立场的差异，没有绝对的优劣。</p><blockquote><p>《蜗居》的编剧六六说：感情是不能够放在秤上面称的。</p><p>其实她在说，有很多东西属于幸福系统：梦想、爱情、成就感、贡献……这些东西是无法用成功系统的东西来量化的。一旦你开始用金钱来代表成就，用价格来代表爱情，用秤来称感情，生活的幸福被你毁灭，是理所当然。</p></blockquote><hr><p>◆ 给残酷世界的温暖规划</p><p>生命三脚架，我们经常会说职业和家庭要保持平衡，可是似乎在这个平衡的过程中忘记了我们自己，静下来想一想，今天所有做的事，哪些是为了工作，哪些是为了家庭，又有哪些是为了自己，有时候难以平衡职业和家庭的冲突的时候，让自己也成为独立的局中人，或许能得到不一样的答案。</p><blockquote><p>其实我们的生命也是一样，我们的生活也由三个支架组成：自我、家庭与团体和职业。这样的支架支撑着我们的灵魂，它在记录我们的生命。</p></blockquote><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 思维 </tag>
            
            <tag> 快乐 </tag>
            
            <tag> 古典 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《创新的本能：类比思维的力量》</title>
      <link href="2021/01/02/chuang-xin-de-ben-neng-lei-bi-si-wei-de-li-liang/"/>
      <url>2021/01/02/chuang-xin-de-ben-neng-lei-bi-si-wei-de-li-liang/</url>
      
        <content type="html"><![CDATA[<p><strong>《创新的本能：类比思维的力量》，约翰·波拉克著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>作者真不愧是总统撰稿人，每一个主题都铺得非常大，或许这就是格局，看这本书最大的收获是进一步确信了类比的重要性，而且从更加底层的视角理解类比，用本书的观点总结类比思维，那就是用一个连贯的故事强调熟悉的事物与不熟悉的事物之间的相似性来识别对自己有利的抽象概念以唤醒情感共鸣。</p><p>本书举了非常多类比的例子，小到沙滩里藏沙、多米诺骨牌、桌面上的鼠标，大到印刷术、万维网、流水线、飞行器，这些例子不止为读者打开了类比思维的窗，还提供了好类比的参考标准，一个好类比能带来超凡的积极影响。</p><p>本书给出了类比的本质，这帮助我们如何构建一个好的类比，也帮助我们识别不好的类比，同时也帮助我们避免被别人设计大类比牵着鼻子走。</p><p>1.用熟悉的事物解释不熟悉的事物；</p><p>2.强调相似性，隐藏差异性；</p><p>3.识别有用的抽象概念；</p><p>4.讲述连贯的故事；</p><p>5.唤起情感共鸣。 </p><p>16个笔记</p><hr><p>◆ 第1章　从苹果到橘子：类比本能激发思维</p><p>我们在平常已经默认会使用很多看似显而易见的类比，就像这里的火箭、僵局、拥抱，不过很少把它们拆解出来，这种拆解，可能会让我们的类比思维更加接近本质，类比也会越来越高级。</p><blockquote><p>“今天的股市如火箭般上涨，因为操盘手欣然看到美国国会打破几个月的僵局，热烈拥抱两党制订预算计划。”</p></blockquote><hr><p>◆ 找到我们的路</p><p>这种类比应该全是比较高级的类比了，通常的类比是平行的，比如把A比作B，要么A和B都是具体的，要么A和B都是抽象的，把具体的狼来了抽象成说谎，把抽象的得到不到的沮丧，具体成狐狸眼中的酸葡萄，这种抽象需要很好的归纳演绎能力。</p><blockquote><p>《伊索寓言》中“男孩谎称狼来了”的故事被缩短为类比表达“狼来了”。在另外一个寓言“狐狸与葡萄“中，一只狐狸因为够不到成串多汁的葡萄而非常沮丧，不管它多么努力，始终摸不到悬挂着的葡萄。最后，狐狸宣称这些葡萄看上去是酸的，后人把这种情绪转换成“酸葡萄”的表达。</p></blockquote><hr><p>有什么样的头脑，就有什么样的类比，这不确定是否在讽刺那些比喻马桶圈的人，不过这也的确是一个事实，手里有一把扳手，看什么都像螺丝钉。</p><blockquote><p>“许多人说‘嗨，是罗伊·布朗的错’。”在埃德塞尔汽车失败后的数年，布朗告诉采访者，“我是在执行命令，我做得很好。”然而，他叹了口气说：“是人们有马桶座圈的头脑。”这就是类比思维的本能。</p></blockquote><hr><p>◆ 第2章　三振出局：类比塑造结果</p><p>三振出局，用美国人熟知的棒球运动来类比，这能引起广大民众深深的共鸣，只是如果要以这个类比来作为量刑标准，可能就不是那么容易了。</p><blockquote><p>正如时任纽约州州长的马里奥·科莫所言：“在棒球赛中，三振出局。在对付暴力罪犯中，就应该是：三次犯罪就要进监狱，且永远不得出狱。”</p></blockquote><hr><p>这就是类比的力量，类比能让人们接受一个原本不是那么明确的观念，而且深信不疑，但是与此同时，类比也带来了很多不必要的信息，为原本的事实赋予了更多的内容，这就导致用不同的观念来类比战争，会导致战争的不同结局。</p><blockquote><p>很快，反对者迅速猛烈抨击对这个战争的定义，他们认为这是从战争中退缩的表现。“总统今天的演讲将被恐怖分子看作一次胜利。”乔治亚州共和党参议员萨克斯比·钱布利斯说。或许他说对了，但这也表明了美国人开始从自己建构的这个糟糕的类比中醒悟过来，而这次醒悟本身就是一种胜利。</p></blockquote><hr><p>◆ 口红经济</p><p>又一次认识有备无患，武装自己的目的不是为了遇到灰熊时的战斗，更多的是给灰熊传递一种威慑力，不战而屈人之兵，才是上策。</p><blockquote><p>既然无人能辨别真假，我们为何不把自己变得像灰熊一样强壮，以防真的出现大灰熊呢？”</p></blockquote><hr><p>用一个连贯的故事强调熟悉的事物与不熟悉的事物之间的相似性来识别对自己有利的抽象概念以唤醒情感共鸣。</p><blockquote><p>1.用熟悉的事物解释不熟悉的事物；</p><p>2.强调相似性，隐藏差异性；</p><p>3.识别有用的抽象概念；</p><p>4.讲述连贯的故事；</p><p>5.唤起情感共鸣。</p></blockquote><hr><p>这说明，有时候一个类比可能大家也并不是很认可，但是这个类比可以让自己希望的结果得到支持，为了自己的决定有更加丰富的理由，也就认可了，所以情感共鸣才是类比的真正目的，至于如果类比，如何寻找相似性，不过是寻找理由的过程。</p><blockquote><p>大多数把DNA当作指纹的类比也可能有另一个情感目的，即为维持对已知强奸犯的判决提供合理的理由，因而避免极可能因投票推翻对金的判决产生的厌恶感，这对各类案件审理的连锁反应遍及全国。</p></blockquote><hr><p>◆ 第3章　T骨模型：类比激发创新</p><p>我们一起一直学习到的是，哥白尼害怕他的理论被宗教教义反对，于是拖到自己的最后一刻才发表，其实换个角度（不一定正确），有可能宗教根本不会在意到哥白尼这一颠覆性的思想，而真正让这一思想影响到宗教地位的，可能是因为低成本到印刷术。</p><blockquote><p>在随后将近30年间，哥白尼不断探索并为他的著作《天体运行论》搜集资料。最终，在1543年哥白尼临终之时，这本著作得以出版。哥白尼害怕他的理论会因为与宗教教义相悖而遭到强烈的反对，但实际情况是罗马教皇和他的拥护者们丝毫没有理会这本书。当时，印刷机作为一种相对新的技术，把哥白尼这一革命性的想法传遍了整个欧洲。</p></blockquote><hr><p>◆ 砸断所有人的腿</p><p>这个类比看起来不是那么新颖，不过在商业世界里就是非常了不起的创新，流水钱式作业来源于屠宰场，却改变了后来上百年的工业发展，堪称一绝。</p><blockquote><p>克兰还是坚持自己的看法。就其核心而言，这个类比非常简单：福特公司可以制造专门的传送带让零件随着移动的组装线而移动，并让每个工人像屠夫一样，各自执行特定的任务。他曾在铸造厂工作过，那里的工人用传送带传送沙石；在啤酒厂，工人也是用传送带运送谷物的。汽车制造大同小异。</p></blockquote><hr><p>Speedo的鲨鱼皮泳衣被奥运会官方禁止，不是因为其的劣质，而是因为是不可比拟对创新突破，这无疑是对创新最大的尊重。</p><blockquote><p>2008年夏，在北京奥运会上获奖的游泳选手中，包括迈克尔·菲尔普斯在内的98%的游泳运动员都穿了特制的泳衣。后来官方认为穿上鲨鱼皮泳衣给游泳运动员带来了太多的优势，所以在以后的比赛中明令禁止使用这种泳衣。</p></blockquote><hr><p>◆ 第4章　美国的早晨：类比具有说服力</p><p>读到这里不禁心中一紧，类比的强大魔力可能会让自己被别人牵着鼻子走，当说服别人时，巧用类比很重要，这也是本书作者想极力说明的，不过另一方面也不得不重视，为了不被别人左右自己的思维，一定要分清对方类比时故意忽略的差异，当听到就像……，和……一样，如同……等字眼的时候，有必要提高警惕。</p><blockquote><p>在兜售这一给定的类比时，这种先入为主的有利条件有特别的优势。美国西北大学的心理学教授黛德·金特纳和她的同事做的研究表明，即便最简单的类比，也能创造“类比的介入效果”，听者把类比作为提供的现实，误以为是自己推理，这些推理甚至与他们以前的态度或信念不一致。称之为抵抗是徒劳的假设。</p></blockquote><hr><p>如果仅从类比来看，用熟悉类比不熟悉，强调相似忽略差异，识别抽象概念唤起情感共鸣，这几点已经可以概括类比的精髓，但为什么还要连贯的故事呢，连贯的故事不只是对于类比，对于表达任何一个观点都至关重要。连贯的故事能在不同的位置刺激到对方的思维，看似听起来就很自然的样子，也更容易让对方达到情感共鸣，从这个角度看，用熟悉类比不熟悉，本身就是为了讲一个连贯的故事。</p><blockquote><p>正如心理学家丹尼尔·卡尼曼指出：“连贯的信息对于好故事很重要，不完整的则不重要。的确，你会发现，知道的不多就更容易把你所知的与连贯的模式匹配。”正因如此，人们趋于夸张他们所遇到的事情的连贯性，通常会破坏准确性。</p></blockquote><hr><p>◆ 第5章　顾全大局：如何选择更好的类比</p><p>人们面对一个问题，并非需要一个完美的答案，只是需要一个自己可以接受的答案，只是希望唤起自己的情感认可，至于准确的答案是什么并没有那么重要，毕竟世界上本来就没有那么多准确的答案。</p><blockquote><p>卡尼曼认为人们容易快速做出判断的理由如下：当人们遇到一些本质上很难的问题，或者没有足够的证据做出合理的决定时，常常只会回答一个简单的问题，并且有一个答案就够了。这个替代的问题被称为启发式问题，与希腊词“eureka”属于同根词，意思是“我找到了”。</p></blockquote><hr><p>快读完这本书，看了很多例子，最后发现“看不见的手”是最经典的类比，是那么的贴切，用一只看不见的手解释市场规律，用我们最熟悉的事物类比看不见摸不着的事物，而且这个类比故事是那么的深入人心，以至于我们有时候真的会在意经济市场是不是真的在上帝之手控制之下。</p><blockquote><p>亚当·斯密的类比“看不见的手”具有微妙而持久的影响，该类比强调了选择框架的非凡力量。</p></blockquote><p>完 ~</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 创新 </tag>
            
            <tag> 类比 </tag>
            
            <tag> 约翰·波拉克 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《金字塔原理》</title>
      <link href="2021/01/02/jin-zi-ta-yuan-li/"/>
      <url>2021/01/02/jin-zi-ta-yuan-li/</url>
      
        <content type="html"><![CDATA[<p><strong>《金字塔原理》（麦肯锡40年经典培训教材），芭芭拉·明托</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>这本书为表达，思考，演示等多个场景提供了金字塔结构的思维方式和实操技巧。从SCQA（背景，冲突，疑问，答案），从纵向到横向，从自上而下到自下而上，从演绎到归纳，从时空顺序到主观判定，多个维度向我们展示构造金字塔结构逻辑树的思维技巧。金字塔结构看似并不起眼，但是作者为金字塔赋予了一个不一样的故事，这个故事和我们生活工作息息相关，从序言开始就丝丝入扣，带入感极强，这本身就是金字塔结构思维的完美演绎。</p><hr><p>◆ 前言</p><p>这里我关注的有价值信息是几点开会，主线只有这一个，其它事件是因此展开的，所以说明时间和简单原因就已经达到目的。而前一种表达方式的主线涉及到三个人和三个时间点的交集，还没说出具体结论，听者已经陷入了各个人物和事件的混乱之中了。</p><blockquote><p>今天的会议可以改在星期四上午11点开吗？因为这样对科林斯和约翰逊都更方便，唐克利福德也能参加，并且本周只有这一天会议室还没有被预订。</p></blockquote><hr><p>◆ 第1篇 表达的逻辑</p><p>增强受众的参与感。首先让受众了解主要内容，形成自己的想法，然后根据主题像剥洋葱般进行信息补充，激发探索欲，最后给受众一些发挥空间，加深印象。</p><blockquote><p>先从金字塔的最顶端开始，沿各个分支向下展开。首先表达的主要思想，使受众对表达者的观点产生某种疑问，而主要思想（金字塔结构中的）下一层次上的思想将回答这些疑问。通过不断进行疑问/回答式的对话，受众就可以了解文章中的全部思想。</p></blockquote><hr><p>◆ 归类分组，将思想组织成金字塔</p><p>就像机器学习中的降维，当特征向量太多时，将相关性较强的向量合并为一个向量，在尽量保留信息的同时降低模型复杂度，提高模型性能。</p><blockquote><p>你所要做的是提高一个抽象层次，将大脑需要处理的9个项目变成3个项目。</p></blockquote><hr><p>◆ 自上而下表达，结论先行</p><p>一句话的主谓宾定状表要明确，一个段落，一篇文章，一个报告，一场演讲，甚至一本书都是如此，主谓宾定状表就是他们的逻辑关系。</p><blockquote><p>无论读者的智商有多高，他们可利用的思维能力都是很有限的。一部分思维能力用于识别和解读读到的词语，另一部分用于找出各种思想之间的关系，剩下的思维能力则用于理解所表述思想的含义。</p></blockquote><hr><p>◆ 自下而上思考，总结概括</p><p>不止事物之间要进行抽象概括，逻辑关系也需要抽象概括，目的就是一个，不管是什么，尽可能的进行同类抽象，降低大脑负担。</p><blockquote><p>如果某组中的第一个思想是某项过程的一个步骤，那么该组中的其他思想也必须是同一过程中的其他步骤。</p></blockquote><hr><p>逻辑顺序需要大家所接受，否则无法降低信息传递的复杂性。主要有两类四个逻辑。放之皆准（时间，空间），人为定义（主观重要，客观演绎）。</p><blockquote><p>组织思想基本上只可能有4种逻辑顺序：</p><p>● 演绎顺序：大前提、小前提、结论</p><p>● 时间（步骤）顺序：第一、第二、第三</p><p>● 结构（空间）顺序：波士顿、纽约、华盛顿</p><p>● 程度（重要性）顺序：最重要、次重要，等等</p></blockquote><hr><p>◆ 横向关系</p><p>想到《思考，快与慢》中一个类似的例子（一个不合理的演绎）。所有的玫瑰花都是花，有些花会很快凋谢，因此有些玫瑰花会很快凋谢。看似简单的演绎关系并非简单的承上启下，需要有很强的逻辑依赖性，很多时候我们可能都懒得去想明白具体的依赖，导致很多我们自认为清晰的金字塔并不牢靠。</p><blockquote><p>● 所有的人都会死。</p><p>● 苏格拉底是一个人。</p><p>● 因此苏格拉底会死。</p></blockquote><hr><p>◆ 自下而上法</p><p>个人感觉这一步是最难，这是从0到1的过程，后面梳理要点的逻辑关系更像从1到n，很多时候不能构建好的金字塔就在于想不到很多关键的要点，然后就会写一堆自己也不是很清楚的但希望受众清楚的逻辑。如果要点能罗列出来，即使不串逻辑，受众也能接受一半。</p><blockquote><p>列出所有要点</p></blockquote><hr><p>◆ 序言的讲故事结构</p><p>这里存在的最大问题是逻辑混乱，平时写东西的时候也会经常犯这样的错误，觉得把所有的要点列出来，这样显得全面而专业，实则这样的写法可能都没有把读者带入自己的故事中，更别说让别人记住自己的观点。</p><blockquote><p>● 背景</p><p>● 项目组的方法原则</p><p>● 项目工作内容</p><p>● 如何组织计划</p><p>● 具体收益和效果</p><p>● 成功的前提条件</p></blockquote><hr><p>这句话好有意思，写多少不重要，重要的是目的，站在同一位置上。向别人表达自己的想法，目的不就是让别人接纳自己，和自己站在同一位置上思考吗？所以人腿应该多长，只要能站在地面上足矣。</p><blockquote><p>序言的长度应当是多少？人腿的长度又应当是多少？（答案是足以站在地面上。）序言的长度应当确保在你引导读者按照你的思路思考之前，读者和你“站在同一位置上”。</p></blockquote><hr><p>◆ 第5章 演绎推理与归纳推理</p><p>演绎是串联，下一层必须依赖于上一层，一旦某一层断掉，结论将不成立；归纳是并联，某一层断掉不会直接影响最终结论。所以话说回来，如果在特别严谨的论证上最好用演绎，所以在信息特别不完备的条件下最好用归纳。</p><blockquote><p>在金字塔结构中，位于演绎论证过程上一层次的思想是对演绎过程的概括，重点是在演绎推理过程的最后一步，即由逻辑词“因此”引出的结论。归纳推理是将一组具有共同点的事实、思想或观点归类分组，并概括其共同性（或论点）。在演绎过程中，每个思想均由前一个思想导出；而在归纳过程中则不存在这种关系。</p></blockquote><hr><p>◆ 演绎推理</p><p>终于为自己看不懂很多理工科类学术论文找到了一丝理由，因为它全部篇幅可能都是一个逻辑演绎的过程，而且疑问最后都不一定完全解答，哈哈，当然最主要的还是自己太菜了～</p><blockquote><p>如果读者必须读完十几页，才能找到演绎推理的第一步和第二步之间的关系，又必须再读十几页才能找到第二步和第三步之间的关系，那么读者就无法快速理解这次演绎推理。</p></blockquote><hr><p>◆ 时间顺序</p><p>什么样的问题是好问题，这里给出了一个观点，那些被作者遗漏的，但是逻辑关系中需要的问题才是好问题。有些只是为了满足自己的好奇或是为了彰显自己懂得多的问题可能在别人看来都是笑话。</p><blockquote><p>在检查作者思路时，如果逆向追溯到作者思路的源头，你就应该问一句：“人们应用该技术的方法是否有问题？”</p></blockquote><hr><p>◆ 结构顺序</p><p>脑图，思维导图，流程图等都是为了梳理自己的结构顺序（时间顺序），这种方法非常有效。因为当真正动笔之后，由于思维惯性，文章的递进与延展无法收放自如，很可能导致最后的结果一塌糊涂。</p><blockquote><p>结构顺序：</p></blockquote><p>结构顺序就是当你使用示意图、地图、图画或照片想象某事务时的顺序，如组织结构图、关键成功要素示意图等。</p><hr><p>◆ 总结句要说明行动产生的结果/目标</p><p>有时候为了让思路清晰，不管是并列式还是递进式，反正就是往结构图中怼，经常会出现感觉这种好像不对，换一种吧好像也不对，看似整个结构出来了，具体内容就是出不来。原来是有的压根就不应该往结构图中放，就像利益，目标，业务，不管是并列还是递进，如果不基于业务，对理清思路没有帮助。</p><blockquote><p>这一顺序确实没错，但是其结构图应该如图7-7所示：</p><p>图7-7 更清晰的结构图</p><p>你可以看到，我们现在将“利益”、“目标”和“任务”分别放在金字塔结构纵向的3个层次上，而不是放在同一个层次上，因为只有完成了“任务”才能实现“目标”，实现了“目标”才能获得“利益”。它们之间应该是因果关系。但是，这样划分对理顺思路没有什么作用。也许我们可以说，标明不同的抽象层次可以使我们了解各个层次上的行动步骤的类别。即，当我们看到这个结构图时，就能知道某个具体行动是属于“任务”、“目标”，还是“利益”。</p></blockquote><hr><p>作者这里说到明确的语言表达，此外还有一点也很重要，那就是共识。信息传递是一个加解密的过程，将自己的想法加密为语言，文字，图像等传递到对方进行解密，明确的表达能让加解密方式尽可能简单，但信息是否能成功传递还要看双方理解的密钥是否相同。</p><blockquote><p>使用明确的语言表达最终结果的必要性，无论怎样强调也不过分。除非你使用的语言达到了这一要求，否则你根本无法客观判断你列出的行动、步骤，是否包括了所有应当包括的步骤。</p></blockquote><hr><p>坚持以1，2，3罗列要点，以为这样可以让对方更容易理解自己，实则这才做完第一步，更难的是对要点进行层次抽象和结果概括，只罗列要点给对方留下太多的想象压力了。</p><blockquote><p>先用明确的词汇、语句表述各行动、步骤、流程等，然后区分不同的抽象层次，再直接从各行动、步骤、流程等总结概括出行动的结果。</p></blockquote><hr><p>◆ 找出各结论之间的共性</p><p>这段好厉害，有种从n到1，从1到0，从0到1的感觉。从很多信息中提炼类（n−&gt;1），从类中找到逻辑（1−&gt;0），从逻辑中进行创新（0−&gt;1）。</p><blockquote><p>要记住：如果你无法在一组被列为“问题”、“原因”或“结论”的思想中找出明确的逻辑关系，就像上面这个例子一样，那么这一组思想中必定存在问题，你也必须重新进行思考。</p></blockquote><hr><p>上学时第一次接触SWOT分析法就对这类分析的效果有所怀疑，罗列出来并不能得到解决问题的方法，要点的多少也并不能直接说明因素的强弱，最后很有可能就是一个缺乏思想的结论。不过作者这里似乎也没有给出进一步的思考方式，可能是作者给出了但我还没领悟到。</p><blockquote><p>因此什么？这次推理无法得出结论。因此就算了？因此花大本钱也要进？还是因此要请我们制定一个谨慎的战略？这个例子再次说明，人们在难以得出明确结论的时候，很容易写一句“缺乏思想”的句子应付了事（如本例），而不是努力完成自己的思路。</p></blockquote><hr><blockquote><p>● 这些思想都具有某种共性，而且是以这种方式相互关联的仅有的一些思想。</p><p>- 在这种情况下，该组的概括性思想，应当是该组思想的共性所隐含的意义。</p><p>● 这些思想都是为实现某一结果而必须同时采取的行动。</p><p>- 在这种情况下，该组的概括性思想，应当表明采取以上行动后产生的直接结果。</p></blockquote><hr><p>◆ 发掘读者的疑问</p><p>这就像前文说过的，序言的目的是为了让读者和自己站在同一位置上，如果某些疑问读者已经有了一定了解，甚至已经是社会共识的条件下，就不要一味的追求精细从零开始了。</p><blockquote><p>一些作者犯的严重错误，就是在写文章时，不能确定读者是否已经采取了措施。其实，如果知道读者采取措施的时间，以及该措施是如何影响文章要回答的疑问的，将大大简化序言的写作以及以后的推理过程。</p></blockquote><hr><p>当向领导汇报一个问题的解决方案时，我们经常会拟定多个方案ABC让领导选择，但由于信息不对称，上下级之间存在较大博弈空间。比较好的方式可能是给出ABC方案的同时给出方案的归纳/演绎核心，不一定要让领导重新走一遍出方案的过程，但需要让领导的洞察力派上用场。</p><blockquote><p>确定了好几个解决方案，但不知道选哪一个。</p></blockquote><hr><p>◆ 开始写序言</p><p>一个有意义的备选方案应该需要有出方案者定义的对比权重或条件概率，一个明知道会被否定的方案除了会耗费大家时间外没有太大意义，甚至不能作为一个好的A/B测试样本。</p><blockquote><p>备选方案一般归在冲突项下。不要一一列出所有的备选方案，除非读者事先已经知道，否则读者会误把它们当做选择某种解决方案的原因。尤其要避免把备选方案罗列出来，然后否定。</p></blockquote><hr><p>◆ 设计诊断框架</p><p>如果能把所有的要素都列出来，那么问题分析就不会那么难了，实际情况中很多要素是无法穷举的，有时做了很多“有意思”的分析，然而并没有什么用，作者这里提出先做框架的方法很有效，这样能专注于能解决问题的路径，降低问题复杂度。</p><blockquote><p>诊断问题的第二种方法是寻找具有因果关系的要素、行为或任务，得出最终诊断结果。</p></blockquote><hr><p>◆ 突出显示文章的框架结构</p><p>看实际交通场景，红灯停，绿灯行，白色斑马线，黄色实线，黄色虚线，白色实线，白色虚线……，这些都是为了培养用户的共识，降低迁徙的学习成本。报告也是一样，如果刚培养好受众对“问题”的排版理解，接下来相同的排版变成了“结论”，可能就有点蒙圈了。</p><blockquote><p>每一组思想都是同一类的思想，为了强调这种一致性，一组中的所有标题应该采用同样的句子顺序，即对仗。所以，如果一章中，第一节的标题中第一个词是动词，该组其他各节标题的第一个词也应该是动词；如果第一小节的标题中第一个词是名词，其他各小节标题的第一个词也应该是名词，</p></blockquote><hr><p>◆ 设计图表PPT幻灯片</p><blockquote><p>第三篇探讨的所有方法，包括界定问题、诊断框架和逻辑树，都有双重功能。一方面，使解决问题的系统性工作变得更加容易，使你能专注于客户的真正问题，找出产生问题的所有原因以及相对应的解决办法。另一方面，大大减少了在最终报告里组织和交流思想的工作量。它们采用的逻辑结构是构成结论和建议的基础，可以轻而易举地转换成金字塔的形式。</p></blockquote><hr><p>◆ 把图像复制成文字</p><p>就像思考快与慢中的观点，我们的思维其实一直都很“懒”。从儿时开始我们就喜欢听故事，因为故事中逻辑是连贯的，不需要过多的思考就能被自然带入。要让别人认同自己的想法，就要让别人像听故事一样被自然带入，当对方和自己同步思考，就已经成功了一半。</p><blockquote><p>做到条理清晰的有效方法就是，强迫自己想象各种思想观点之间的内在关系。头脑里有了清晰的图像后，就能立刻把它转换成清楚的句子，读者也能马上理解和吸收，并在记忆中以图像的形式储存知识。</p></blockquote><hr><p>◆ 在无结构情况下解决问题的方法</p><p>细思极恐，如果没有力，速度，加速度，功这些概念，我们的思维世界会是什么样。想象回到那个时代，我们也仅仅知道力产生速度，当看到发射出去的炮弹，是不是会相信有上帝之手在推动。幻想一些东西从我们的认知地图中抽离，真的挺可怕。</p><blockquote><p>通过伽利略和炮弹的故事，我们可以更清楚了解这种方法：</p></blockquote><hr><p>◆ 序言结构范例</p><p>福尔摩斯说排除所有的不可能，剩下的那个再不可思议也是事实。单独从逻辑上看这并不是正确的推理，因为剩下的那个可能也不是事实，事实不需要其他反衬。（当然福尔摩斯的前提是所有的不可能）</p><blockquote><p>解决这个问题有3种可能的方法：A、B、C</p><p>方法A不好，因为……</p><p>方法B不好，因为……</p><p>因此，采用方法C。</p><p>事实上，采用C方法的理由并不是因为A和B不好，而是因为C能解决问题，根本没有必要提及A和B。</p></blockquote><p>完 ~</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 表达 </tag>
            
            <tag> 思考 </tag>
            
            <tag> 芭芭拉·明托 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《学点法律,避点坑：有趣有料的法律科普》</title>
      <link href="2021/01/02/xue-dian-fa-lu-bi-dian-keng-you-qu-you-liao-de-fa-lu-ke-pu/"/>
      <url>2021/01/02/xue-dian-fa-lu-bi-dian-keng-you-qu-you-liao-de-fa-lu-ke-pu/</url>
      
        <content type="html"><![CDATA[<p><strong>《学点法律,避点坑：有趣有料的法律科普》，隋兵著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>本书中的法律案例写得非常贴合实际，很多场景中甚至可以拿来就用，我们谁也不想摊上法律纠纷，但有时候也真说不准，学点法律是为了保证自己权利的同时，还可以心平气和的与流氓讲话。</p><p>本书中的案例包括。看似不近人情的法律漏洞，实则另有深意；如何避免不必要的财产损失；如何心平气和的与混混讲话；给家庭琐事一把法律的标尺；职场中一些陷阱和维权手法；消费者维权的场景与规定；以及住房这一特殊商品的保卫战。</p><p>偏工具尝试类的书，你看完以后，可能很难像别人描述书中讲了什么，更别说再回忆起书中的每一个案例，但是有一个好处，当后面遇到类似的情况，脑海中会马上浮现除似曾相识的感觉。每个人的精力有限，不可能熟悉每一个领域，但是了解更多的知识维度同样重要。 </p><hr><p>◆ 人贩子为何不一律判死刑？</p><blockquote><p>如果不分轻重一律死刑，那么人贩子可能会产生更加邪恶的想法：</p><p>“反正拐一个也是死，拐两个也是死，那就多拐几个吧，赚够本。</p><p>反正拐了人就死刑，打死几个、打残几个也就无所谓了。</p><p>既然拐了人就死刑，就是死也要抵抗到底，绝对不能被抓。”</p></blockquote><hr><p>◆ “疑罪从无”是让坏人逍遥法外吗？</p><blockquote><p>法律的制定是和时代、科技水平、社会发展程度密不可分的，被我们误解的“疑罪从无”实则有着更深层意义的社会公共管理的需要，从这个层面上讲，法律真的很委屈。</p></blockquote><hr><p>◆ 知识产权制度是让少数人合法地“垄断”知识吗？</p><blockquote><p>如果你是一个科研人员，百思不得其解的技术难关一直无法攻破，那么查询别人的专利细节后，可能会茅塞顿开；如果你是一个哲学爱好者，困扰多时的理论问题无人解答，翻阅了别人出版的著作后，也许就会顿悟。从这个意义上来说，知识产权的“公开性”不但没有让少数人垄断知识，反而是强迫他们向社会共享知识。</p></blockquote><hr><p>◆ 破产制度是老赖“逃债”的利器吗？</p><blockquote><p>除了止损的价值和重生的希望外，如果从社会整体层面考虑，破产制度也是有积极意义的。在没有破产制度的年代，创业者在摸爬滚打的初期，一旦经营失败，会背负一生的债务压力。创业成为一项风险极高的商业活动，大家的态度也就自然而然的慎之又慎。长此以往，“大众创业，万众创新”的局面也就无从谈起。</p></blockquote><hr><p>◆ 程序正义有价值吗？为什么宁可结果错误也要程序合法？</p><p>有法可依，就是一种程序正义，不管正确与否，至少程序合法。即便出了差错，也不是个人主观色彩导致，当一个程序被大家认可，其正确与否还重要吗？</p><blockquote><p>在当时当下，程序正义不一定是最好的，但一定不是最坏的。在技术发展到能让人类通晓过去、预知未来之前，程序正义还是我们的第一选择。</p></blockquote><hr><p>◆ 幼童、精神病患者杀人为什么不处罚？</p><p>“法”的目的在于教育，不在惩罚，如此一来，对于幼童和精神病人，就没有罚的必要性，所以对于幼童犯罪，常为“以教代罚”。不过这也的确降低了幼童与精神病人等心智不全者的犯罪成本。</p><blockquote><p>对幼童来讲，由于心智尚未成熟，在是非对错的辨别上都存在偏差，即便对其施以重刑，他还是懵懂无知，既起不到教育作用，也不能让其他幼童引以为戒。精神病人就更是如此了，在精神病人发病时，他自己都无法控制，即便在健康状态下深谙法律、一心向善，也不能杜绝病理性的“失控”。若不考虑这些因素，还要惩处这两类人的话，可能又会被贴上“不教而诛”的标签。</p></blockquote><hr><p>◆ 打官司不包赢，是因为律师“黑心”吗？</p><p>打官司作为零和博弈，如果一方知道自己必败，还会打吗？既然对方不是必败，自己也就不可能稳赢。而且有时候打官司也不一定就要赢，用打官司来撬动第三个方的利益博弈也说不一定。</p><blockquote><p>例如，有些时候打官司只是迫使对方和解的手段；有些案件官司的输赢不重要，只是为了赢得时间；还有一些案件，虽然无法做到完胜，但能够及时地降低或者弥补损失。</p></blockquote><hr><p>◆ 大麻是毒品，为什么在有些国家也能“合法化”？</p><p>为什么大麻在有的国家还能合法化？</p><p>1.地下交易会滋生大量暴力犯罪，还会让诸如可卡因等“硬毒品”涌入市场。</p><p>2.毒品非法化，会导致毒品价格奇高，为了获取毒资，更多人会通过犯罪手段获取财富。</p><p>3.大麻合法化后，政府将对大麻产业征税，这一举措将是提高财政收入的有效手段。</p><blockquote><p>大麻合法化后，政府将对大麻产业征税，这一举措将是提高财政收入的有效手段。</p></blockquote><hr><p>◆ 自己的身体自己不能做主？法律为什么要限制你“自残”？</p><p>自残不可怕，可怕的是带动了群体的从众心理，保护单一个体最终目的是保护社会规则。</p><blockquote><p>看似对个体自由的干预，实际上出于整体利益的考虑。一个人吸毒、自残不可怕，可怕的是大家都默许、认可甚至加入这种行为群体。</p></blockquote><hr><p>◆ 法律对财产的保护真的是平等的吗？</p><blockquote><p>《中华人民共和国宪法》第十二条规定：“社会主义的公共财产神圣不可侵犯。”第十三条规定：“公民的合法的私有财产不受侵犯。”</p></blockquote><hr><p>◆ 官司还没打完钱就拿到了？哪些情况可以申请“先予执行”？</p><blockquote><p>先予执行程序保护了弱势群体的利益，解了他们的燃眉之急，但也会被一些“别有用心”的人利用。如果当事人恶意申请先予执行后，最终被法院判决败诉，那么执行到的钱不但要返还，还要赔偿对方的损失。</p></blockquote><hr><p>◆ 正当防卫的正确姿势是怎样的？</p><p>正当防卫五不要，不要先动手，不要起恶念，不要打不停，不要乱打人，不要打太猛。</p><blockquote><p>千言万语总结为一句话：防卫是为了制止而不是加害。对这个原则理解得越深，离正当防卫的正确姿势就越近。</p></blockquote><hr><p>◆ 怎样稳妥地向警察叔叔表示“我的律师马上就到”？</p><p>“我的律师马上就到”，直接说这句话一般会惹怒警察，这一小节的精髓就是“打太极”，配合说，但不说重要内容。</p><blockquote><p>我的律师马上就到”了吧？</p></blockquote><hr><p>◆ 什么样的伤害可以主张精神损失赔偿？</p><blockquote><p>根据上述规定，法院支持精神损失赔偿的范围主要包括两类，一类就是人身权利受损的情形，法条中（一）、（二）、（三）项列举的权利都属于人身权利；另一类就是具有人格象征意义的特定纪念物品被毁损，例如逝者留赠的纪念品、定情信物、遗留物等被毁损。不难发现，这些都是和特定人的人身权利密切相关的，也就是说，人身权利和人身权利相关的利益是否受到损害才是法院是否支持精神损失赔偿的主要考虑因素。</p></blockquote><hr><p>◆ 讨债有理，绑人合法吗？</p><blockquote><p>社会上还存在一些所谓的“讨债公司”，采取看似无害的手段帮助债主讨债，但是这些讨债手段也是游走在违法的边缘。例如，讨债公司会组织多人到欠债者的工作单位、住宅去闹事，可能涉嫌扰乱公共秩序；到欠债者家中去泼油漆、堵锁眼、砸东西，则又是故意毁坏财物的治安违法行为。</p></blockquote><hr><p>◆ 孩子叫“王者荣耀”可以，叫“塞外女侠”为什么不行？</p><blockquote><p>总而言之，子女的姓氏原则上还是要跟着父母走的，如果真的想改其他姓，不是不可以，但也不能太随意。回到开头“王者荣耀”的案例，之所以这个名字能登记户口，主要是因为人家的爹妈就姓“王”啊。</p></blockquote><hr><p>◆ 女友结婚了，新郎不是你，送她的钻石项链还能要回来吗？</p><blockquote><p>只要赠送的“彩礼”符合上述三个条件之一的，即没领证、领证了没过日子或者给“彩礼”导致生活困难时，当事人都可以提起诉讼，要求对方返还“彩礼”。</p></blockquote><hr><p>◆ 当军属有荣耀也有风险，军婚为什么不好离？</p><blockquote><p>但现实问题却是，在聚少离多的情况下，军婚的感情纽带相对比较脆弱，也容易出现问题，所以法律在离婚的条件上赋予了军人很大的决定权。一方面，让军人作为决策方，给破裂的婚姻一定的缓冲期，增加挽回感情的可能；另一方面，也让军人和军属在缔结婚姻时能够充分考虑到现实的困难，避免冲动型婚姻，从而稳固军人的家庭关系。</p></blockquote><hr><p>◆ 言语暴力、冷暴力属于家暴吗？遭遇家暴该怎么办？</p><blockquote><p>上述规定不难看出，家暴除了传统意义上的肉体伤害，例如殴打、捆绑、残害、限制人身自由之外，还包含了谩骂、恐吓，也就是我们所说的言语暴力。但关于“冷暴力”是否也属于家暴，法律没有明确地给出答案。</p></blockquote><hr><p>◆ 齐人之福能享吗？婚外情也有可能犯罪？</p><blockquote><p>《中华人民共和国刑法》第二百五十八条规定：“有配偶而重婚的，或者明知他人有配偶而与之结婚的，处二年以下有期徒刑或者拘役。”这就是法律上的重婚罪，从条文的规定可以看出重婚罪主要治的是两种人：</p><p>（1）已婚还要勾搭别人的人；</p><p>（2）知道别人已婚还接受勾搭或者主动勾搭的人。</p></blockquote><hr><p>◆ “父债子还”合理吗？哪些情况下可以“父债子还”？</p><blockquote><p>在很多人的观念里，“父债子还”是天经地义的。问到为什么父债一定要子还，答案往往是“因为他们是父子啊”。回答的人虽然理直气壮，但实际上法律中并没有规定有亲属关系就一定要债务共担</p></blockquote><hr><p>◆ 同居真的没成本吗？为什么有人同居后摊上了巨额债务？</p><blockquote><p>从上述规定可以看出，在同居的过程中，一方为了同居生活或者为了共同经营所举借的债务都应该由双方共同偿还。</p></blockquote><hr><p>◆ 上班族也有“丹书铁券”？哪些人无法被开除？</p><blockquote><p>出现下面的情形时，企业可以立即辞退员工（包括上面的几类人）：</p><p>（1）自身能力太差，在试用期内被发现不符合录用条件；</p><p>（2）员工去其他单位兼职，还不听劝，给单位造成了影响；</p><p>（3）严重违反公司规章制度。过度放飞自我，例如长期不上班、迟到，等等；</p><p>（4）劳动者通过欺骗、胁迫手段签了合同，如简历造假；</p><p>（5）严重失职、营私舞弊给单位造成损害；</p><p>（6）被追究刑事责任。</p></blockquote><hr><p>◆ 试用期员工就低人一等？试用期能随意解聘吗？</p><blockquote><p>超过法定期限约定试用期。劳动合同期限三个月以上不满一年的，试用期不得超过一个月；劳动合同期限一年以上不满三年的，试用期不得超过两个月；三年以上固定期限和无固定期限的劳动合同，试用期不得超过六个月。</p></blockquote><hr><p>◆ 社保是员工福利吗？单位不缴纳社保该怎么维权？</p><blockquote><p>人力资源管理上把员工福利分为法定福利和非法定福利两大类。其中法定福利主要有养老保险、失业保险、医疗保险、工伤保险、生育保险、住房公积金、法定节假日、高温补贴、病假、产假工资等。不难看出，这里的法定福利就是我们常说的“五险一金”等。</p></blockquote><hr><p>◆ 工伤如何认定？下班途中买菜出事也算工伤？</p><blockquote><p>上下班顺道买菜、接送孩子、看望父母的时候发生了交通事故，也有可能被认定为工伤。</p></blockquote><hr><p>◆ 共同犯罪的打击面有多大？公司经营涉嫌犯罪，员工都该被抓吗？</p><blockquote><p>只要你和其他人一起做了你明知或者怀疑可能是不对的事，而最终这件事确实涉嫌犯罪，那么你们就都应当承担刑事责任，这就是共同犯罪。</p></blockquote><hr><p>◆ 维权也有保质期？</p><blockquote><p>有句法律谚语说得很好——“法律不保护躺在权利上睡觉的人（The laws aid the vigilant, not the negligent）”，讲的其实就是诉讼时效的概念。法律权利也是有保质期的，一旦过期，权利作废。法律之所以会进行这种时效设定，理由其实很简单。如果一个人的权利受损了，他自己都不去追究或者懒得追究的话，那么从第三方的角度只能认为他觉得无所谓。因此，从整体社会效率出发，对这种怠于行使权利的行为，只能过期作废。</p></blockquote><hr><p>◆ 碰到商家的哪些不法行为就发财了？</p><blockquote><p>根据《最高人民法院关于审理商品房买卖合同纠纷案件适用法律若干问题的解释》，当出现下面的情况时，消费者除了可以让开发商退钱之外，还可以要求赔偿已付的一倍的购房款：</p><p>（1）商品房买卖合同订立后，出卖人未告知买受人将该房屋抵押给第三人，即开发商私自抵押房屋。</p><p>（2）商品房买卖合同订立后，出卖人又将该房屋出卖给第三人。就是通常说的开发商“一房二卖”。</p></blockquote><blockquote><p>欺诈行为是最为常见的侵犯消费者权益的行为。对商品进行虚假宣传、以次充好、隐瞒商品缺陷等都属于欺诈行为。一旦发现商家的这些行为，可以毫不留情地要求“退一赔三”。</p></blockquote><hr><p>◆ 饭店里的哪些“野味”真心不能吃？</p><blockquote><p>我国《刑法》规定，非法猎捕、杀害国家重点保护的珍贵、濒危野生动物的，或者非法收购、运输、出售国家重点保护的珍贵、濒危野生动物及其制品的，最高可判十年以上有期徒刑。</p></blockquote><hr><p>◆ 起诉黑心商家怕路远？打官司能不能挑个法院？</p><blockquote><p>打官司不能只考虑法院离得近不近，要考虑当地法院的判决尺度、倾向性判例，还要考虑胜诉后是不是能够足额、快速地执行到赔偿金，这同样和选择法院有着莫大的关系。总之，当消费者面临诉讼时，首先应该当明确有哪些法院可供选择，在分析利弊后，选择最有利于自己的法院提起诉讼。</p></blockquote><hr><p>◆ 职业打假人风光依旧吗？法院对知假买假是什么态度？</p><blockquote><p>2017年，最高人民法院办公厅发文，文中提到“考虑食药安全问题的特殊性及现有司法解释和司法实践的具体情况，我们认为目前可以考虑购买食品、药品之外的情形，逐步限制职业打假人的牟利性打假行为。”</p></blockquote><hr><p>◆ 房东换了，房子还能不能继续住？</p><blockquote><p>《中华人民共和国合同法》第二百三十条规定：出租人出卖租赁房屋的，应当在出卖之前的合理期限内通知承租人，承租人享有以同等条件优先购买的权利。也就是说，房东在卖房时首先要征得租客的意见，如果租客不愿意按照同等价格等条件购买，房东才能卖给他人。此时，如果房东没有通知租客，或者无法证明通知租客，在法律上属于侵犯了租客的优先购买权，租客当然可以以此为由要求房东赔偿相应的损失。</p></blockquote><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 法律 </tag>
            
            <tag> 科普 </tag>
            
            <tag> 隋兵 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《时间简史》</title>
      <link href="2021/01/02/shi-jian-jian-shi/"/>
      <url>2021/01/02/shi-jian-jian-shi/</url>
      
        <content type="html"><![CDATA[<p><strong>《时间简史》，史蒂芬·霍金 著</strong></p><p><strong>注：读书笔记仅做记录，可读性较差。</strong></p><p>霍金先生就像上帝的使者，来自宇宙的传教士，用通俗的语言带领读者来了一次宇宙时空旅行。时间简史一直在试图回答宇宙的本质是什么，宇宙从何而来又去往何处，为什么是现在这个模样。今天仍然没有大一统的理论可以完全解释宇宙演化，但是已经有比较丰富的理论去逼近它。</p><p>通常接受的观点是宇宙起源一次奇点大爆炸，那时候空间无限小，密度无限大，时间没有意义，随后宇宙开始不断变大，膨胀至今。我们使用三维空间和一个时间维去度量宇宙，实现时空旅行如果只是一味的提速似乎不可能达到，因为在我们的空间里光速无法达到，更别说超越，而且时间的箭头似乎也不允许，可能的办法是在负曲率的地方找到虫洞，超个近道，但粒子在这个近道中会被循环计数，所以好像也不可能，如果真的可能，也许我们现在已经和未来的自己共进晚餐了。</p><p>霍金在20世纪70年代主要在研究黑洞，黑洞就像宇宙的一个缩影，其中可能也存在宇宙爆炸时的奇点条件，它让光发生弯曲，让我们看到黑洞背后的世界，黑洞并不是黑的，它时刻向外辐射着，即使可能只是来自事件视界，正是因为辐射，它可能不止是恒星的归宿，又或许是物质的一次重生。</p><p>宇宙学向下是物理学、数学，向上是哲学，我们是谁，从哪里来，又去往何处，可能终究难有答案。</p><hr><p>◆ 译者序</p><p>霍金老先生的经历是很多人想都不敢想的，将其崇高的科学地位与如此艰难的身体条件放在一起，再也想不到比“奇迹”更好的形容词。霍金是就是上帝的使者，是来自宇宙的传教士，虽然身体被轮椅束缚，但他的灵魂却畅游整个宇宙。</p><blockquote><p>人们不得不对人类中居然有以这般坚强意志追求终极真理的灵魂从内心产生深深的敬意。</p></blockquote><hr><p>◆ 第1章 我们的宇宙图象</p><p>我们凭什么就觉得自己的想法就更好呢，乌龟塔同样也表达了世界无穷尽的思想，那些自认为透析世界的高傲者，又有多少能真正理解时空的尽头。时刻保持谦卑之心，也是让自己多一个方向。</p><blockquote><p>大多数人会觉得，把我们的宇宙喻为一个无限的乌龟塔相当荒谬。但是我们凭什么就自认为知道得更好呢？我们对宇宙了解了多少？而我们又是如何知道的呢？宇宙从何而来，又将向何处去？宇宙有开端吗？如果有的话，在开端之前发生了什么？时间的本质是什么？它会有一个终结吗？</p></blockquote><hr><p>这太奇妙了，在无限的定义下，没有中心的同时处处都是中心。所以任何对中心的定义都是可能合理的，我们对坐标轴的定义也只是为了更好的度量几何空间。按照这种说法大胆设想一下，亚理斯多德和托勒密的地心说在当时的宗教环境下，这是多么的合理和科学呀。</p><blockquote><p>如果只有有限数目的恒星分布在一个有限的空间区域里，这确实是会发生的。但是另一方面，他推断说，如果存在无限数目的恒星，大体均匀地分布于无限的空间中，对它们而言，因为这时不存在一个中心落点，这种情形就不会发生。</p></blockquote><hr><p>把宇宙的开端与无限的时间结合在一起，越想越觉得悬幻，这样一来，不管是否有开端都难以解释时间是怎么回事。如果真要解释这个，似乎只能让时间无法一直追溯回去。</p><blockquote><p>他对正命题的论证是：如果宇宙没有一个开端，则任何事件之前必有无限的时间。他认为这是荒谬的。他对反命题的论证是：如果宇宙有一开端，在它之前必有无限的时间，为何宇宙必须在某一特定的时刻开始呢？</p></blockquote><hr><p>如果宇宙在膨胀，那么膨胀的反方向应该就是奇点存在的方向，那个地方就应该是宇宙的中心，既然时间也是有限的，那宇宙空间也应该是有限的吧，宇宙的不断膨胀只能说明未被宇宙填充的区域可能无限。</p><blockquote><p>这意味着，在早先的时刻星体更加相互靠近。事实上，似乎在大约100亿至200亿年之前的某一时刻，它们刚好在同一地方，所以那时候宇宙的密度为无限大。这个发现最终将宇宙开端的问题带进了科学的王国。</p></blockquote><hr><p>已经有一些定律支持我们去度量现在的宇宙演变规律，而对初始状态一直都是不定义或无意义，如果宇宙的运行是有规律的，那它的起始也应该是可定义的。</p><blockquote><p>科学的终极目的是提供描述整个宇宙的单一的理论。然而，大多数科学家遵循的方法是把问题分成两部分。首先，存在一些定律，这些定律告诉我们宇宙如何随时间变化。（如果我们知道在任一时刻宇宙是什么样子的，这些定律就告诉我们它在未来任何时刻是什么样子。）第二，存在宇宙初始状态的问题。有些人觉得科学只应关心第一部分，他们将初始状态的问题看作玄学或宗教的事体。</p></blockquote><hr><p>◆ 第2章 空间和时间</p><p>放眼我们周围，所有物体都会不断趋于更低势能的相对稳定状态，从这一点来看亚里士多德的出发点非常合理，而且从这可以直接推翻永动机，有时候理论不一定要解释整个世界，能解释一部分就已经很厉害了，就像谁也不敢说广义相对论和量子力学就绝对正确，只是现在还没证伪。</p><blockquote><p>人们相信亚里士多德，他说物体的自然状态是静止的，并且只有在受到力或冲击的推动时才运动。</p></blockquote><hr><p>参考系的发明太厉害了，它是给世界放在了坐标系上去研究，很多看似不可能的都一下子豁然开朗了，所以我们现在还不能定义的时空，是不是就缺一个坐标系呢。</p><blockquote><p>但是从牛顿定律可以推断，并不存在唯一的静止标准。人们可以讲，物体A静止而物体B以不变的速度相对于物体A运动，或物体B静止而物体A运动，这两种讲法是等价的。</p></blockquote><hr><p>光速有限的理论居然来自于木星卫星出现的时间差，现在看起来是多么的合理呀，很难想象当时罗默发现这个的心情，估计当时也怀疑过看到的可能不是木卫。</p><blockquote><p>光以有限但非常高的速度旅行的事实。他观察到，木星的卫星不是以等时间间隔从木星背后出来，不像如果卫星以不变速度围绕木星运动时，人们会预料的那样。</p></blockquote><hr><p>在宇宙这个大尺度上，“同时”似乎已经变得比较奢侈，仰望夜空，星辰大海，我们现在看到的实则发生在很久之前，甚至有的已经结束了生命历程。</p><blockquote><p>例如，假定太阳就在此刻停止发光，它不会对此刻的地球上的事情发生影响，因为它们是在太阳熄灭这一事件的他处（图2.6）。我们只能在8分钟之后才知道这一事件，这是光从太阳到达我们所花费的时间。只有到那时候，地球上的事件才在太阳熄灭这一事件的将来光锥之内。</p></blockquote><hr><p>三维空间中观察到的曲线运动在四维空间而言就是一个直线运动，测地线就是这条最短的路径，放到这个维度上，测地线应该也有方向性，而且月球的测地线和地球的测地线应该方向不同，这样就能解释月球和地球的距离越来越大，而且地球的测地线方向和太阳的测地线方向也应该不一致，只是在我们可见的时间刻度内没发现显著变化。如果真有方向，那就肯定存在更高维的空间，测地线的不同方向构成了这个空间。</p><blockquote><p>像地球这样的物体并非由于称为引力的力使之沿着弯曲轨道运动，相反，它沿着弯曲空间中最接近于直线路径的东西运动，这个东西称为测地线。一根测地线是邻近两点之间最短（或最长）的路径。</p></blockquote><hr><p>几乎我们每个人都知道光沿直线传播，不过其实中学中的这个理论，还有一个前提条件，是在同一介质中，想象一下水面和三棱镜上的折射现象。从这个角度来看，介质或许可以算作某种场，就像引力场一样，它也会受到质量的影响，在太阳周围，这种强大的场导致了光线偏折，在质量大的物体周围，光线偏折会比质量小的物体周围更严重，偏折是受到外部影响导致的，所以对光的能量也会有影响，那么在质量大的物体周围，时间应该也会发生变化。</p><p>后文给出了答案，质量大的物体周围时间会更慢些，说明在质量大的物体周围让光的能量损失了，同样，如果我们以接近光速前进，我们的时间测度会变慢，因为速度很大时，质量也会变得非常大，而这个质量周围的时间就会变得非常慢，所以有了双生子佯谬。这样一推理似乎清晰了不少，不过这里存在一个问题假设，就是在某种程度上把光和时间等价了，似乎不合理。</p><blockquote><p>光线也必须在时空中遵循测地线。时空是弯曲的事实再次意味着，光线在空间中看起来不是沿着直线行进。这样，广义相对论预言光线必须被引力场折弯。譬如，理论预言，由于太阳的质量的缘故，太阳近处的点的光锥会向内稍微弯折。这表明，从遥远恒星发出的刚好通过太阳附近的光线会被偏折很小的角度，对于地球上的观察者而言，这恒星似乎位于不同的位置（图2.9）。</p></blockquote><hr><p>◆ 第3章 膨胀的宇宙</p><p>在前面的阅读我一直觉得通过运动的宇宙现状是可以计算出奇点的，因为如果宇宙真的在膨胀运动，膨胀具有方向性，所有膨胀运动的反方向就是最开始奇点的方向，以地球为参考系，所有的反方向相交一点就是奇点。可是以前忽略了一个问题，就是宇宙中的天体之间具有像引力这样的相互作用，这会改变天体本生的运动方向，这就会导致通过可列天体膨胀方向计算出来的不是真正的奇点方向，理论上通过几乎无限的天体膨胀是可以办到，可几乎无限，这看起来就是那么的不实际。</p><blockquote><p>1929年哈勃发表的结果更令人惊异：甚至星系红移的大小也不是随机的，而是和星系离开我们的距离成正比。或换句话讲，星系越远，它离开我们运动得越快！这表明宇宙不能像人们原先所想象的那样处于静态，而实际上是在膨胀；不同星系之间的距离一直在增加。</p></blockquote><hr><p>在宇宙这个大尺度上，在渺小的人类参考系下，要直接证明某一个结论很多是不可行的，很多推论来自于它应该那样。就像假定广义相对论正确并且宇宙真的包含我们所观测到的物质，它才一定具有奇点爆炸，但是如果考虑量子效应，奇点可能又不存在，经过实验数据，时间应该具有一个开端，可是人们可能永远也证明不了那个开端。现在已经发现的定律均有适用范围，这似乎说明它们都不是绝对真理，只是能解释被我们观测到的数据，我们对宇宙的了解是那么的有限，谁也难以保证它真的就是我们想象的那样。</p><blockquote><p>我们在这一章已经看到，在不到半个世纪的时间里，人们几千年来形成的宇宙观被转变了。哈勃关于宇宙膨胀的发现，以及关于我们自己的行星在茫茫宇宙中微不足道的认识，只不过是起点而已。随着实验和理论证据的积累，人们越来越清楚地认识到，宇宙在时间上必须有个开端。</p></blockquote><hr><p>◆ 第4章 不确定性原理</p><p>普朗克说明了两点，电磁波的辐射不是连续的，它必定以一定的量打包后再辐射；另外辐射频率越高，能量越大，所以频率不会一直增加，终究会存在一个有限的相对平衡态，所有不管什么物体，其辐射频率都有一个极值。</p><blockquote><p>为了避免这显然荒谬的结果，德国科学家马克斯·普朗克在1900年提出，光波、X射线和其他波不能以任意的速率辐射，而只能以某种称为量子的波包发射。此外，每个量子具有确定的能量，波的频率越高，其能量越大。这样，在足够高的频率下，辐射单个量子所需要的能量比所能得到的还要多。因此，在高频下的辐射减少了，这样物体丧失能量的速率就变成有限的了。</p></blockquote><hr><blockquote><p>由普朗克的量子假设，人们不能用任意小量的光；人们至少要用一个光量子。这量子会扰动这粒子，并以一种不能预见的方式改变粒子的速度。此外，位置测量得越准确，所需的波长就越短，单个量子的能量就越大，这样粒子的速度就被扰动得越厉害。换言之，你对粒子的位置测量得越准确，你对速度的测量就越不准确，反之亦然。海森伯指出，粒子位置的不确定性乘以粒子质量再乘以速度的不确定性不能小于一个确定量，该确定量称为普朗克常量。并且，这个极限既不依赖于测量粒子位置和速度的方法，也不依赖于粒子的种类。海森伯不确定性原理是世界的一个基本的不可回避的性质。</p></blockquote><hr><p>◆ 第5章 基本粒子和自然的力</p><p>上中学时就知道夸克，但这是第一次清楚的知道夸克的味和色，从原子到质子中子到夸克，到底什么才是最小粒子，粒子的小和宇宙的大同样富有神秘色彩。</p><blockquote><p>存在有几种不同类型的夸克——有六种“味”，这些味我们分别称之为上、下、奇、粲、底和顶。20世纪60年代起人们就知道前三种夸克，1974年才发现粲夸克，1977年和1995年分别发现底夸克和顶夸克。每种味都带有三种“色”，即红、绿和蓝。</p></blockquote><hr><p>一直以为只有科幻中才有这种可能，没想到真的存在，那么，这种反粒子又存在什么地方呢？从这里我似乎有点相信平行宇宙了，说不定那里就存在我们的反自己。就像在三维空间中的水与火，要相交必须跨越固有的三维位置坐标，当相交后就变成了水与火本身之外的水蒸气。四维空间中需要跨越的说不定就是时间，那么湮灭以后变成了什么呢？是以能量的形式辐射吗？如果真是这样，是不是也存在将能量聚集成正反物质的方式，能量是否会在两个四维空间中穿梭，能量是否可以被分解成更小的能量单元……不能再往下想了，收不住了。</p><blockquote><p>现在我们知道，任何粒子都有会和它相湮灭的反粒子（对于携带力的粒子，反粒子即为其自身）。也可能存在由反粒子构成的整个反世界和反人。然而，如果你遇到了反自身，注意不要握手！否则，你们两人都会在一个巨大的闪光中消失殆尽。</p></blockquote><hr><p>◆ 第6章 黑洞</p><p>物体内和物体间都存在很强的相互作用，物体之所以存在是因为处于某一种平衡态下。膨胀是因为斥力大于引力，收缩是因为引力大于斥力，这样一来恒星终究会有结局，随着能量的辐射，要么爆炸，要么坍塌。</p><blockquote><p>然而，钱德拉塞卡意识到，不相容原理所能提供的排斥力有一个极限。相对论把恒星中的粒子的最大速度差限制为光速。这意味着，当恒星变得足够密集之时，由不相容原理引起的排斥力就会比引力的作用小。钱德拉塞卡计算出，一个质量比大约太阳质量一倍半还大的冷的恒星不能维持本身以抵抗自己的引力。（这质量现在称为钱德拉塞卡极限。）</p></blockquote><hr><p>不管坍塌之前是什么样子，终究黑洞的类型只由质量和旋转速度决定，也就是电荷，角动量和质量，这对建立黑洞模型提供了可能。有一点，坍塌前的天体是复杂难以度量的，坍塌后变得相对比较规律，这中间感觉损失的大量信息，它们去了哪儿？</p><blockquote><p>在引力坍缩之后，一个黑洞必须最终演变成一种能够旋转，但是不能搏动的态。此外，它的大小和形状，只决定于它的质量和旋转速度，而与坍缩形成黑洞的原先物体的性质无关。此结果因如下一句格言而众所周知：“黑洞没有毛。” “无毛” 定理具有巨大的实际重要性，因为它极大地限制了黑洞的可能类型。</p></blockquote><hr><p>这是一个非常好的思路，黑洞不发光，直接观测不到，但是可见星是可以观测到的，可见星与黑洞的相互作用结果是可以观测到的，如此可推断出那个地方必定存在一个最小引力和最大半径的物体。</p><blockquote><p>对这现象的最好解释是，物质从可见星的表面被吹起来，当它落向不可见的伴星时，形成螺旋状运动（这和水从浴缸流出很相似），并且变得非常热，发出X射线（图6.3）。为了使这机制起作用，不可见物体必须非常小，像白矮星、中子星或黑洞那样。</p></blockquote><hr><p>◆ 第7章 黑洞不是这么黑的</p><p>不确定最开始柏肯斯坦认为事件视界的面积就是黑洞墒的量度是真的有理论支持还是异想天开，但经过一些列的论证，居然完美的结合在了一起，黑洞本身什么也不会发出，可是紧靠它事件视界外的虚空间是会发射辐射的，这就和热力学第二定律完美的兼容了，神奇。</p><blockquote><p>辐射出去的正能量会被落入黑洞的负能粒子流平衡。按照爱因斯坦方程E=mc2（E是能量，m是质量，c为光速），能量和质量成正比。因此，往黑洞去的负能量流减小它的质量。随着黑洞损失质量，它的事件视界面积变得更小，但是它发射出的辐射的熵过量地补偿了黑洞的熵的减少，所以第二定律从未被违反过。</p></blockquote><hr><p>◆ 第8章 宇宙的起源和命运</p><p>宇宙的变化一定程度上可以根据温度进行测量，温度变化，导致了粒子的运动变化和粒子之间的反应，直接影响了物质的演化。当体积变大，温度变得可度量后，宇宙的进化过程逐渐清晰，很难想象奇点零体积时的无限热是什么样的存在，甚至物质和能量以什么样的方式存在都无法定义，又是什么促使了它的爆炸，它有存在什么地方呢？想到数轴上的无理数，也许它存在任何地方。</p><blockquote><p>人们发现当宇宙膨胀时，其中的任何物体或辐射都变得更凉（当宇宙的尺度大到2倍，它的温度就降低到一半）。由于温度即是粒子的平均能量——或速度的测度，宇宙的变凉对于其中的物质就会有较大的效应。</p></blockquote><hr><p>阅读上面时也想到这个问题，不止奇点爆炸，甚至是宇宙的膨胀，速度之快是超越光速的，既然光都到达不了，那在我们定义的空间里就没什么可以到达了，也许比较均匀的分布和所谓的信息传递没有关系，那就是奇点中固有的，甚至那时候连时间都没有，时间也是在宇宙诞生后才出现的，或许是伴随着光一起出现。</p><blockquote><p>从大爆炸开始光还没有来得及从一个遥远的区域到达另一个区域，即使这两个区域在宇宙的早期靠得很近。按照相对论，如果连光都不能从一个区域到达另一个区域，则没有任何其他的信息能做到。</p></blockquote><hr><p>这种偶然或许就是必然呢？如果我们所处的宇宙之前还有很多个宇宙呢，因为之前产生的宇宙已经坍缩，我们现在存在的宇宙也许是经过无数次坍缩-爆炸-坍缩-爆炸后正好生成的呢，那在这个尺度上，时间的长度已经难以想象。又或许这个宇宙之外还有无数个宇宙，而这个宇宙的演变正好产生了今天的宇宙，这个尺度上，我们的宇宙之外的空间之大真的超乎想象。又或许这两种尺度同时存在，这样一来，宇宙之外的更大空间上一直在上演着无数的爆炸-坍缩-爆炸-坍缩循环，这样一来我们所在的膨胀宇宙，或许某一天会和其它宇宙相交，又或许在此之前已经坍缩。这就像幸存者偏差，这个宇宙之所以存在，是因为我们的存在。</p><blockquote><p>为何宇宙以这么接近于区分坍缩和永远膨胀模型的临界膨胀率开始，这样即使在100亿年以后的现在，它仍然几乎以临界的速率膨胀？如果在大爆炸后的1秒钟那一时刻其膨胀率哪怕小十亿亿分之一，那么在它达到今天这么大的尺度之前宇宙早已坍缩。</p></blockquote><hr><p>我们现在所处的宇宙有可能在开始的时候就是偶然中的必然存在，又或许是在演变过程中形成的中间过程，这是变化过程而导致的殊途同归，而宇宙现在的状态，不过是因为我们正好存在。</p><blockquote><p>这种膨胀抹平了宇宙中的任何不规则性，正如当你吹胀气球时，它上面的皱纹就被抹平了。这样，从许多不同的非均匀的初始状态可以演化出宇宙现在光滑均匀的状态</p></blockquote><hr><blockquote><p>作为任何终极理论的一部分而不可或缺的第二个特征是爱因斯坦的思想，即引力场由弯曲的时空来代表：粒子在弯曲空间中试图沿着最接近于直线的某种路径走。但是因为时空不是平坦的，它们的路径看起来似乎被引力场折弯了。</p></blockquote><hr><p>这段看了很多遍，在我们的认识范围内，宇宙在空间上比较好定义，但时间上如何定义呢，以实时空为基础的经典引力论认为时间是不同于一般空间而人为单独定义的，要么有个开始，要么一直如此，而在量子引力论中引入欧几里得时空后，时间和空间在相同的地位上，甚至不排除在某种程度上可以相互转换，开个脑洞，如果奇点就是时间和空间的一次转化呢，就像三维空间碰倒一个盒子，只是长宽高的方向变化了，所以并没有无限小的空间和无法定义的时间，有可能我们只是看到了盒子翻转时的一个顶点，而宇宙膨胀只是盒子的翻转让更多的空间进入我们的视野。这应该就是霍金眼中的有限无界吧。</p><blockquote><p>在以实的时空为基础的经典引力论中，宇宙可能的行为只有两种方式：要么它已存在了无限长时间，要么它在有限的过去的某一时刻的奇点上有一个开端。而在量子引力论中，产生了第三种可能性。因为人们采用欧几里得时空，在这里时间方向和空间方向具有相同的地位，所以时空有可能在范围上是有限的，却没有形成边界或边缘的奇点。时空就像是地球的表面，只不过多了两维。地球的表面在范围上是有限的，但它没有边界或边缘：如果你朝着落日的方向驾船，你不会掉到边缘外面或陷入奇点中去。</p></blockquote><hr><p>◆ 第9章 时间箭头</p><blockquote><p>至少有三种不同的时间箭头：第一个，是热力学时间箭头，即是在这个时间方向上无序度或熵增加；然后是心理学时间箭头，这就是我们感觉时间流逝的方向，在这个方向上我们可以记忆过去而不是未来；最后，是宇宙学时间箭头，宇宙在这个方向上膨胀，而不是收缩。</p></blockquote><hr><p>◆ 第10章 虫洞和时间旅行</p><p>让速度超过时间似乎不可行，所以希望存在一个负曲率的虫洞，让穿越者抄个近路，与其说是时间旅行，可能更像是空间旅行，时间一直都是向前的，只是空间翻转了。人们希望未来的某一天这种旅行是可能的，谁又曾想，如果真有可能，那就会存在未来的人穿越到现在了，可惜我们什么也没有发现。</p><blockquote><p>所以，人们也许希望，随着科学技术的推进，我们最终能够造出时间机器。但是，如果这样的话，为什么从来没有一个来自未来的人回来告诉我们如何实现呢？鉴于我们现在处于初级发展阶段，也许有充分理由认为，让我们分享时间旅行的秘密是不明智的。</p></blockquote><hr><p>◆ 第11章 物理学的统一</p><p>如此说很值得深思，物理学特别是宇宙学很多理论难以证真，所以当无法证伪时就是真理，同时如此平滑有序的状态必定有一个堪称完美的大一统理论描述，就像十进制可以产生所有的数字一样，需要找到就是10个数，甚至是二进制的0和1。</p><blockquote><p>1928年物理学家诺贝尔奖获得者马克斯·玻恩告诉一群来格丁根大学的访问者：“据我们所知，物理学将在6个月之内结束。”</p></blockquote><hr><p>个人比较赞同第二种，宇宙演变过程中经历的时间尺度和空间尺度的复杂性可能很难完全刻画，而且就算有大一统的理论，也基本上无法复现，人类文明太渺小了，而如果事件发生完全随机，而我们正好观测到了其中的一丁点规律，也不是没有可能，但是按照现在的研究来看，这种随机有点过去平滑了。所以最有可能的是没有绝对的大一统理论，但如此稳定的宇宙是可以在一定程度上刻画的，我们可以很好的逼近它，但永远无法解析它。</p><blockquote><p>（1）确实存在一个完备的统一理论（或者一族交叠的表述），如果我们足够聪明的话，总有一天会找到它。</p><p>（2）并不存在宇宙的最终理论，仅仅存在一个越来越精确地描述宇宙的无限的理论序列。</p><p>（3）并不存在宇宙的理论：不可能在一定程度之外预言事件，事件仅以一种随机或任意的方式发生。</p></blockquote><p>完 ~</p>]]></content>
      
      
      <categories>
          
          <category> 读书笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 宇宙 </tag>
            
            <tag> 斯蒂芬·霍金 </tag>
            
            <tag> 时间 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>供给与需求的力量</title>
      <link href="2021/01/01/gong-gei-yu-xu-qiu-de-li-liang/"/>
      <url>2021/01/01/gong-gei-yu-xu-qiu-de-li-liang/</url>
      
        <content type="html"><![CDATA[<h2 id="竞争市场"><a href="#竞争市场" class="headerlink" title="竞争市场"></a>竞争市场</h2><p>在市场环境中，通常存在许多买者和许多卖者，以至于每个人对市场价格的影响都微乎其微，这样的市场为<strong>竞争市场</strong>。如冰激凌市场为例，冰激淋的价格和销售量又所有的买者和卖者通过在市场上的相互交易共同决定。</p><p>为了更一般的研究供给与需求，通常假设市场是完全竞争的，<strong>完全竞争市场</strong>满足两个条件：</p><ul><li>可供销售的物品完全相同</li><li>买者和卖者数量足够多，以至于没有任何一个买者和卖者可以影响市场价格</li></ul><p>完全竞争市场虽然是简化的理想情况，但是分析结论并不失一般性，其分析结论也适用于更复杂的市场环境。</p><h2 id="需求"><a href="#需求" class="headerlink" title="需求"></a>需求</h2><h3 id="需求曲线：价格与需求量之间的关系"><a href="#需求曲线：价格与需求量之间的关系" class="headerlink" title="需求曲线：价格与需求量之间的关系"></a>需求曲线：价格与需求量之间的关系</h3><p><strong>需求量</strong>是买者愿意并且能够购买的物品的数量。</p><p>对于经济学人而言，当其他条件不变时，一种物品的价格上升，对该物品的需求量会减少，反之，当价格下降时，对该物品的需求量会增加。（主要是能够购买的数量变多了），这就是<strong>需求定理</strong>。</p><p>显然，这种需求量与价格的反比关系为从左上到右下的一条直线，称之为个人<strong>需求曲线</strong>。所有个人需求的总和为市场需求，于是不难画出如下汇总的市场需求曲线。</p><p><img src="demand.png"></p><h3 id="需求曲线的移动"><a href="#需求曲线的移动" class="headerlink" title="需求曲线的移动"></a>需求曲线的移动</h3><p>一条需求曲线是在其他条件不变的假设下的，随着时间的推移，该曲线不一定稳定，比如某天一个权威报告发现吃冰激淋更长寿，那冰激淋的需求将会增加，这会导致冰激淋的需求曲线发生移动。</p><p>对于<strong>每一种价格水平</strong>下的需求量都增加的任何变动，都会使得需求曲线向右移动。反之，让需求量都减小的任何变动，都会使需求曲线向左移动。如下图所示：</p><p><img src="demand_move.png"></p><p>使得需求曲线移动的一些主要变量有：</p><ul><li><strong>收入</strong>：收入的变化意味着总支出的变化，当收入减少时，正常物品的需求量就会减少，当然，并不是每种商品都是正常商品，如果收入减少时某种物品的需求量增加，这种物品称为低档物品。</li><li><strong>相关物品的价格</strong>：这里就涉及到替代品和互补品的概念，当一种物品的价格下降引起另一种物品的需求量减少时，这两种物品就互为替代品；反之，如果一种物品的价格下降引起另一种物品的需求量增加时，这两者就互为互补品。</li><li><strong>爱好</strong>：决定需求最明显的因素就是爱好，如果喜欢，就会多买一些，如果不喜欢，就会少买一些。</li><li><strong>预期</strong>：如果对未来的预期比较乐观，那当下的需求量就会增加，反之这会降低。</li><li><strong>买者的数量</strong>：如果有新的消费者群体加入，则在每种价格下市场需求量都会增加，从而市场需求就增加了。</li></ul><h2 id="供给"><a href="#供给" class="headerlink" title="供给"></a>供给</h2><h3 id="供给曲线：价格与供给量之间的关系"><a href="#供给曲线：价格与供给量之间的关系" class="headerlink" title="供给曲线：价格与供给量之间的关系"></a>供给曲线：价格与供给量之间的关系</h3><p><strong>供给量</strong>是卖者愿意并且能够出售的某种物品的数量。</p><p>同样，对于经济学人而言存在<strong>供给定理</strong>，在其他条件不变时，一种物品价格上升，该物品的供给量会增加；当一种物品价格下降时，该物品的供给量就会减少。</p><p>显然，这种供给量与价格的正比关系是一条从左下到右上的一条直线，称之为个人<strong>供给曲线</strong>，所有个人供给的总和为市场供给，如下图：</p><p><img src="supply.png"></p><h3 id="供给曲线的移动"><a href="#供给曲线的移动" class="headerlink" title="供给曲线的移动"></a>供给曲线的移动</h3><p>一条市场供给曲线也会假设其他条件不变，当有因素变化时，供给曲线也会发生移动。比如糖的价格下降，那么在每一种价格条件下，卖者现在愿意生产更多的冰激淋，此时冰激淋的供给曲线就会向右移动，如下图所示。</p><p><img src="supply_move.png"></p><p>使得供给曲线移动的一些主要变量有：</p><ul><li><strong>投入品的价格</strong>：一种物品的供给量与生产这种物品的投入品的价格负相关，如糖的价格降低就会使冰激淋的供给量增加。</li><li><strong>技术</strong>：技术的进步通过降低企业的生产成本而在每种价格下增加供给量。</li><li><strong>预期</strong>：比如，如果预期未来冰激淋的价格会上升，企业就会把现在生产的冰激淋存储起来，而减少当前的供给量。</li><li><strong>卖者的数量</strong>：如果有供给在退出某一经营市场，市场的供给量就会减少。</li></ul><h2 id="供给与需求结合"><a href="#供给与需求结合" class="headerlink" title="供给与需求结合"></a>供给与需求结合</h2><h3 id="市场均衡"><a href="#市场均衡" class="headerlink" title="市场均衡"></a>市场均衡</h3><p>需求量与价格成反比，供给量与价格成正比，那么需求曲线与供给曲线必定会交于一点，这个点就是<strong>市场均衡</strong>点，此时的价格就是均衡价格（也叫市场出清价格，因为该价格水平下，市场上买者和卖者都得到了满足。），此时供给量等于需求量，为均衡数量。</p><p>如果市场价格高于均衡价格，市场的供给量就会超过市场需求量，此时会存在物品<strong>过剩</strong>（也叫超额供给），此种情况下，价格会下降以增加需求量，并减少供给量，供给量与需求量会沿着曲线移动直至平衡点。</p><p>如果市场价格低于均衡价格，市场的需求量就会超过市场供给量，此时会存在物品<strong>短缺</strong>（也叫超额需求），此种情况下，价格会增加一降低需求量，并增加供给量，需求量与供给量会沿着曲线移动直至平衡点。</p><p>如下图所示</p><p><img src="supply_and_demand.png"></p><p>这种物品价格会自发调整，使物品的供给量与需求量达到平衡的现象就叫<strong>供求定理</strong>。</p><h3 id="均衡的变动"><a href="#均衡的变动" class="headerlink" title="均衡的变动"></a>均衡的变动</h3><p>分析均衡变动的三个步骤：</p><ul><li>确定该曲线是供给曲线移动还是需求曲线移动，还是使两种曲线都移动</li><li>确定曲线移动的方向（向左还是向右）</li><li>用供给图说明这种移动如何改变均衡价格和均衡数量（新均衡与旧均衡对比）</li></ul><p>例如，天气炎热会让人们想吃更多的冰激淋，会增加在任何价格水平下购买冰激淋的数量，所以天气炎热会使需求曲线向右移动。但是该条件下，供给并没有发生变化，所以供给量会沿着供给曲线变动。</p><p>上例中需求曲线向右移动称为<strong>曲线的移动</strong>；供给量<strong>沿着曲线的变动</strong>称为供给量的变动，这两者的对比关键是是否在每一种价格水平下都发生把变动。</p><p>同样，例如一个夏季出现了台风，导致部分甘蔗田被毁，这会使得糖的价格上升，这会使得冰激淋在任何一种既定价格下的供给量都会减少，而需求没有变化，所以需求量会沿着需求曲线移动。</p><p>假设上述中的天气炎热和台风同时出现，则供给与需求都会移动，此时需求曲线右移，供给曲线左移，根据移动幅度的相对大小，可能会出现如下两种情况。</p><p><img src="supply_and_demand_move.png"></p><p> 在这两种情况下，均衡价格都上升了，但是均衡数量却不一样</p><ul><li>在 a 中，需求大幅增加，供给小幅减小，均衡数量上升</li><li>在 b 中，需求小幅增加，供给大幅减小，均衡数量下降</li></ul><p>因此，如果同时遇到天气炎热和台风，这肯定会提高冰激淋的价格，但是对冰激淋销售量的影响是不确定的。</p><p>整体而言，供给与需求变动时，价格和数量会发生如下不同的变化。</p><table><thead><tr><th></th><th>供给未变</th><th>供给增加</th><th>供给减少</th></tr></thead><tbody><tr><td><strong>需求未变</strong></td><td>价格相同 &amp; 数量相同</td><td>价格下降 &amp; 数量增加</td><td>价格上升 &amp; 数量减少</td></tr><tr><td><strong>需求增加</strong></td><td>价格上升 &amp; 数量增加</td><td><strong>价格不确定</strong> &amp; 数量增加</td><td>价格上升 &amp; <strong>数量不确定</strong></td></tr><tr><td><strong>需求减少</strong></td><td>价格下降 &amp; 数量减少</td><td>价格下降 &amp; <strong>数量不确定</strong></td><td><strong>价格不确定</strong> &amp; 数量减少</td></tr></tbody></table><h2 id="价格进行资源配置"><a href="#价格进行资源配置" class="headerlink" title="价格进行资源配置"></a>价格进行资源配置</h2><p>供给与需求共同决定了经济活动中不同物品与服务的价格，价格决定了谁生产什么及生产多少，谁消费什么及消费多少。</p><p>正如亚当斯密所说的一只看不见的手引导这市场经济，那么，价格机制就是这只看不见的手用来指挥经济交响乐队的指挥棒。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>完 ～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 微观经济学 </tag>
            
            <tag> 市场供给 </tag>
            
            <tag> 市场需求 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>支持向量机原理解析</title>
      <link href="2020/12/26/zhi-chi-xiang-liang-ji-yuan-li-jie-xi/"/>
      <url>2020/12/26/zhi-chi-xiang-liang-ji-yuan-li-jie-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="支持向量机算法"><a href="#支持向量机算法" class="headerlink" title="支持向量机算法"></a>支持向量机算法</h2><p>支持向量机（support vector machines，SVM）是一种分类模型，其基本定义为特征空间上的间隔最大化的线性分类器，本质上是一个求解凸二次规划的问题。</p><p>支持向量机是求解特征空间上的最大间隔（软间隔、硬间隔），是一个线性分类器，为了支持非线性的分类，引入了核技巧，用于将输入从输入空间映射到特征空间。相比较而言，核变换方法算是比支持向量机用得更广泛的一种机器学习方法。</p><p>支持向量机主要分为三类：</p><ul><li>线性可分支持向量机</li><li>线性支持向量机</li><li>非线性支持向量机</li></ul><p>简要说明它们差异前，先认识两个概念之间的关系，分别是输入空间、特征空间。假设一个分类问题的输入空间于特征空间不同，则线性可分向量机和线性支持向量机假设这两个空间的元素可以一一对应，非线性支持向量机则利用一个非线性核技巧完成映射。支持向量机的学习都是基于特征空间进行的。</p><p>下面分别进行原理解析。</p><h2 id="线性可分支持向量机"><a href="#线性可分支持向量机" class="headerlink" title="线性可分支持向量机"></a>线性可分支持向量机</h2><h3 id="线性可分支持向量机-1"><a href="#线性可分支持向量机-1" class="headerlink" title="线性可分支持向量机"></a>线性可分支持向量机</h3><p>假设特征空间中的训练数据集为</p><p>$$T = {(x_{1}, y_{1}), (x_{2}, y_{2}), \cdots, (x_{N}, y_{N}))}$$</p><p>学习的目标就是找到一个超平面，能将实例分到不同类中，分离超平面方程可以写为：</p><p>$$w \cdot x + b = y$$</p><p>其中 $w$ 是法向量， 法向量指向的一侧是正类，另一侧是负类。</p><p>一般情况下，当训练数据集线性可分时，存在无穷多个分离超平面。如果使用感知机算法（误分类最小的策略），此时的解会有无穷多个；线性可分支持向量机利用间隔最大化求解超平面，此时的解是唯一解。</p><h3 id="函数间隔与几何间隔"><a href="#函数间隔与几何间隔" class="headerlink" title="函数间隔与几何间隔"></a>函数间隔与几何间隔</h3><p>看下面这幅图，重点看 $A、B、C$ 三点。</p><p><img src="svm_abc.png"></p><ul><li> $A$ 点距离超平面远，预测为正类的可信度高</li><li> $C$ 点距离超平面近，预测为正类的可信度低</li><li> $B$ 点介于 $A、C$ 之间，可信度也介于之间</li></ul><p>也就是说，一个点距离分类超平面的远近可以表示分类预测的准确程度，那么在 $w \cdot x + b = 0$ 时，$|w \cdot x + b|$ 就能表示 $x$ 距离超平面的远近，而此时 $y$ 的符号是否一致可以表示分类是否正确。于是函数间隔就可以写成。</p><p>$$\hat{\gamma_{i}} = y_{i}(w \cdot x_{i} + b)$$</p><p>超平面与所有数据集的间隔就是所有样本点的函数间隔的最小值（$\gamma = \min \hat{\gamma_{i}}$ ，在这个间隔内，任意一个超平面都可以把数据集正确分类）。</p><p>不过只有函数间隔存在一个问题，只要成比例的改变 $w$ 和 $b$ （比如变成 $2w$ 和 $2b$ ），超平面不会改变，但是函数间隔却变成了原来的2倍。即有必要对 $w$ 加一些约束，如规范化:</p><p>$$||w|| = 1$$</p><p>如此可以使得函数间隔是确定的，此时函数间隔就变成了几何间隔。</p><p>$$\gamma_{i} = y_{i}(\frac{w}{||w||} \cdot x_{i} + \frac{b}{||w||})$$</p><p>同样，超平面与所有数据集的间隔就是所有样本点的函数间隔的最小值（$\gamma = \min \gamma_{i}$ ）</p><h3 id="间隔最大化"><a href="#间隔最大化" class="headerlink" title="间隔最大化"></a>间隔最大化</h3><p>可分离超平面有无穷多个，但是几何间隔最大的分离超平面是唯一的，在线性可分的情况下，这种间隔称为硬间隔（近似线性可分的情况下为软间隔）。</p><p>求解间隔最大的超平面可以表示为如下约束问题：</p><p>$$\begin{array}{l}<br>\max_{w, b} &amp; \gamma \\<br>s.t &amp; y_{i}(\frac{w}{||w||} \cdot x_{i} + \frac{b}{||w||}) \geq \gamma, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>基于几何间隔和函数间隔的关系，上式可以改写为</p><p>$$\begin{array}{l}<br>\max_{w, b} &amp; \frac{\gamma}{||w||} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) \geq \hat{\gamma}, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>因为函数间隔的倍数不会改变超平面，所以我们可以取 $\hat{\gamma} = 1$，同时最大化 $\frac{1}{||w||}$ 和最小化 $\frac{1}{2}||w||^{2}$ （$\frac{1}{2}$和平方均码是为了求导方便）等价。 所以上式还可以进一步改写：</p><p>$$\begin{array}{l}<br>\min_{w, b} &amp; \frac{1}{2}||w||^{2} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) - 1 \geq 0, &amp; i = 1, 2,\cdots, N \\<br>\end{array}$$</p><p>目标函数式二次函数，约束条件是仿射函数，上述的凸优化问题就成了凸二次规划问题，可求解得最优解 $w^{<em>}$，$b^{</em>}$，由此得最优分离超平面 </p><p>$$w^{*} \cdot x + b^{*} = 0$$</p><h3 id="间隔边界"><a href="#间隔边界" class="headerlink" title="间隔边界"></a>间隔边界</h3><p>训练数据集中与分离超平面距离最近的样本点的实例即为支持向量，那么在约束条件下，支持向量就是：</p><p>$$y_{i}(w \cdot x_{i} + b) - 1 = 0$$</p><p>对于 $y_{i} = +1$ 的点，支持向量超平面为</p><p>$$H_{1}: w \cdot x + b = 1$$</p><p>对于 $y_{i} = -1$ 的点，支持向量超平面为</p><p>$$H_{2}: w \cdot x + b = -1$$</p><p><img src="support_vector.png"></p><p>所以间隔依赖法向量 $w$，为 $\frac{2}{||w||}$，$H_{1}$ 和 $H_{2}$ 为间隔边界。</p><h3 id="线性可分支持向量机对偶算法"><a href="#线性可分支持向量机对偶算法" class="headerlink" title="线性可分支持向量机对偶算法"></a>线性可分支持向量机对偶算法</h3><h4 id="凸优化问题转化为对偶问题"><a href="#凸优化问题转化为对偶问题" class="headerlink" title="凸优化问题转化为对偶问题"></a>凸优化问题转化为对偶问题</h4><p>求解最优化问题可以应用拉格朗日对偶性，求解对偶问题得到原始问题的解，求解对偶问题至少有两个好处：</p><ul><li>对偶问题更容易求解</li><li>可以自然的引入核函数，推广到非线性分类问题</li></ul><p>首先构建一个拉格朗日函数，对每个不等式约束引入拉格朗日乘子（拉格朗日乘子向量$\alpha = (\alpha_{1}, \alpha_{2}, \cdots, \alpha_{N})^{T}$）。定义拉格朗日函数为</p><p>$$L(w, b, \alpha) = \frac{1}{2}||w||^{2} - \sum_{i=1}^{N}\alpha_{i}y_{i}(w \cdot x_{i} + b) + \sum_{i=1}^{N}\alpha_{i}$$</p><p>原始问题的对偶问题变成了极大极小问题。</p><p>$$\max_{\alpha} \min_{w, b} L(w, b, \alpha)$$</p><p>解该对偶问题，首先求 $L(w, b, \alpha)$ 对 $w, b$ 的极小，再求对 $\alpha$ 的极大。</p><h4 id="求-min-w-b-L-w-b-alpha"><a href="#求-min-w-b-L-w-b-alpha" class="headerlink" title="求 $\min_{w, b} L(w, b, \alpha)$"></a>求 $\min_{w, b} L(w, b, \alpha)$</h4><p>将 $L(w, b, \alpha)$ 分别对 $w, b$ 求偏导数并令其为0。</p><p>$$\frac{\partial L(w, b, \alpha)}{\partial w} = w - \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \alpha)}{\partial b} = -\sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>得</p><p>$$w = \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i}$$</p><p>$$\sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>带入拉格朗日函数得</p><p>$$\begin{align}<br>L(w, b, \alpha)<br>&amp; = \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = 1}^{N}\alpha_{i}y_{i}((\sum_{j = 1}^{N}\alpha_{j}y_{j}x_{j}) \cdot x_{i} + b) + \sum_{i = i}^{N}\alpha_{i} \\<br>&amp; = -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>\end{align}$$</p><h4 id="求-min-w-b-L-w-b-alpha-对-alpha-的极大"><a href="#求-min-w-b-L-w-b-alpha-对-alpha-的极大" class="headerlink" title="求$\min_{w, b} L(w, b, \alpha)$ 对 $\alpha$ 的极大"></a>求$\min_{w, b} L(w, b, \alpha)$ 对 $\alpha$ 的极大</h4><p>得如下对偶问题</p><p>$$\begin{array}{l}<br>\max_{\alpha} &amp; -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>将极大转化为极小就得到如下的对偶最优化问题</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><h4 id="反解原始最优化问题"><a href="#反解原始最优化问题" class="headerlink" title="反解原始最优化问题"></a>反解原始最优化问题</h4><p>求得 $\alpha$ 后反解的原始最优化问题的解，存在一个下标 $j$ ，使得 $\alpha_{j} \geq 0$ ，有</p><p>$$w^{*} = \sum_{i = 1}^{N} \alpha_{i}^{*}y_{i}x_{i}$$</p><p>$$b^{*} = y_{j} - \sum_{i = 1}^{N}\alpha_{i}y_{i}(x_{i} \cdot x_{j})$$</p><p>以上就完成了线性可分支持向量机的算法，但是实际数据经常不是线性可分的，于是有了线性支持向量机。</p><h2 id="线性支持向量机"><a href="#线性支持向量机" class="headerlink" title="线性支持向量机"></a>线性支持向量机</h2><h3 id="线性支持向量机-1"><a href="#线性支持向量机-1" class="headerlink" title="线性支持向量机"></a>线性支持向量机</h3><p>线性可分支持向量机中有较强的不等式约束，在更一般的情况下，这些不等式约束并非全部成立，因此需要从上面的硬间隔改为软间隔。</p><p>同样假设特征空间的训练数据集为</p><p>$$T = {(x_{1}, y_{1}), (x_{2}, y_{2}), \cdots, (x_{N}, y_{N}))}$$</p><p>线性不可分意味着函数间隔不能满足大于等于1的约束条件，为了解决这个问题，引入一个松弛变量 $\xi_{i} \geq 0$ ，使得函数间隔加上这个松弛变量后满足大于等于1的条件。于是，约束条件就变成了</p><p>$$y_{i}(w \cdot x_{i} + b) \geq 1 - \xi_{i}$$</p><p>同时，每一个松弛变量 $\xi_{i}$ 会有一个代价，于是原目标函数就变成了</p><p>$$\frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N} \xi_{i}$$</p><p>其中 $C \geq 0$ 为惩罚函数，$C$ 值越大时对误分类的惩罚越大，反之越小。上式表示让间隔仅可能大，同时使误分类尽可能小，而 $C$ 就是二者的调和系数。</p><p>于是线性不可能分的支持向量机就变成了如下的凸二次规划问题。</p><p> $$\begin{array}{l}<br>\min_{w, b, \xi} &amp; \frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N} \xi_{i} \\<br>s.t &amp; y_{i}(w \cdot x_{i} + b) \geq 1 - \xi_{i} &amp; i = 1, 2, \cdots, N \\<br>s.t &amp; \xi \geq 0, &amp; i = 1, 2, \cdots, N<br>\end{array}$$</p><h3 id="线性支持向量机对偶算法"><a href="#线性支持向量机对偶算法" class="headerlink" title="线性支持向量机对偶算法"></a>线性支持向量机对偶算法</h3><p>首先还是构造拉格朗日函数（ $\alpha_{i} \geq 0, \mu \geq 0$ ）</p><p>$$L(w, b, \xi, \alpha, \mu) = \frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N}\xi_{i} - \sum_{i = 1}^{N}\alpha_{i}(y_{i}(w \cdot x_{i} + b) - 1 + \xi_{i}) - \sum_{i = 1}^{N}\mu \xi_{i}$$</p><p>首先求 $L(w, b, \xi, \alpha, \mu)$ 对 $w, b, \xi$ 的极小</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial w} = w - \sum_{i = 1}^{N}\alpha_{i}y_{i}x_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial b} = \sum_{i = 1}^{N}\alpha_{i}y_{i} = 0$$</p><p>$$\frac{\partial L(w, b, \xi, \alpha, \mu)}{\partial \xi_{i}} = C - \alpha_{i} - \mu_{i} = 0$$</p><p>带入拉格朗日函数中有</p><p>$$\min_{w, b, \xi} L(w, b, \xi, \alpha, \mu) = -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i}$$</p><p>再对 $\min_{w, b, \xi} L(w, b, \xi, \alpha, \mu)$ 求 $\alpha$ 的极大，得对偶问题</p><p>$$\begin{array}{l}<br>\max_{\alpha} &amp; -\frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) + \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; C - \alpha_{i} - \mu_{i} = 0 \\<br>s.t &amp; \alpha_{i} \geq 0 \\<br>s.t &amp; \mu_{i} \geq 0, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>对约束条件进行变换可以得到</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}(x_{i} \cdot x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; 0 \leq \alpha_{i} \leq C, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>反解原始最优化问题就有，若存在一个 $\alpha^{*}$ 的一个分量 $\alpha_{j}^{*}, 0 \leq \alpha_{j} \leq C$ 有</p><p>$$w^{*} = \sum_{i = 1}^{N} \alpha_{i}^{*}y_{i}x_{i}$$</p><p>$$b^{*} = y_{j} - \sum_{i = 1}^{N}\alpha_{i}y_{i}(x_{i} \cdot x_{j})$$</p><h3 id="合页损失函数"><a href="#合页损失函数" class="headerlink" title="合页损失函数"></a>合页损失函数</h3><p>线性支持向量机还可以写成如下的最小化目标函数</p><p>$$\min_{w, b} \sum_{i = 1}^{N}[1 - y_{i}(w \cdot x_{i} + b)]_{+} + \lambda||w||^{2}$$</p><p>其中下标 $+$ 表示取正值的函数</p><p>$$[z]_{+}= \begin{cases} z, &amp; z &gt; 0 \ 0, &amp; z \leq 0 \end{cases}$$</p><p>令 </p><p>$$[1 - y_{i}(w \cdot x_{i} + b)]<em>{+} = \xi</em>{i}$$</p><p>则需要最小化的目标函数可以可以写成</p><p>$$\min_{w, b} \sum_{i = 1}^{N}\xi_{i} + \lambda||w||^{2}$$</p><p>取 $\lambda = \frac{1}{2C}$ 则</p><p>$$\min_{w, b} \frac{1}{C}(\frac{1}{2}||w||^{2} + C \sum_{i = 1}^{N}\xi_{i})$$</p><p>与原目标函数等价。</p><p>因为该损失函数形似合页，故得名为合页函数，下图即是一个函数图形。横轴是函数间隔，纵轴是损失。</p><p><img src="hinge_loss.png"></p><h2 id="非线性支持向量机"><a href="#非线性支持向量机" class="headerlink" title="非线性支持向量机"></a>非线性支持向量机</h2><h3 id="核技巧"><a href="#核技巧" class="headerlink" title="核技巧"></a>核技巧</h3><p>对于一个给定的训练数据集，有时候一个实数空间上的线性平面不可分，需要一个超曲面才能分开，这样的问题就是非线性可分问题。</p><p>为了解决非线性问题，可以先通过一个非线性变换，将非线性问题变换为线性问题，然后通过解变换后的线性问题来求解原来的非线性问题。如下面的两幅图，可以将左图椭圆变换为右图中的直线。</p><p><img src="kernel.png"></p><p>对于示图问题，可以定义一个原空间到新空间的映射变换</p><p>$$z = \phi(x) = ((x^{(1)})^{2}, (x^{(2)})^{2})^{T}$$</p><p>那么原空间中过椭圆</p><p>$$w_{1}(x^{(1)})^{2} + w_{2}(x^{(2)})^{2} + b = 0$$</p><p>变换成新空间中的直线</p><p>$$w_{1}z^{(1)} + w_{2}z^{(2)} + b = 0$$</p><p>如此，原空间的非线性可分就变成了新空间中的线性可分。</p><p>现在定义核函数，对于一个从输入空间 $X$ 到输出空间 $H$ 的映射</p><p>$$\phi(x): X \to H$$</p><p>使得所有的 $x, z \in X$ ，函数 $K(x, z)$ ，满足内积运算</p><p>$$K(x, z) = \phi(x) \cdot \phi(z)$$</p><p>则称 $K(x, z)$ 为核函数，$\phi(x)$ 为映射函数。</p><p>通常情况下，核技巧在学习和预测时只定义核函数 $K(x, z)$ ，而不会显式的定义映射函数 $\phi$ ，因为特征空间经常是高维的（甚至无穷维），而且对于特定的 $K(x, z)$ ，可能有很多不同的映射 $\phi$。</p><p>在线性支持向量机的对偶问题中，目标函数只涉及了实例与实例之间的内积，所以将内积 $x_{i} \cdot x_{j}$ 使用核函数 $K(x_{i}, x_{j})$ 来代替，此时对偶问题的目标函数就成为了</p><p>$$W(\alpha) = \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}K(x_{i},x_{j}) - \sum_{i = 1}^{N}\alpha_{i}$$</p><p>这等价于经过映射函数将原来的输入空间变换到一个新的特征空间，将输入空间中的内积 $x_{i} \cdot x_{j}$ 变换成特征空间的内积 $\phi(x_{i}) \cdot \phi(x_{j})$ ，在新的特征空间里学习线性支持向量机。</p><p>所以对于非线性支持向量机学习算法，可以构造如下的最优化问题：</p><p>$$\begin{array}{l}<br>\min_{\alpha} &amp; \frac{1}{2}\sum_{i = 1}^{N}\sum_{j = 1}^{N}\alpha_{i}\alpha_{j}y_{i}y_{j}K(x_{i}, x_{j}) - \sum_{i = i}^{N}\alpha_{i} \\<br>s.t &amp; \sum_{i = 1}^{N} \alpha_{i} y_{i} = 0 \\<br>s.t &amp; 0 \leq \alpha_{i} \leq C, &amp; i = 1, 2,\cdots, N<br>\end{array}$$</p><p>求得最优解 $\alpha^{*} = (\alpha_{1}^{*}, \alpha_{2}^{*}, \cdots, \alpha_{N}^{*})^{T}$</p><p>选择 $\alpha^{*}$ 的一个正分量 $0 \leq \alpha_{j}^{*} &lt; C$ 得</p><p>$$b^{*} = y_{i} - \sum_{i = 1}^{N}\alpha_{i}^{*}y_{i}K(x_{i}, x_{j})$$</p><h3 id="核函数"><a href="#核函数" class="headerlink" title="核函数"></a>核函数</h3><h4 id="正定核"><a href="#正定核" class="headerlink" title="正定核"></a>正定核</h4><p>既然映射函数可以通过内积求得核函数，而且核函数可以直接在特征空间上使用线性支持向量机算法，那么，如何判定一个函数 $K(x, z)$ 是不是一个核函数呢。</p><p>通常情况下所说的核函数都是正定核函数，下面就来看看成为正定核函数的充要条件。</p><p>函数 $K(x, z)$ 是正定核函数的充要条件是对于任意的 $x_{i}$ ，$K(x, z)$ 对应的 Gram 矩阵</p><p>$$K = [K(x_{i}, x_{j})]_{m \times m}$$</p><p>是半正定的。</p><p>必要性比较好证明，对于一个正定核，有</p><p>$$K(x, z) = \phi(x) \cdot \phi(z)$$</p><p>构造 $K(x, z)$ 关于 $x_{i}, x_{2}, \cdots, x_{m}$ 的Gram矩阵为</p><p>$$[K_{ij}]<em>{m \times m} = [K(x</em>{i}, x_{j})]_{m \times m}$$</p><p>于是</p><p>$$\begin{align}<br>\sum_{i,j = 1}^{N}c_{i}c_{j}K(x_{i},x_{j}) =<br>&amp; \sum_{i, j = 1}^{N}c_{i}c_{j}(\phi(x_{i}) \cdot \phi(x_{j})) \\<br>&amp; (\sum_{i}c_{i}\phi(x_{i})) \cdot (\sum_{j}c_{j}\phi(x_{j})) \\<br>&amp; ||\sum_{i}c_{i}\phi(x_{i})||^{2} \geq 0<br>\end{align}$$</p><p>这就说明Gram矩阵是半正定的。</p><p>充分性相对比较复杂，需要构造一个向量空间的映射，略（主要是我也还没有吃透）。</p><p>虽然知道了正定核的充要条件，但是检验一个函数是不是正定核也并不容易，因为需要对任意输入数据集验证 $K$ 对应的 Gram 矩阵是否是半正定的。实际使用中一般都用已有的核函数。</p><h4 id="常用的核函数有"><a href="#常用的核函数有" class="headerlink" title="常用的核函数有:"></a>常用的核函数有:</h4><ul><li><p>多项式核函数</p><p>$$K(x, z) = (x \cdot z + 1)^{p}$$</p></li><li><p>高斯核函数</p><p>$$K(x, z) = exp(-\frac{||x - z||^{2}}{2\sigma^{2}})$$</p></li></ul><p>除了这两个核函数，在离线数据集上还有一个字符串核函数，在文本分类、信息检索、生物信息学中有应用，大概逻辑是两个字符串中长度相同的子字符串组成的特征向量的余弦相似度。直观而言，两个字符串的相同的子串越多，它们就越相似，反之越不相似。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>统计学习方法，李航，-第2版，–清华大学出版社，2019</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 支持向量机 </tag>
            
            <tag> 对偶算法 </tag>
            
            <tag> 核变换 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>贸易让每个人的状况都变得更好</title>
      <link href="2020/12/20/mao-yi-rang-mei-ge-ren-de-zhuang-kuang-du-bian-de-geng-hao/"/>
      <url>2020/12/20/mao-yi-rang-mei-ge-ren-de-zhuang-kuang-du-bian-de-geng-hao/</url>
      
        <content type="html"><![CDATA[<h2 id="从一个故事开始"><a href="#从一个故事开始" class="headerlink" title="从一个故事开始"></a>从一个故事开始</h2><p>假设世界上只有两种物品——牛肉和土豆，而且世界上只有两种人——牧牛的Rose和种土豆的Frank，他们每个人都既喜欢吃牛肉，又喜欢吃土豆。</p><p>那么在这种情况下，贸易的好处是显而易见的，如果他们老死不相往来，那么一直吃牛肉的Rose和一直吃土豆的Frank都不会生活得很惬意，而贸易可以让他们享用到更多品种的物品。</p><p>上面的情况比较极端，通常情况下是Rose既可以养牛，也可以种土豆，Frank亦然，只是两人各自擅长的不同，这种情况下其实也能有体现贸易的优势。但是，当某个人在生产每一种物品上都有优势时，贸易的好处就不那么明显了，比如Rose在养牛和种土豆上都优于Frank，这种情况下Rose应该选择自给自足吗？这篇文章就来研究这个问题。</p><h2 id="生产可能性"><a href="#生产可能性" class="headerlink" title="生产可能性"></a>生产可能性</h2><p>假如Rose和Frank每天都工作8小时，下面这个图给出了Rose和Frank的生产可能性。</p><p><img src="shengchanjihui.png"></p><p>如，<strong>Frank生产1个盎司牛肉需要60分钟，一天可以生产8盎司，生产1盎司土豆需要15分钟，一天可以生产32盎司</strong>。</p><p>如此比较而言，上图可以看出Rose不管是在生产牛肉还是生产土豆，都较为擅长。</p><p>在没有贸易的情况下，Rose和Frank必须对自己生产的牛肉和土豆的数量进行权衡取舍，他们很有可能选择这样的生产可能性（假设他们对牛肉和土豆的偏好相同，均使用自己的一半的生产可能性）。</p><p><img src="kenengxingbianjie.png"></p><p>在这种自给自足的情况下，Rose和Frank的生产的就是他们消费的，生产可能性边界就是他们的消费可能性边界。</p><h2 id="专业化与贸易"><a href="#专业化与贸易" class="headerlink" title="专业化与贸易"></a>专业化与贸易</h2><p>在没有贸易的情况下</p><p>Rose每天可以吃<strong>12盎司牛肉</strong>和<strong>24盎司土豆</strong>；</p><p>Frank每天可以吃<strong>4盎司牛肉</strong>和<strong>16盎司土豆</strong>。</p><p>现在假设他们之间存在贸易。</p><p>如果Frank一天用全部的8小时种土豆，将生产32盎司的土豆，然后将这其中的15盎司给Rose，Rose以5盎司牛肉作为回报。如此Frank每天将获得<strong>5盎司牛肉</strong>和<strong>17盎司土豆</strong>（32 - 15）。</p><p>相应地，Rose每天用6小时养牛，2小时种土豆，可以生产18盎司牛肉和12盎司土豆，给Frank5盎司牛肉后，Rose每天还有<strong>13盎司牛肉</strong>（18 - 5）和<strong>27盎司土豆</strong>（12 + 15）。</p><p>下图给出了贸易增加的消费</p><p><img src="maoyihaochu.png"></p><p>新的生产可能性边界和消费可能性边界也就出现了。</p><p><img src="maoyikenengxing.png"></p><h2 id="绝对优势与比较优势"><a href="#绝对优势与比较优势" class="headerlink" title="绝对优势与比较优势"></a>绝对优势与比较优势</h2><h3 id="绝对优势"><a href="#绝对优势" class="headerlink" title="绝对优势"></a>绝对优势</h3><p>上面的例子中Rose在养牛和种土豆上都优于Frank，但是贸易还是让他们的消费可能性都变高了，这就涉及到绝对优势和比较优势。</p><p><strong>绝对优势</strong>是指一个生产者用比另一个生产者更少的投入生产某种物品的能力。</p><p>上面这个例子中的Rose就是绝对优势一方。</p><h3 id="机会成本和比较优势"><a href="#机会成本和比较优势" class="headerlink" title="机会成本和比较优势"></a>机会成本和比较优势</h3><p>在生产牛肉和土豆的过程中，除了比较Rose和Frank各自的生产可能性外，还需要考虑Rose和Frank的机会成本，<strong>机会成本</strong>是为了得到某种东西必须放弃的其他东西。</p><p>以Rose为例，Rose每天可以生产24盎司牛肉或48盎司土豆，即Rose生产1盎司土豆就需要放弃生产1/2盎司的牛肉，生产1盎司土豆的机会成本就是1/2盎司的牛肉。</p><p>同理，Frank生产1盎司土豆的机会成本是1/4盎司牛肉。</p><p>于是我们可能得到这样的机会成本结构。</p><p><img src="jihuichengben.png"></p><p>对比可以发现，Frank生产土豆的机会成本比Rose的低，相反，Rose生产牛肉的机会成本比Frank的低。如果一个生产者以低于另一生产者的机会成本生产某种物品的能力，我们称之为<strong>比较优势</strong>。这就说明<strong>Frank在种土豆上有比较优势，Rose在养牛上有比较优势</strong>。</p><p>尽管一个人可能在两种物品上都具有绝对优势，但是不可能在两种物品上都具有相对优势（因为一种物品的机会成本是另一种物品机会成本的倒数）。</p><h2 id="贸易"><a href="#贸易" class="headerlink" title="贸易"></a>贸易</h2><h3 id="贸易与比较优势"><a href="#贸易与比较优势" class="headerlink" title="贸易与比较优势"></a>贸易与比较优势</h3><p>基于比较优势，于是有了专业化与贸易，当每个人专门生产自己有比较优势的物品时，经济的总量就增加了，经济的蛋糕变大可以改善每个人的状况。</p><p>Frank用15盎司的土豆换到了5盎司的牛肉，即Frank用3盎司土豆的价格购买了1盎司牛肉，但是Frank生成1盎司牛肉的机会成本是4盎司土豆，所以贸易对于Frank来说是有利的。</p><p>Rose用5盎司的牛肉购买了15盎司的土豆，即对于Rose而言，土豆的价格是1/3盎司牛肉，但是Rose生产1盎司土豆的机会成本是1/2盎司牛肉，所以贸易对于Rose来说也是有利的。</p><p>所以，<strong>贸易可以使社会上每个人都获益，因为它使人们可以专门从事他们具有比较优势的活动。</strong></p><h3 id="贸易与价格"><a href="#贸易与价格" class="headerlink" title="贸易与价格"></a>贸易与价格</h3><p>影响贸易价格的因素比较复杂，一般规律为对于从贸易中获益的双方而言，他们进行贸易的价格在两者机会成本之间。</p><p>如在上例中。</p><p>Rose生产1盎司牛肉的机会成本是2盎司土豆。Frank生产1盎司牛肉的机会成本是4盎司土豆。因此1盎司牛肉贸易价格会在2盎司土豆和4盎司土豆之间（上例是3盎司）。</p><p><strong>相互有利的贸易价格只能在2到4之间</strong>，只有在这个价格范围内，双方都能以低于他们机会成本的价格获得另一物品，贸易才能进行，双方的状况都能得到改善。</p><h2 id="结论"><a href="#结论" class="headerlink" title="结论"></a>结论</h2><p><strong>由于比较优势的存在，贸易可以使每个贸易参与者的状况都变得更好</strong>。</p><p>当然，对于市场上的贸易甚至国际贸易而言，这个问题会复杂很多，即使贸易可以使一个国家整体的状况变得更好，但是对于不同的人影响是不同的，比如美国出口食品而进口汽车时，这对于美国的农民和汽车工人的影响是不同的。</p><p>只是有时候和政治家观点不同的是，国际贸易并不像战争，战争中会有胜利者与失败者，但是贸易可以使所有国家都实现更大的繁荣。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贸易 </tag>
            
            <tag> 比较优势 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>经济学十大原理</title>
      <link href="2020/12/13/jing-ji-xue-shi-da-yuan-li/"/>
      <url>2020/12/13/jing-ji-xue-shi-da-yuan-li/</url>
      
        <content type="html"><![CDATA[<h2 id="总览"><a href="#总览" class="headerlink" title="总览"></a>总览</h2><p>十个经济学原理，按照1、2、3点罗列出来逻辑是很清晰，不过不易于记忆，按照一定的逻辑串一下。</p><p><img src="yuanli.png"></p><h2 id="原理一：人们面临权衡取舍"><a href="#原理一：人们面临权衡取舍" class="headerlink" title="原理一：人们面临权衡取舍"></a>原理一：人们面临权衡取舍</h2><p>因为社会拥有的资源是有限的，不能生产人们所需要的任何物品和服务，也就是说社会资源是稀缺的，这种<strong>稀缺性</strong>导致人们必须在在某些服务和物品之间作出权衡取舍，就像<strong>鱼与熊掌不可兼得</strong>一样。</p><p>除了个人面临的服务与物品的权衡取舍，社会面临另一种权衡取舍——<strong>效率与平等</strong>，效率希望从资源中得到最大化的利益，平等则希望将这些利益平均地分配给社会成员。例如为了平等，政府通过个人所得税、失业保险等措施把富人的收入再分配给穷人时，就减少了对辛勤工作的奖励，结果导致人们工作的时间减少，生产的物品和服务随之减少，社会效率变低。换句话说，当政府想把经济蛋糕切成均等的小块时，这快蛋糕本身变小了。</p><h2 id="原理二：某些东西的成本是为了得到它所放弃的东西"><a href="#原理二：某些东西的成本是为了得到它所放弃的东西" class="headerlink" title="原理二：某些东西的成本是为了得到它所放弃的东西"></a>原理二：某些东西的成本是为了得到它所放弃的东西</h2><p>由于人们面临着权衡取舍，就必然在获得某些东西时放弃其他东西，放弃的东西就是<strong>机会成本</strong>。</p><h2 id="原理三：理性人考虑边际量"><a href="#原理三：理性人考虑边际量" class="headerlink" title="原理三：理性人考虑边际量"></a>原理三：理性人考虑边际量</h2><p>经济学中经常会有<strong>理性人假设</strong>，即指人可以系统而有目的的尽最大努力实现其目标。理性人的决策通常不是黑与白的选择，而是介于两者之间的灰色地带，比如在看电视和看书之间，并不是把所有时间都拿来看书，也不是把所有时间都拿来看电视，理性人经常会比较决策的<strong>边际收益</strong>与<strong>边际成本</strong>。</p><p>当且仅当一种行为的边际收益大于边际成本时，理性人才会采取行动。</p><h2 id="原理四：人们会对激励作出反应"><a href="#原理四：人们会对激励作出反应" class="headerlink" title="原理四：人们会对激励作出反应"></a>原理四：人们会对激励作出反应</h2><p><strong>激励</strong>是引起一个人做出某种行为的某种东西，比如奖励或惩罚的预期，这种奖励或惩罚旧对应着相应的收益或成本，所以理性人会对激励做出反应。</p><p>举一个安全带的例子，在20世纪60年代之前是没有安全带的，当一个人系上安全带后，发生车祸时存活的概率提高了，但是这降低了司机在发生车祸时需要面临的惩罚，于是司机更快速、更不谨慎的开车，结果导致车祸的次数增加，有统计结果表明，因为安全带的相关法律，司机死亡人数变动很小，但是行人死亡人数增加了。</p><h2 id="原理五：贸易可以使每个人的状况都变得更好"><a href="#原理五：贸易可以使每个人的状况都变得更好" class="headerlink" title="原理五：贸易可以使每个人的状况都变得更好"></a>原理五：贸易可以使每个人的状况都变得更好</h2><p>举一个极端的例子，如果一个家庭与其他家庭完全隔离开，那么这个家庭就需要生产自己所需的全部东西，比如自己种粮食，自己做衣服，自己盖房子，显然，这种利用资源的方式是低效的。贸易可以使每个人都专门从事自己最擅长的社会活动，通过与他人贸易，人们可以以较低的成本获得各种各样的物品与服务。</p><h2 id="原理六：市场通常是组织经济活动的一种好方法"><a href="#原理六：市场通常是组织经济活动的一种好方法" class="headerlink" title="原理六：市场通常是组织经济活动的一种好方法"></a>原理六：市场通常是组织经济活动的一种好方法</h2><p>与市场经济对应的是中央计划经济，<strong>中央计划经济</strong>由政府官员来配置稀缺资源，而<strong>市场经济</strong>通过成千上万的企业和家庭来分散决策资源配置，这看起来有点不可思议，毕竟在市场经济中，没有任何一个人是为了追求整个社会的经济福利，但是这种决策的确让总体经济福利增加了。</p><p>这种市场经济的调节作用就是亚当斯密所说的<strong>看不见的手</strong>，而在经济活动中，<strong>价格</strong>就是这只看不见的手指引经济活动的工具。市场价格反映了物品的社会价值，也反应了生产该物品的社会成本。在亚当斯密看来，所有限制看不见的手进行决策的做法，都是低效的，就像税收扭曲了价格，从而也扭曲了家庭和企业的决策。</p><h2 id="原理七：政府有时可以改善市场效果"><a href="#原理七：政府有时可以改善市场效果" class="headerlink" title="原理七：政府有时可以改善市场效果"></a>原理七：政府有时可以改善市场效果</h2><p>尽管看不见的手通常可以使经济蛋糕最大化，但情况也并不是总是这样，也有可能会出现市场失灵。</p><p>引起市场失灵的一个可能原因是<strong>外部性</strong>，它指一个人的行为对旁观者福利对影响，以污染为例，当一个产品的生产污染影响了附近人的健康时候，市场本身是不会考虑这种成本的。</p><p>引起市场失灵的另一个原因是<strong>市场势力</strong>，它指单个人、单个公司或某个小群体不适当地影响了市场价格。</p><h2 id="原理八：一国的生产水平取决于它生产物品与服务的能力"><a href="#原理八：一国的生产水平取决于它生产物品与服务的能力" class="headerlink" title="原理八：一国的生产水平取决于它生产物品与服务的能力"></a>原理八：一国的生产水平取决于它生产物品与服务的能力</h2><p>几乎各国之间所有生活水平的差异都可以归因于各国<strong>生产率</strong>（每一单位劳动投入所生产的物品与服务数量的差异），一国生产率的增长决定了它的平均收入的增长率。</p><h2 id="原理九：当政府发行了过多货币时，物价上升"><a href="#原理九：当政府发行了过多货币时，物价上升" class="headerlink" title="原理九：当政府发行了过多货币时，物价上升"></a>原理九：当政府发行了过多货币时，物价上升</h2><p>在1921年1月德国，一份日报只需要0.3马克，但是仅仅在不到两年之后的1922年11月，德国同样的一份日报则需要7000万马克，而这罪魁祸首就是政府发行了太多的货币，导致<strong>通货膨胀</strong>。</p><p>由于通货膨胀会让社会付出各种成本，因此几乎所有国家的经济政策制定者都把保持低通货膨胀作为目标之一。</p><h2 id="原理十：社会面临通货膨胀与失业之间的短期权衡取舍"><a href="#原理十：社会面临通货膨胀与失业之间的短期权衡取舍" class="headerlink" title="原理十：社会面临通货膨胀与失业之间的短期权衡取舍"></a>原理十：社会面临通货膨胀与失业之间的短期权衡取舍</h2><p>在短期中增加货币注入市场，能降低失业率，因为经济中货币增加刺激了社会的整体支出，从而增加了对产品与服务的需求，需要增加会让企业提高物价，同时也激励企业雇佣更多的工人生产，也就意味着更少的<strong>失业</strong>。</p><p>这种权衡取舍在分析<strong>经济周期</strong>时有非常关键的作用，经济周期本身就是在反应生产的物品或服务与雇佣人数的关系变化。</p><h2 id="reference"><a href="#reference" class="headerlink" title="reference"></a>reference</h2><p>经济学原理：微观经济学分册，曼昆，第7版，–北京大学出版社</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> 经济学 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 经济学原理 </tag>
            
            <tag> 微观经济学 </tag>
            
            <tag> 宏观经济学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>目标检测算法的演进</title>
      <link href="2020/12/11/mu-biao-jian-ce-suan-fa-de-yan-jin/"/>
      <url>2020/12/11/mu-biao-jian-ce-suan-fa-de-yan-jin/</url>
      
        <content type="html"><![CDATA[<p>本文为我在公司内部做技术分享时（面向人群不全是算法工程师）的PPT，去掉了部分敏感信息。</p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8701.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8702.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8703.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8704.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8705.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8706.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8707.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8708.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8709.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8710.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8711.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8712.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8713.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8714.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8715.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8716.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8717.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8718.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8719.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8720.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8721.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8722.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8723.png"></p><p><img src="%E5%B9%BB%E7%81%AF%E7%89%8726.png"></p><p>原论文地址</p><p>R-CNN: <a href="https://arxiv.org/abs/1311.2524">Rich feature hierarchies for accurate object detection and semantic segmentation</a></p><p>SPP-Net: <a href="https://arxiv.org/abs/1406.4729">Spatial Pyramid Pooling in Deep Convolutional Networks for Visual Recognition</a></p><p>Fast-RCN: <a href="https://arxiv.org/abs/1504.08083">Fast R-CNN</a></p><p>Faster-RCNN: <a href="https://arxiv.org/abs/1506.01497">Faster R-CNN: Towards Real-Time Object Detection with Region Proposal Networks</a></p><p>SSD: <a href="https://arxiv.org/abs/1512.02325">SSD: Single Shot MultiBox Detector</a></p><p>提到目标检测，怎么能不说YOLO，后面再来。</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 目标检测 </tag>
            
            <tag> CNN </tag>
            
            <tag> R-CNN </tag>
            
            <tag> SPP-Net </tag>
            
            <tag> Fast-RCNN </tag>
            
            <tag> Faster-RCNN </tag>
            
            <tag> SSD </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从CNN到GNN看图神经网络</title>
      <link href="2020/11/22/cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/"/>
      <url>2020/11/22/cong-cnn-dao-gnn-kan-tu-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="图这种数据结构"><a href="#图这种数据结构" class="headerlink" title="图这种数据结构"></a>图这种数据结构</h2><h3 id="图是啥"><a href="#图是啥" class="headerlink" title="图是啥"></a>图是啥</h3><p>图在不同领域会有一些差异，比如数学上的图论研究，数据科学上的图关系性数据库，在计算机工程领域上的图数据结构。</p><p>这里主要的研究对象是图数据结构（Graph）。</p><h3 id="图的定义"><a href="#图的定义" class="headerlink" title="图的定义"></a>图的定义</h3><p>图表示为定点与边的集合，记为 $G = (V, E)$，其中 $V$是定点的集合，$E$是边的集合。</p><h3 id="图的类型"><a href="#图的类型" class="headerlink" title="图的类型"></a>图的类型</h3><ul><li>同构图：图中的节点类型和关系类型都有且仅有一种</li><li>异构图：节点类型或关系类型不只一种</li><li>属性图：相比异构图，属性图给节点或边增加了属性信息</li><li>非显式图：数据之间没有显式的定义关系，需要一句某种规则和计算方式将关系表达出来，如3D视觉中的点云数据</li></ul><h3 id="图的组成"><a href="#图的组成" class="headerlink" title="图的组成"></a>图的组成</h3><ul><li>有向图：边有方向，$&lt;v_{i}, v_{j}&gt;$</li><li>无向图：边无方向，$&lt;v_{i}, v_{j}&gt; = &lt;v_{j}, v_{i}&gt;$</li><li>加权图：每条边都有是个不同的实数，通常是$\in[0, 1]$</li><li>无权图：可理解为每条边的权重都相同，都是1</li><li>非连通图：存在孤立的定点，无任何边与之相连</li><li>连通图：不存在孤立顶点</li><li>二部图：任一边$e_{ij}$，$v_{i} \in A, v_{j} \in B$，如用户与商品</li><li>邻居：存在以一条边相连</li><li>度：以$v_{i}$为端点的数目，所有节点的度与边数关系为 $\sum_{v_{i}}deg(v_{i}) = 2|E|$</li><li>子图：$G^{‘} = (V^{‘}, E^{‘})$的顶点分别是另一个图$G = (V, E)$的顶点的子集和边的子集</li><li>路径：从顶点$v_{i}$出发，沿着一些边经过一些顶点$v_{p1}, v_{p2},\cdots, v_{pm}$到达顶点$v_{j}$，则经过的边就构成连路径，这里有路径的长度，顶点的距离，k阶邻居，k阶子图等概念。</li></ul><h3 id="图的存储"><a href="#图的存储" class="headerlink" title="图的存储"></a>图的存储</h3><h4 id="邻接矩阵"><a href="#邻接矩阵" class="headerlink" title="邻接矩阵"></a>邻接矩阵</h4><p>用矩阵来表示图中节点与节点的关系。公式为：</p><p>$$<br>A_{ij}= \begin{cases}<br>1, &amp; \text {if $(v_{i}, v_{j}) \subseteq E $} \<br>0, &amp; \text {else} \end{cases}<br>$$</p><p>邻接矩阵经常是稀疏的，因此常用稀疏矩阵存储，空间复杂度能到$O(M)$。</p><h4 id="关联矩阵"><a href="#关联矩阵" class="headerlink" title="关联矩阵"></a>关联矩阵</h4><p>与邻接矩阵不同，关联矩阵是用矩阵来表示图中节点与边的关系。公式为</p><p>$$<br>B_{ij}= \begin{cases}<br>1, &amp; \text {if $v_{i}$与$e_{j}$} 相连\<br>0, &amp; \text {else} \end{cases}<br>$$</p><h2 id="一种特殊的图数据——图像"><a href="#一种特殊的图数据——图像" class="headerlink" title="一种特殊的图数据——图像"></a>一种特殊的图数据——图像</h2><p>图是一种数据结构关系，图像也是一种数据结构关系（像素），如果把图像中的像素视为一个节点，那么某一像素附近的栅格就等价于图数据结构中的邻居，像素之间的空间坐标的连线就是图数据中的邻居之间的边。这样图像数据就演变成了非常规则的图数据。这样，在CNN中的各种卷积、池化操作可以推广到更普遍的非结构化的图数据上。达到数据表示、非结构化图数据分类、图表示学习等目的。</p><p>这里看一个经典的图同构问题，可能有点感觉。</p><p><img src="graph_isomorphism.png" alt="图的同构"></p><p>看上去并不相似的两个图，可能是完全等价的。</p><h2 id="卷积神经网络——CNN"><a href="#卷积神经网络——CNN" class="headerlink" title="卷积神经网络——CNN"></a>卷积神经网络——CNN</h2><h3 id="卷积和池化"><a href="#卷积和池化" class="headerlink" title="卷积和池化"></a>卷积和池化</h3><p>CNN是作为常用的模型，这个不详细推导，仅说明一些主要过程。卷积神经网络中最重要的两个过程为卷积与池化。</p><p>卷积诞生于信号领域，它针对某个线性不变的系统，给定输入信号 $f(\tau)$ 和系统响应 $g(\tau)$ ，得系统的输出。</p><p>数据定义为</p><p>$$(f * g)(t) = \int^{\infty}_{-\infty}f(\tau)(t - \tau) d \tau$$</p><p>为了处理这种信号变换，产生了著名的卷机定理，将时域中复杂的卷积运算转换为频域中简单的乘积运算，如下式。</p><p>$$(f * g)(t) \iff F(w)G(w)$$</p><p>对于图像上的卷积，就把连续变量的积分变成了离散变量的求和，原理相同，然后进行乘积运算。$F$ 为输入的图像，$G$ 为滤波器，也就是我们所说的卷积核。常用的卷积操作有单通道卷积和多通道卷积。</p><p>除了常用的单通道卷积和多通道卷积，随着图像任务越来越丰富，也衍生出了很多其他的卷积形式，如 $1 \times 1$ 卷积，转置卷积，空洞卷积以及分组卷积等。 </p><p>除了卷积，CNN中还有一个重要的组成是池化，其主要目的是降维，以降低计算量。并提供一些平移不变性等特性。常用的有最大池化和平均池化，顾名思义，最大池化就是取滑窗的最大值，平均池化就是取滑窗的平均值。</p><h3 id="卷积神经网络的特点"><a href="#卷积神经网络的特点" class="headerlink" title="卷积神经网络的特点"></a>卷积神经网络的特点</h3><p>基于卷积层于池化层，容易理解卷积神经我网络有如下特点：</p><ul><li>局部连接</li><li>权重共享</li><li>层次化表达</li><li>平移不变性</li></ul><p>简单回顾了卷积神经网络，现在可以看图卷积神经网络了。</p><h2 id="图卷积神经网络——GCN"><a href="#图卷积神经网络——GCN" class="headerlink" title="图卷积神经网络——GCN"></a>图卷积神经网络——GCN</h2><h3 id="CNN与GCN"><a href="#CNN与GCN" class="headerlink" title="CNN与GCN"></a>CNN与GCN</h3><p>图卷积是一个很深的领域，追其根本，是在处理图信号，其设计到拉普拉斯矩阵和图傅立叶变换，整个过程非常复杂，这里不作深入说明，仅论述GCN的工作方式。</p><p>前面有说图像是一种特殊的图数据，两者的网络连接方式也非常相似，用一幅图直观感受一下。</p><p><img src="cnn_and_gcn.jpg" alt="CNN与GCN的感受域"></p><p>同样在学习任务上，两者同样具有很强的相似性，GCN及其衍生模型主要解决的任务包括图分类（CNN中的图像分类）和节点分类（CNN中的目标检测）。</p><h3 id="GCN提供了端到端的学习表示"><a href="#GCN提供了端到端的学习表示" class="headerlink" title="GCN提供了端到端的学习表示"></a>GCN提供了端到端的学习表示</h3><p>图数据的处理有两类比较经典的方式，分别是：</p><ul><li>基于手工特征：基本思想是将图中节点的结构信息以一些图的统计特征进行替代，如节点的度、节点的PageRank值等，然后送到下游进行学习。</li><li>基于随机游走：基本思想是将图中节点所满足的关系与结构的性质通过随机游走的采样方式映射到一个新的向量空间去，然后送到下游进行学习。</li></ul><p>基于手工的特征的特征向量需要人为定义，工作量大，而且很难确定这些统计特征是否对后面的学习任务是否有用。基于随机游走的方法相比基于手工更加高效，但是由于随机游走采样，提取的图信息可能不够完全，而且对于连通图很大时，游走序列难以控制。</p><p>GCN提供了一种端到端的学习方式，一端是数据，一端是任务，相比前面的两种方式，GCN至少有下面两个优势。</p><ul><li>GCN对表示学习与任务学习一起进行端到端的优化，相比先提取特征向量，再进行任务学习，更能有效的训练图数据的表示。</li><li>GCN对结构信息和属性信息的学习是同步进行的，而很多时候图的属性信息和结构信息是互补关系，特别是对于一些稀疏图，这样的同步学习非常有用。</li></ul><h3 id="GCN是一个滤波器"><a href="#GCN是一个滤波器" class="headerlink" title="GCN是一个滤波器"></a>GCN是一个滤波器</h3><p>为了理解图卷机是滤波器，先理解一下图滤波器（在图信号滤波器前，还有离散信号滤波器、时域信息，频域信息（图上是空域信息）），在图信号中，图滤波器是图信号的频域信息中各频率分量的强度进行增强和衰减的操作，用公式表示为</p><p>$$y = Hx = \sum_{N}^{k = 1}(h(\lambda_{k})x_{k})v_{k}$$</p><p>图滤波器有下面的性质：</p><ul><li>线性：$H(x + y) = Hx + Hy$</li><li>无序（这是因为图信号变换是傅立叶变换，这点差别与小波变换）：$H_{1}(H_{2}x) = H_{2}(H_{1}x)$</li><li>当 $h(\lambda) \neq 0$时，滤波操作可逆</li></ul><p>常用的滤波器有四种，分别是低通滤波器、高通滤波器、带通滤波器和带阻滤波器，如下所示：</p><p><img src="wave_filter.jpg" alt="低通滤波器、高通滤波器、带通滤波器和带阻滤波器"></p><p>滤波器通过低频并阻止高频，则称为低通滤波器；如果它阻挡低频并通过高频，它就是一个高通滤波器。带通滤波器，其仅通过相对窄的频率范围，带阻滤波器，其仅阻挡相对窄的频率范围。</p><p>对于图信号处理中的卷积操作，经过简单推导，不难得出</p><p>$$x_{1} * x_{2} = H_{x_{1}}x_{2}$$</p><p>其中$H_{x_{1}}$是一个图位移算子。所以从这个层面上图卷机等价于图滤波。</p><p>更进一步，在 <a href="https://arxiv.org/abs/1905.09550">Revisiting Graph Neural Networks: All We Have is Low-Pass Filters</a> 这边论文中，作者认为GCN是低通滤波器是在，只对特征向量进行低通滤波，不具有非线性流形学习特性。放一个直观的图感受一下。</p><p><img src="GCN_low_pass_filter.png"></p><h2 id="图神经网络——GNN"><a href="#图神经网络——GNN" class="headerlink" title="图神经网络——GNN"></a>图神经网络——GNN</h2><h3 id="图神经网络"><a href="#图神经网络" class="headerlink" title="图神经网络"></a>图神经网络</h3><p>GCN的出现带动了神经网络在图数据学习中的价值，后续就把所有在图数据中使用神经网络学习的方法都归集为了GNN（图神经网络）。</p><p>GCN的本质是迭代式的聚合邻居，后续出现了很多在此基础上改进的模型，以提升在不同图数据上的适应性。</p><p>这里简单描述GraphSAGE的变化，后续有时间再聊常用的GAT和R-GCN。</p><h3 id="GraphSAGE"><a href="#GraphSAGE" class="headerlink" title="GraphSAGE"></a>GraphSAGE</h3><h4 id="采样邻居"><a href="#采样邻居" class="headerlink" title="采样邻居"></a>采样邻居</h4><p>相比GCN，GraphSAGE有两个改进，分别是采样邻居与聚合邻居。</p><p>GCN的训练是一种全图模式，每一轮迭代的梯度需要所有节点参与，但是通常DNN模型是需要mini-batch训练的，这在大规模数据的工程化实现非常重要。GraphSAGE对聚合邻居随机采样来控制运算时节点k阶子图的数据规模，然后在采样的字图上随机组合来完成小批量学习。</p><p>以下面采样方法为例</p><p><img src="graphsage_sample.png" alt="采样邻居"></p><p>对于GCN而言，如果要得到2层特征，图中的所有节点都需要参与计算，这对于一个大规模的图而言，这非常不现实。</p><ul><li>执行 $k$ 层GCN，则 $k$ 阶子图平均出现 $1 + d + d^{2} + \cdots + d^{k}$ 个节点，这会导致非常高的计算复杂度。</li><li>真实场景中经常会出现超级节点，这类型节点高层特征计算的代价非常高</li></ul><p>GraphSAGE为了解决这个问题，给出了采样倍率的解决方法，做法是设每个节点在第 $k$ 层的邻居采样倍率（每个邻居采样的一阶邻居总数不超过的数量）是 $S_{k}$ ，如此，任意一个中心节点的表达计算，所涉及的总节点数控制在了 $O(\prod_{k = 1}^{k}S_{k})$ ，对于超级节点，GraphSAGE选择了均匀采样的方法。如此，GraphSAGE可以把子图节点规模控制在阶乘级数以下，有利于工程化实现。</p><h4 id="聚合邻居"><a href="#聚合邻居" class="headerlink" title="聚合邻居"></a>聚合邻居</h4><p>聚合算子需要满足自适应（不管节点邻居如何变化，输出维度都是一样的）和排列不变性（图数据本身么有顺序，所以不管邻居节点的排列顺序如何，输出结果都是一样的），常用的算子为：</p><ul><li>平均/加权聚合算子</li><li>长短时记忆（LSTM）算子</li><li>池化算子</li></ul><h3 id="其他图神经网络"><a href="#其他图神经网络" class="headerlink" title="其他图神经网络"></a>其他图神经网络</h3><h4 id="GAT"><a href="#GAT" class="headerlink" title="GAT"></a>GAT</h4><p>GAT即图注意力网络。它使用注意力机制来对邻居节点进行聚合，实现不同邻居权重对自适应分配。</p><h4 id="R-GCN"><a href="#R-GCN" class="headerlink" title="R-GCN"></a>R-GCN</h4><p>实际工程场景中，节点之间的关系通常是不同的，例如在知识图谱中，关系的类别可能会有非常多，而通常使用的GCN、GraphSAGE以及GAT都只处理单一节点关系的图。R-GCN的出现，就是将图卷机神经网络拓展到包含多种实体关系的图数据中。核心是做了两次聚合操作（分别针对节点和关系权重）。</p><p>图神经网络内容很丰富，一片文章远远写不完，这片文章只是从常用的CNN走到GNN，前路多艰。</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 卷积神经网络 </tag>
            
            <tag> 图卷积神经网络 </tag>
            
            <tag> 图神经网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>数据预处理的套路</title>
      <link href="2020/11/21/shu-ju-yu-chu-li-de-tao-lu/"/>
      <url>2020/11/21/shu-ju-yu-chu-li-de-tao-lu/</url>
      
        <content type="html"><![CDATA[<h2 id="数据清理"><a href="#数据清理" class="headerlink" title="数据清理"></a>数据清理</h2><h3 id="缺失值处理"><a href="#缺失值处理" class="headerlink" title="缺失值处理"></a>缺失值处理</h3><ul><li><strong>删除</strong></li></ul><p>对于缺失值比较多的元组，或损失了重要属性的元组，可考虑删除法。比如对于缺失类别的数据，在分类任务中就可以予以删除。该方法比较适合行缺失比例多的情况，不适合列缺失值百分比变化大的情况。</p><ul><li><strong>人工填充</strong></li></ul><p>这种方法主要来源于专家判断，该方法数据准确行取决于人工，而且比较费时，不适合数据集大、缺失值很多的情况。</p><ul><li><strong>全局常量</strong></li></ul><p>使用一个固定的值填充所有缺失值，如有0填充所有空值（NULL），不过该方法需要注意在分析时误将该全局值认为是数据具有的某个相同价值。</p><ul><li><strong>使用属性的集中度量</strong></li></ul><p>比如使用属性的均值、中位数、众数等填充缺失值。对称数据使用均值、倾斜数据使用中位数。</p><ul><li><strong>同类样本的集中度量</strong></li></ul><p>该方法和和属性的集中度量类似，不过该方法有一个前提条件，采用的不是全部数据，而是在其他某些属性上相同或相似的样本。选择平均数和中位数方法与前面相同。</p><ul><li><strong>最有可能的值</strong></li></ul><p>该方法需要对数据进行更加复杂的分析，如回归、贝叶斯等数据推断的方式来进行填充。或通过决策树等分类策略来判定缺失数据最有可能存在的类，然后使用同类样本的集中度量。</p><h3 id="噪声数据"><a href="#噪声数据" class="headerlink" title="噪声数据"></a>噪声数据</h3><ul><li><strong>分箱</strong></li></ul><p>噪声数据和缺失数据都属于脏数据，是数据清理的主要对象，不过噪声数据不同的是，它是被测量的变量的随机误差或方差，噪声数据可以转化为缺失数据，反之不成立。</p><p>分箱适用于有序数据，它使用数据的近邻来光滑有序数据值。分布到同一个箱中的数据可以进行局部光滑，此处就可以采用缺失值处理的方法，如在箱中使用均值、中位数等。</p><ul><li><strong>回归</strong></li></ul><p>分箱是通过局部有序数据进行光滑，而回归是通过全局数据进行光滑，使用一个函数拟合来光滑数据。常用的有线性回归和多远线性回归，此处需要注意数据拟合的三种状态，欠拟合、正拟合和过拟合。</p><ul><li><strong>离群点分析</strong></li></ul><p>可以通过无监督学习的方式检测离群点，如聚类将类似的值聚成簇，落在簇外的就可以被视为离群点。</p><h2 id="数据集成"><a href="#数据集成" class="headerlink" title="数据集成"></a>数据集成</h2><h3 id="实体识别"><a href="#实体识别" class="headerlink" title="实体识别"></a>实体识别</h3><p>数据集成的主要目的是合并多个数据存储的数据时，较少数据冗余和不一致。匹配多个数据源的模式，本质上就是一个实体识别问题。</p><p>比如如何确定两份数据的user_id，是同一个属性，每个属性的元数据包含名字、含义、数据类型和属性值域，以及NULL、空值规则等。而且在集中过程中，需要特别注意数据结构。</p><h3 id="冗余和相关"><a href="#冗余和相关" class="headerlink" title="冗余和相关"></a>冗余和相关</h3><p>这里冗余主要是属性冗余，如果一个属性是可以通过另外的属性“变换”出，那么这个属性就是冗余的，这种冗余可以通过相关分析检出。</p><ul><li>对于标量数据，可以通过$\chi^{2}$（卡方）检验。</li></ul><p>假设X有m个不同值$x_{1}, x_{2}, \cdots, x_{m}$，Y有n和不同值$y_{1}, y_{2}, \cdots, y_{n}$。令$(X_{i}, Y_{j})$为属性X取$x_{i}$和属性Y取$y_{j}$的联合事件，则$\chi^{2}$（卡方）统计量为：</p><p>$$\chi^{2} = \sum_{i = 1}^{m}\sum_{j = 1}^{n}\frac{(o_{ij} - e_{ij})^{2}}{e_{ij}}$$</p><p>其中$o_{ij}$表示联合事件$(X_{i}, Y_{j})$的观测频度，$e_{ij}$表示$(X_{i}, Y_{j})$期望频度，为</p><p>$$e_{ij} = \frac{1}{n}count(X = x_{i}) * count(Y = y_{j})$$</p><ul><li>对于数值数据，可以使用相关系数和协方差检验。</li></ul><p>相关系数计算公式为</p><p>$$r(X, Y) = \frac{\sum_{i = 1}^{n}(x_{i} - \overline{X})(y_{i} - \overline{Y})}{n \sigma_{X} \sigma_{Y}}$$</p><p>协方差$cov(X, Y)$是方差的泛化形式，定义为</p><p>$$cov(X, Y) = E(X - \overline{X})(Y - \overline{Y}) = \frac{\sum_{i = 1}^{n}(x_{i} - \overline{X})(y_{i} - \overline{Y})}{n}$$</p><p>和相关系数放在一起，就变成了</p><p>$$r(X, Y) = \frac{cov(X , Y)}{\sigma_{X} \sigma_{Y}}$$</p><h3 id="重复元组"><a href="#重复元组" class="headerlink" title="重复元组"></a>重复元组</h3><p>冗余和相关是检查属性，重复是检查元组，这对于设置数据库的相关键非常重要。</p><h2 id="数据归约"><a href="#数据归约" class="headerlink" title="数据归约"></a>数据归约</h2><h3 id="维归约"><a href="#维归约" class="headerlink" title="维归约"></a>维归约</h3><p>维规约是减少需要考虑的属性个数，该方法将源数据投影到更小的空间内。此处主要聊三种方式，分别是属性子集选择、小波变换和主成分分析。</p><ul><li><strong>属性子集选择</strong></li></ul><p>属性子集选择是通过删除与分析目的不相关或冗余的属性，使得分析目的更容易实现或理解。如何选择出最好的子集，就是此处我们需要重点考虑的问题，“最好”通常使用统计的显著性检验来确定，这里不详细描述假设检验，直接提供4中子集选择方法。</p><ol><li><p>向前选择，该过程从空属性集开始，每次迭代将原属性中最好的属性加入集合中，最终选择最优属性集合。</p></li><li><p>向后删除， 和向前选择相反，该过程从全集开始，每次迭代从原属性中选择最差的属性从集合中删除，最终留下的就是最优属性集合。</p></li><li><p>向前选择和向后删除组合， 高过程就是前面两种方法的组合，每一次迭代，选择最优的属性加入集合中，也从集合中删除最差的属性。</p></li><li><p>决策树归纳， 决策树最开始的目的是用于分类，它可以在每个节点上选择最好的属性，将数据进行分类，所以可以将出现在树中的属性归约为属性子集。</p></li></ol><ul><li><strong>小波变换</strong></li></ul><p>离散小波变换（DWT）是一种信号处理技术，他可以用于多维数据变换，它的主要思想是通过一些留存一些最强的小波系数，以保留近似的压缩数据。如用户设定一个阈值，大于这个阈值的小波属性予以保留，小于该属性的值置0，如此可以得到更为系数的数据，如此在小波空间内计算就会变得更高效。该方法不只可用于数据归约，由于它可以光滑数据，所以还可以用于数据噪声处理。</p><p>小波变换是一个很大的课题，与其关联的还有傅里叶变化等，此处不展开。</p><ul><li><strong>主成分分析</strong></li></ul><p>主成分分析（PCA）属于泛因子分析的一种（主成分分析中主成分是原始变量的线性组合，因子分析中原始变量是新因子的线性组合），它是搜索k（$k \leq n$）最能代表数据的n维正交向量，如此，就把原属性投影到来一个更小的属性空间上，使得维规约。该方法与子集选择不同的是，它会创建一个替换原属性集的新属性集，而不是直接在原属性集上选择子集。其主要过程为</p><ol><li><p>规范化输入数据，主要目的是避免较大属性在整个选择过程中权重过大。</p></li><li><p>计算k个标准正交向量（正交可以理解为低维空间中的垂直），作为规范化输入数据的基，这些向量就是主成分，输入数据是这些主成分的线性组合。</p></li><li><p>主成分充当了数据的新坐标系，提供了方差信息，理论上当$k=n$时，就能代表全部信息。</p></li><li><p>对左右成分按照重要性排序，去掉比较弱的成本，保留下来的就是主成本。</p></li></ol><p>与小波变换相比，主成分分析可以更好的处理稀疏数据，而小波变换更适合高维数据。</p><p>如下面这种形式</p><p>$$a_{1} = k_{11} * a_{1} + k_{12} * a_{2} + \cdots + k_{1n} * a_{n}$$</p><p>$$a_{2} = k_{21} * a_{1} + k_{22} * a_{2} + \cdots + k_{2n} * a_{n}$$</p><p>$$\cdots \cdots$$</p><p>$$a_{m} = k_{m1} * a_{1} + k_{m2} * a_{2} + \cdots + k_{mn} * a_{n}$$</p><h3 id="数量归约"><a href="#数量归约" class="headerlink" title="数量归约"></a>数量归约</h3><ul><li><strong>参数方法</strong></li></ul><p>数量规约就是使用较小的数据来替换原数据意义，参数方法就是使用模型来估计数据，使得最终存储只需要存储模型参数，而不是实际数据。一个简单的例子，比如现在有10000个房屋面积、地域、交通及房价的关系数据，在很大程度上，就可以建立一个回归模型来表示这个数据，而不是存储所有数据。如对于$x, y$两个变量，我们可以建立如下的线性函数以表示它们的关系。</p><p>$$y = ax + b$$</p><p>$a, b$为回归系数，分别是斜率和截距，求解方法常为最小二乘法。</p><ul><li><strong>非参数方法</strong></li></ul><p>非参数方法不是使用参数来表示原数据，而是通过对数据进行一些特殊的划分以减少原数据。</p><ol><li><p>最常用的就是抽样，抽样方法有很多，比如有放回抽样，无放回抽样，簇抽样，分层抽样等。抽样是一个很高效的方法，它的复杂度只为$O(n)$，而下面介绍的直方图，复杂度却是指数型的。</p></li><li><p>直方图也是一个很常用的方法，该方法使用对数据分箱的方式来进行数据归约。为来确定箱和属性值的划分，涉及两中规则，分别是等宽（每个箱的宽度区间一致）和等频（每个箱的频度初略估计为一个常数）。</p></li><li><p>聚类技术也可以用于数据规约，每个簇内的对象相互相似（和直方图中的箱类似），而与其他簇相异。不过用簇代替实际数据，比较依赖数据的性质，比如数据在拓扑结构上就能组织成簇，那该方法就会比较有效。当然，如果数据本身非常离散，不具有局部相似的结构，基本上也就不能进行很好的数量归约。</p></li></ol><h3 id="数据压缩"><a href="#数据压缩" class="headerlink" title="数据压缩"></a>数据压缩</h3><p>数据压缩是通过数据变换对原数据进行归约或压缩，前面的维归约和数量归约都可以理解为数据压缩的一种。数据压缩分为无损压缩和有损压缩。</p><ul><li>无损压缩，原数据能够从压缩过的数据重构而得，同时不损失信息。</li><li>有损压缩，只能近似重构原数据。</li></ul><h2 id="数据变换"><a href="#数据变换" class="headerlink" title="数据变换"></a>数据变换</h2><h3 id="规范化"><a href="#规范化" class="headerlink" title="规范化"></a>规范化</h3><p>数据变换的主要目的是将数据加工成容易分析挖掘的形式，除规范化外，还有数据光滑，特征工程，数据分组和离散化等。如前面提到的分箱、回归都是在进行数据光滑，特征工程的内容很丰富，此处不展开。</p><p>这里介绍两种最常用的规范化方法，分别是归一化和标准化。</p><ul><li><strong>归一化</strong></li></ul><p>顾名思义，就是把原数据规范到固定的0-1区间内进行分析，就像前面介绍主成分分析时候，为了避免数值较大属性对维规约的影响，就会对原数据进行规范化处理。</p><p>归一化计算公式：</p><p>$$x_{i}(new) = \frac{x_{i} - min(X)}{max(X) - min(X)}$$</p><ul><li><strong>标准化</strong></li></ul><p>我们实际生活中很多数据都近似服从正态分布（具体原因可参考大数定律），所以我们可以使用正态分布的相关参数对数据进行规范化。即统计学中的$z$统计量。定义如下</p><p>$$x_{i}(new) = \frac{x_{i} - \mu}{\sigma}$$</p><h3 id="离散化"><a href="#离散化" class="headerlink" title="离散化"></a>离散化</h3><p>原数据使用区间标签和概念标签替换，这些标签可以递归的组织成更高维的概念，最终形成概念分成，达到数据分析的目的。</p><p>前面提到的分箱、直方图、聚类、决策树归纳及相关分析都属于离散化技术，形成更高的概念分层。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> DS&amp;DM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 数据模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Pandas_Pivot_Table_Explained</title>
      <link href="2020/11/15/pandas-pivot-table-explained/"/>
      <url>2020/11/15/pandas-pivot-table-explained/</url>
      
        <content type="html"><![CDATA[<p><strong>–Adapted from <a href="http://pbpython.com/pandas-pivot-table-explained.html">http://pbpython.com/pandas-pivot-table-explained.html</a></strong></p><p><strong>–If you want more information about Practical Business Python ,please visit <a href="http://pbpython.com/">http://pbpython.com/</a></strong></p><p>Posted by <a href="http://pbpython.com/author/chris-moffitt.html">Chris Moffitt</a> in <a href="http://pbpython.com/category/articles.html">articles</a> </p><h2 id="Read-in-the-data"><a href="#Read-in-the-data" class="headerlink" title="Read in the data"></a>Read in the data</h2><p>Let’s set up our environment first.</p><p>If you want to follow along, you can download the <a href="http://pbpython.com/extras/sales-funnel.xlsx">Excel file</a>.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> pandas <span class="token keyword">as</span> pd <span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>Read in our sales funnel data into our DataFrame</p><pre class="line-numbers language-python"><code class="language-python">df <span class="token operator">=</span> pd<span class="token punctuation">.</span>read_excel<span class="token punctuation">(</span><span class="token string">"../in/sales-funnel.xlsx"</span><span class="token punctuation">)</span> df<span class="token punctuation">.</span>head<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="df.jpeg"></p><p>For convenience sake, let’s define the status column as a <code>category</code> and set the order we want to view.</p><p>This isn’t strictly required but helps us keep the order we want as we work through analyzing the data.</p><pre class="line-numbers language-python"><code class="language-python">df<span class="token punctuation">[</span><span class="token string">"Status"</span><span class="token punctuation">]</span> <span class="token operator">=</span> df<span class="token punctuation">[</span><span class="token string">"Status"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>astype<span class="token punctuation">(</span><span class="token string">"category"</span><span class="token punctuation">)</span> df<span class="token punctuation">[</span><span class="token string">"Status"</span><span class="token punctuation">]</span><span class="token punctuation">.</span>cat<span class="token punctuation">.</span>set_categories<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"won"</span><span class="token punctuation">,</span><span class="token string">"pending"</span><span class="token punctuation">,</span><span class="token string">"presented"</span><span class="token punctuation">,</span><span class="token string">"declined"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>inplace<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Pivot-the-data"><a href="#Pivot-the-data" class="headerlink" title="Pivot the data"></a>Pivot the data</h2><p>As we build up the pivot table, I think it’s easiest to take it one step at a time. Add items and check each step to verify you are getting the results you expect. Don’t be afraid to play with the order and the variables to see what presentation makes the most sense for your needs.</p><p>The simplest pivot table must have a dataframe and an <code>index</code> . In this case, let’s use the Name as our index_name.index.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="index_name.jpeg"></p><p>You can have multiple indexes as well. In fact, most of the <code>pivot_table</code> args can take multiple values via a list.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Name"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">,</span><span class="token string">"Manager"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="index3.jpeg"></p><p>This is interesting but not particularly useful. What we probably want to do is look at this by Manager and Rep. It’s easy enough to do by changing the <code>index</code> .</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="manager_rep.jpeg"></p><p>You can see that the pivot table is smart enough to start aggregating the data and summarizing it by grouping the reps with their managers. Now we start to get a glimpse of what a pivot table can do for us.</p><p>For this purpose, the Account and Quantity columns aren’t really useful. Let’s remove it by explicitly defining the columns we care about using the <code>values</code> field.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="manager_rep_price.jpeg"></p><p>The price column automatically averages the data but we can do a count or a sum. Adding them is simple using <code>aggfunc</code> and<code>np.sum</code> .</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="sum_price.jpeg"></p><p><code>aggfunc</code> can take a list of functions. Let’s try a mean using the numpy <code>mean</code> function and <code>len</code> to get a count.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">,</span>len<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="mean_len.jpeg"></p><p>If we want to see sales broken down by the products, the <code>columns</code> variable allows us to define one or more columns.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Product"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="product_sum.jpeg"></p><p>The NaN’s are a bit distracting. If we want to remove them, we could use <code>fill_value</code> to set them to 0.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Product"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">]</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="fill_value0.jpeg"></p><p>I think it would be useful to add the quantity as well. Add Quantity to the <code>values</code> list.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">,</span><span class="token string">"Quantity"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> columns<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Product"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">]</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="fill_value_1.jpeg"></p><p>What’s interesting is that you can move items to the index to get a different visual representation. Remove Product from the <code>columns</code>and add to the <code>index</code> .</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">,</span><span class="token string">"Product"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">,</span><span class="token string">"Quantity"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">]</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="fill_value_pq.jpeg"></p><p>For this data set, this representation makes more sense. Now, what if I want to see some totals? <code>margins=True</code> does that for us.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Rep"</span><span class="token punctuation">,</span><span class="token string">"Product"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">,</span><span class="token string">"Quantity"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">,</span>np<span class="token punctuation">.</span>mean<span class="token punctuation">]</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="pq_sum_mean.jpeg"></p><p>Let’s move the analysis up a level and look at our pipeline at the manager level. Notice how the status is ordered based on our earlier category definition.</p><pre class="line-numbers language-python"><code class="language-python">pd<span class="token punctuation">.</span>pivot_table<span class="token punctuation">(</span>df<span class="token punctuation">,</span>index<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Manager"</span><span class="token punctuation">,</span><span class="token string">"Status"</span><span class="token punctuation">]</span><span class="token punctuation">,</span>values<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"Price"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> aggfunc<span class="token operator">=</span><span class="token punctuation">[</span>np<span class="token punctuation">.</span>sum<span class="token punctuation">]</span><span class="token punctuation">,</span>fill_value<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>margins<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="margins_true.jpeg"></p><p>A really handy feature is the ability to pass a dictionary to the <code>aggfunc</code> so you can perform different functions on each of the values you select. This has a side-effect of making the labels a little cleaner.</p><pre class="line-numbers language-shell"><code class="language-shell">pd.pivot_table(df,index=["Manager","Status"],columns=["Product"],values=["Quantity","Price"], aggfunc=&#123;"Quantity":len,"Price":np.sum&#125;,fill_value=0)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="aggfunc.jpeg"></p><p>You can provide a list of aggfunctions to apply to each value too:</p><pre class="line-numbers language-shell"><code class="language-shell">pd.pivot_table(df,index=["Manager","Status"],columns=["Product"],values=["Quantity","Price"], aggfunc=&#123;"Quantity":len,"Price":[np.sum,np.mean]&#125;,fill_value=0) <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="aggfunc2.jpeg"></p><p>It can look daunting to try to pull this all together at one time but as soon as you start playing with the data and slowly add the items, you can get a feel for how it works. My general rule of thumb is that once you use multiple <code>grouby</code> you should evaluate whether a pivot table is a useful approach.</p><h2 id="Advanced-Pivot-Table-Filtering"><a href="#Advanced-Pivot-Table-Filtering" class="headerlink" title="Advanced Pivot Table Filtering"></a>Advanced Pivot Table Filtering</h2><p>Once you have generated your data, it is in a <code>DataFrame</code> so you can filter on it using your standard <code>DataFrame</code> functions.</p><p>If you want to look at just one manager:</p><pre class="line-numbers language-python"><code class="language-python">table<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'Manager == ["Debra Henley"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="query_manager.jpeg"></p><p>We can look at all of our pending and won deals.</p><pre class="line-numbers language-python"><code class="language-python">table<span class="token punctuation">.</span>query<span class="token punctuation">(</span><span class="token string">'Status == ["pending","won"]'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="query_status.jpeg"></p><p>This a poweful feature of the <code>pivot_table</code> so do not forget that you have the full power of pandas once you get your data into the<code>pivot_table</code> format you need.</p><p>The full <a href="http://nbviewer.ipython.org/url/pbpython.com/extras/Pandas-Pivot-Table-Explained.ipynb">notebook</a> is available if you would like to save it as a reference.</p><h2 id="Cheat-Sheet"><a href="#Cheat-Sheet" class="headerlink" title="Cheat Sheet"></a>Cheat Sheet</h2><p>n order to try to summarize all of this, I have created a cheat sheet that I hope will help you remember how to use the pandas<code>pivot_table</code> . Take a look and let me know what you think.</p><p><img src="cheat_sheet.jpeg"></p><p>Thanks and good luck with creating your own pivot tables.</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Eclipse下载安装配置MAC版</title>
      <link href="2020/11/14/eclipse-xia-zai-an-zhuang-pei-zhi-mac-ban/"/>
      <url>2020/11/14/eclipse-xia-zai-an-zhuang-pei-zhi-mac-ban/</url>
      
        <content type="html"><![CDATA[<p><strong>写给Eclipse新手的下载－安装－配置详细教程</strong></p><h2 id="下载Eclipse"><a href="#下载Eclipse" class="headerlink" title="下载Eclipse"></a>下载Eclipse</h2><p>mac电脑是自带javaJDK的，所以可以先尝试直接下载Eclipse安装</p><p>建议去官网下载，直接百度Eclipse download，网址：<a href="http://www.eclipse.org/downloads/">http://www.eclipse.org/downloads/</a></p><p>点击左下角Download Packages</p><p><img src="download_packages.jpeg"></p><p>找到Eclipse IDE for Java EE Developers</p><p><img src="java_ee_developers.jpeg"></p><p>除了Java EE 外，还有Eclipse IDE for Java Developers</p><p><img src="java_developers.jpeg"></p><p>具体下载哪一个可依据情况而定，其中Java是带有用户界面的基本IDE，而Java EE是企业版，功能更多一些，两者比较如下：</p><p><img src="Java_ee_and_java.jpeg"></p><p>点击以后直接进行下载，我这里选择的是Eclipse IDE for Java EE Developers</p><p><img src="download.jpeg"></p><p>解压后直接点击Eclipse.app进行安装</p><p><img src="eclipse_app.jpeg"></p><p>至此下载已经安成，后面就需要看电脑情况进行一些插件配置</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>由于电脑配置不同，需要单独下载的插件不同，我这里起始状态为电脑默认配置</p><p>双击Eclipse产生无法继续安装的情况，当时没有截图，大概意思是需要下载一个OS X插件，系统提示信息中提供了一个链接，点开后如下</p><p><img src="download_java.jpeg"></p><p>直接下载，是.dmg文件，可直接安装，持续下一步即可</p><p>安装成功后重新双击Eclipse，发现上面的问题没有了，接下来出现一个新的问题。截图类似如下（当时忘记截图，后来找的），截止目前最新的是1.8版本</p><p><img src="jvm.jpeg"></p><p>说明系统默认的1.6版JDK不满足要求，需要更新JDK</p><h2 id="更新JDK有两种方式"><a href="#更新JDK有两种方式" class="headerlink" title="更新JDK有两种方式"></a>更新JDK有两种方式</h2><p><strong>第一种（推荐）</strong></p><p>去oracle官网下载，网址：<a href="http://www.oracle.com/technetwork/java/javase/downloads/index.html">http://www.oracle.com/technetwork/java/javase/downloads/index.html</a></p><p><img src="oracle.jpeg"></p><p>现在最新版本已到Kit 8</p><p><img src="kit8.jpeg"></p><p>下载后为.dmg文件，可直接安装，持续下一步即可</p><p>默认安装路径为：/Library/Java/JavaVirtualMachines/</p><p><img src="jdkjdk.jpeg"></p><p>安装完成后就需要配置环境变量了，虽然安装了1.8，但是系统默认JDK还是1.6，所以现在还是不能运行的可以打开终端输入：Java –version查看</p><p><img src="Java_version.jpeg"></p><p>此时输入：open -t ~/.bash_profile</p><p>在弹出文本中添加</p><p>export JAVA_8_HOME=/Library/Java/JavaVirtualMachines/jdk1.8.0_131.jdk/Contents/Home 并 export JAVA_HOME=$JAVA_8_HOME</p><p>保存退出重启终端后就已经是1.8了</p><p><strong>第二种更新JDK方式</strong></p><p>系统自动更新</p><p><img src="gengxin.jpeg"></p><p>更新路径可以在这里查看</p><p><img src="lujing.jpeg"></p><p>按照上面的方式配置环境变量即可。</p><p>安装完成后打开第一个页面是欢迎页面，关闭即可</p><p><img src="welcome.jpeg"></p><p>在正式写代码之前还要进行些必要的配置</p><h2 id="打开Eclipse-偏好设置"><a href="#打开Eclipse-偏好设置" class="headerlink" title="打开Eclipse-偏好设置"></a>打开Eclipse-偏好设置</h2><p><img src="pianhao.jpeg"></p><p>此时需要看两个路径是否一至，如果一致可不用管</p><p><img src="check_path.jpeg"></p><p>如果不一致，需要新增一个路径</p><p><img src="add_path.jpeg"></p><p><img src="add_jre.jpeg"></p><p><img src="jre2.jpeg"></p><p><img src="jre3.jpeg"></p><p>现在就已经能正常工作了，除此之外，还可以进行一些其他配置</p><h2 id="其他配置"><a href="#其他配置" class="headerlink" title="其他配置"></a>其他配置</h2><p><strong>编码格式设置</strong></p><p><img src="bianmageshi.jpeg"></p><p><strong>拼写检查设置</strong></p><p><img src="pinxiejiancha.jpeg"></p><p><strong>主题背景设置</strong></p><p><img src="theme.jpeg"></p><p>程序主题设置，这里需要安装一个theme插件</p><p>有两种方式</p><p>第一种是通过Marketplace安装</p><p><img src="marketplace.jpeg"></p><p>搜索color eclipse theme</p><p><img src="eclipse_theme.jpeg"></p><p>此警告说明没有数字证书，可忽略</p><p><img src="security.jpeg"></p><p>然后重启Eclipse</p><p>第二种是通过install入口</p><p><img src="install.jpeg"></p><p>复制链接：<a href="http://eclipse-color-theme.github.com/update">http://eclipse-color-theme.github.com/update</a></p><p>Name 可以任取</p><p><img src="name_1.jpeg"></p><p><img src="name_2.jpeg"></p><p><img src="name_3.jpeg"></p><p>到这里就已经初步配置完成了</p><p>现在开始HelloWorld</p><h2 id="第一个程序－HelloWorld"><a href="#第一个程序－HelloWorld" class="headerlink" title="第一个程序－HelloWorld"></a>第一个程序－HelloWorld</h2><p>新建一个Java Project</p><p><img src="new_project.jpeg"></p><p><img src="new_project2.jpeg"></p><p>新建一个class</p><p><img src="new_class1.jpeg"></p><p><img src="new_class2.jpeg"></p><p>打印HelloWorld</p><p><img src="helloworld.jpeg"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Eclipse </tag>
            
            <tag> 教程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>描述性数据分析</title>
      <link href="2020/11/07/miao-shu-xing-shu-ju-fen-xi/"/>
      <url>2020/11/07/miao-shu-xing-shu-ju-fen-xi/</url>
      
        <content type="html"><![CDATA[<h2 id="集中趋势"><a href="#集中趋势" class="headerlink" title="集中趋势"></a>集中趋势</h2><h3 id="均值"><a href="#均值" class="headerlink" title="均值"></a>均值</h3><p>一般的均值计算公式如下：</p><p>$$\mu = \overline{x} = \frac{1}{N} \sum_{i = 1}^{N}x_{i}$$</p><p>一般均值中蕴含了一个潜在条件，每个变量的权重相同，如果权重不同，修改为如下形式。</p><p>$$\mu = \overline{x} = \frac{1}{N} \sum_{i = 1}^{N}w_{i}x_{i}$$ </p><p>其中</p><p>$$\sum_{i = 1}^{N}w_{i} = 1$$ </p><p>即常说的平均数，也叫数学期望，均值容易受极值的影响，当数据集中出现极值时，所得到的的均值结果将会出现较大的偏差。</p><h3 id="中位数"><a href="#中位数" class="headerlink" title="中位数"></a>中位数</h3><p>其计算方法是将所有数据按从小到大的顺序排列，如果有基数个数据值，则位于中央的数据值就是中位数，如果有偶数个数据值，则中位数是中间两个数值的平均是。</p><p>除中位数外，还有四分位数，百分位数据等，不过和此处的中位数不同，四分位数和百分位数主要用于度量分布形状。</p><h3 id="众数"><a href="#众数" class="headerlink" title="众数"></a>众数</h3><p>数据中出现次数最多的数字，即频数最大的数值。众数可能不止一个，众数除能用于数值型数据，还可用于非数值型数据，不受极值影响。</p><h2 id="离散程度"><a href="#离散程度" class="headerlink" title="离散程度"></a>离散程度</h2><h3 id="极差"><a href="#极差" class="headerlink" title="极差"></a>极差</h3><p>极差是极大值与极小值之间的差</p><p>$$ 极差 = 极大值 - 极小值$$</p><p>极差是描述数据分散程度的量，极差描述了数据的范围，但无法描述其分布状态。一般数据统计而言为数据的极大值即为最大值，极小值即为最小值，但是从理论上而言，两者有比较直接的区别，极值是局部值，最值是全局值。</p><h3 id="方差和标准差"><a href="#方差和标准差" class="headerlink" title="方差和标准差"></a>方差和标准差</h3><p>方差($\sigma^{2}$)是每个数据与全体数据平均数的差的平方的平均数，标准差($\sigma$)是方差开方。方差和标准差描述数据波动离散程度和波动性。</p><p>$$\sigma^{2} = \frac{1}{N}\sum_{i = 1}^{N}(x_{i} - \mu)^{2}$$</p><p>$$\sigma = \sqrt{\sigma^{2}}$$</p><p>不同量纲下的数据方差和标准差有显著差异，若对比不同数据标准差，需要使用Z标准化后的数据，z标准化为</p><p>$$a = \frac{x_{i} - \mu}{\sigma}$$</p><h3 id="四分位数极差"><a href="#四分位数极差" class="headerlink" title="四分位数极差"></a>四分位数极差</h3><p>四分位数本身用来度量数据形态，不过其极差可以用来反应偏态分布的数据离散程度。四分位数计算方法如下：</p><p>数据从小到大排列并分成四等份，处于三个分割点位置的数值，即为四分位数，四分位数分为上四分位数（数据从小到大排列排在第75%的数字，即最大的四分位数）、下四分位数（数据从小到大排列排在第25%位置的数字，即最小的四分位数）、中间的四分位数即为中位数。四分位数可以很容易地识别异常值。箱线图就是根据四分位数做的图。</p><h3 id="变异系数"><a href="#变异系数" class="headerlink" title="变异系数"></a>变异系数</h3><p>变异系数是一种不受单位影响的表示数据离散程度的指标，比较适合在以下两种情况下比较数据差异：</p><ul><li><p>各组数据单位不完全相同</p></li><li><p>各组数据的均值相差悬殊</p></li></ul><p>变异系数的表示形式为</p><p>$$cv = \frac{\sigma}{\mu} * 100%$$</p><p>变异系数在数据呈正态分布是效果较好，当数据呈偏态分布时，则极差和四分位数极差代表性更好。</p><h2 id="分布形态"><a href="#分布形态" class="headerlink" title="分布形态"></a>分布形态</h2><h3 id="百分位数"><a href="#百分位数" class="headerlink" title="百分位数"></a>百分位数</h3><p>前面已经涉及到中位数、四分位数，而百分位数作为一种位置指标，同样可以来度量分布形态，计算方法与前面的四分位数计算方法类似。</p><h3 id="箱线图"><a href="#箱线图" class="headerlink" title="箱线图"></a>箱线图</h3><p>箱线图来源与四分位数，或者可以理解为来源与百分位数，箱子的底部为下四分位数，顶部为上四分位数，盒子高度（上四分位数和下四分位数之间的距离）记为IQR，箱上下的线不超过1.5个IQR，超过部分为异常值。箱线图示例如下。</p><p><img src="box.jpeg"></p><h3 id="直方图"><a href="#直方图" class="headerlink" title="直方图"></a>直方图</h3><p>直方图作为一种集合图形，可以处理看似无序的数据，反应数据分布情况。直方图是以组距为底边，频数或百分比为高度的一系列链接起来的直方矩形图。每个矩形图代表一组数据，矩形的高度代表落在这一组中的数据的频数或者百分比。</p><h3 id="峰度"><a href="#峰度" class="headerlink" title="峰度"></a>峰度</h3><p>描述正态分布中曲线峰顶尖哨程度的指标。峰度系数&gt;0，则两侧极端数据较少，比正太分布更高更瘦，呈尖哨峰分布；峰度系数&lt;0，则两侧极端数据较多，比正太分布更矮更胖，呈平阔峰分布。</p><p>峰度计算需要涉及4阶中心矩和2阶中心矩（方差）</p><p>$$Kurtosis = \frac{n(n + 1)}{(n - 1)(n - 2)(n - 3)}\sum_{i = 1}^{n}(\frac{x_{i} - \overline{x}}{\sigma})^{4} - \frac{3(n - 1)^{2}}{(n - 2)(n - 3)}$$</p><p>也可写为</p><p>$$Kurtosis = \frac{m_{4}}{m_{2}^{2}} - 3 = \frac{\frac{1}{n}\sum_{i = 1}^{n}(x_{i} - \mu)^{4}}{(\frac{1}{n}\sum_{i = 1}^{n}(x_{i} - \mu)^{2})^{2}} - 3$$</p><p><img src="fengdu.png"></p><h3 id="偏度"><a href="#偏度" class="headerlink" title="偏度"></a>偏度</h3><p>以正态分布为标准描述数据对称性的指标。偏度系数=0，则分布对称；偏度系数&gt;0，则频数分布的高峰向左偏移，长尾向右延伸，呈正偏态分布；偏度系数&lt;0，则频数分布的高峰向右偏移，长尾向左延伸，呈负偏态分布。</p><p>偏度是三阶标准矩（$m_{3}$表示3阶中心矩），定义为</p><p>$$Skewness = \frac{n}{(n - 1)(n - 2)}\sum_{i = 1}^{n}(\frac{x_{i} - \overline{x}}{\sigma})^{3}$$</p><p>也可写为</p><p>$$Skewness = E[(\frac{X - \mu}{\sigma})^{3}] = \frac{m_{3}}{\sigma^{3}} = \frac{m_{3}}{m_{2}^{\frac{3}{2}}}$$</p><p><img src="skew.png"></p><h3 id="正态概率图"><a href="#正态概率图" class="headerlink" title="正态概率图"></a>正态概率图</h3><p>正态概率图用以检查一组数据是否服从正分布，是实际数据与正态分布分位数之间函数关系的散点图。如果一组数据服从或接近正态分布，其正态概率图中众多散点将是一条直线。如</p><p><img src="qq_plot1.png"></p><p><img src="qq_plot2.png"></p><p>第一个与第二个都是正态分布，第三个为正偏态分布，第四个为负偏态分布。左右对比也能看出比较明显的差异。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> DS&amp;DM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据分析 </tag>
            
            <tag> 统计学 </tag>
            
            <tag> 数据模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习中的统计学基础</title>
      <link href="2020/10/31/ji-qi-xue-xi-zhong-de-tong-ji-xue/"/>
      <url>2020/10/31/ji-qi-xue-xi-zhong-de-tong-ji-xue/</url>
      
        <content type="html"><![CDATA[<h2 id="机器学习与统计学习"><a href="#机器学习与统计学习" class="headerlink" title="机器学习与统计学习"></a>机器学习与统计学习</h2><p>统计强调推理，而机器学习则强调预测，他们一个很大的区别在于目的不同。机器学习与统计学习都是支撑数据建模，不同的是机器学习是数据建模的计算机视角，侧重技能；统计学习是数据建模的数学视角，侧重推断。</p><h2 id="部分机器学习算法中的统计学"><a href="#部分机器学习算法中的统计学" class="headerlink" title="部分机器学习算法中的统计学"></a>部分机器学习算法中的统计学</h2><table><thead><tr><th align="left">算法</th><th align="left">数理统计理论</th></tr></thead><tbody><tr><td align="left">贝叶斯分类器</td><td align="left">随机变量，贝叶斯公式，随机变量独立性，正态分布，最大似然估计</td></tr><tr><td align="left">贝叶斯网络</td><td align="left">条件概率，贝叶斯公式</td></tr><tr><td align="left">决策数</td><td align="left">概率，熵</td></tr><tr><td align="left">主成分分析</td><td align="left">协方差矩阵，特征值与特征向量</td></tr><tr><td align="left">logistic</td><td align="left">概率，随机变量，最大似然估计</td></tr><tr><td align="left">随机森林</td><td align="left">抽样，方差</td></tr><tr><td align="left">隐马尔可夫链</td><td align="left">概率，离散型随机变量，条件概率，随机变量独立性，虽大似然估计</td></tr><tr><td align="left">条件随机场</td><td align="left">条件概率，数学期望，最大似然估计</td></tr><tr><td align="left">高斯混合模型</td><td align="left">正态分布，最大似然估计</td></tr><tr><td align="left">生成对抗神经网络</td><td align="left">条件分布</td></tr></tbody></table><h2 id="一些统计学概念"><a href="#一些统计学概念" class="headerlink" title="一些统计学概念"></a>一些统计学概念</h2><h3 id="概率与条件概率"><a href="#概率与条件概率" class="headerlink" title="概率与条件概率"></a>概率与条件概率</h3><h4 id="概率"><a href="#概率" class="headerlink" title="概率"></a>概率</h4><p>现实世界中有一些概念是确定的，如石头下落，树木生长；同时一些是不确定的，如抛掷硬币，打靶射击。</p><p>不确定说明具有随机性，如果一个试验可以重复但每次结果不止一个，事先知道所有可能（样本空间）但不能确定每次出现什么结果（样本点），这就叫随机试验；随机试验中我们关心的子集就是随机事件。</p><p>抛掷一枚硬币100次，正面朝上与反面朝上分别60次（频数）和40次，频率分别是0.6和0.4，当重复试验次数增加，频率会变得稳定，下图表示英文单词中每个字母出现的频率。</p><p><img src="English_letter_frequency.png" alt="英文单词中每个字母出现的频率"></p><p>但现实中我们不可能每个事件都做大量的试验，所以使用概率来表征时间可能性。后面会聊到大数定律，就是当数量足够大后，频率趋近与概率。</p><p>如果集合函数 $P(\cdot)$ 满足下列条件，$P(A)$就是事件A的概率：</p><ol><li>非负性：对于每一个事件 A，有 $P(A)\geq 0$;</li><li>规范性：对于必然事件 S，有 $P(S)=1$;</li><li>可列可加性：设 $A_{1}$, $A_{2}$, ……是两两互不相容的事件，及对$A_{i}A_{j} = \Phi$,$i \neq j$, $i$, $j$ = 1,2,……，有<br>$$P(A_{1} \cup A_{2} \cup …) = P(A_{1}) + P(A_{2}) + … $$</li></ol><p>例：在1-2000的整数中随机取一个数，取到的整数既不能被6整除又不能被8整除的概率是多少：</p><p>$$P(\bar{A}\bar{B}) = P(\overline{A \cup B}) = 1 - P(A \cup  B)$$<br>$$= 1 - [P(A) + P(B) - P(AB)]$$<br>$$p = 1 - (\frac{333}{2000} + \frac{250}{2000} - \frac{83}{2000}) = \frac{3}{4}$$</p><h4 id="条件概率"><a href="#条件概率" class="headerlink" title="条件概率"></a>条件概率</h4><p>条件概率是在事件A发生了的基础上B发生的概率，且 $P(A) &gt; 0$，则<br>$$P(B | A) = \frac{P(AB)}{P(A)}$$<br>为事件A发生的条件下事件B发生的条件概率。</p><p>同概率的定义，条件概率同样满足3个条件。</p><ol><li>非负性</li><li>规范性</li><li>可列可加性</li></ol><p>所以对于任意事件 $B_{1}$，$B_{2}$，有<br>$$P(B_{1} \cup B_{2} | A) = P(B_{1} | A) + P(B_{2} | A) - P(B_{1}B_{2}| A)$$</p><h3 id="随机变量与分布"><a href="#随机变量与分布" class="headerlink" title="随机变量与分布"></a>随机变量与分布</h3><h4 id="随机变量"><a href="#随机变量" class="headerlink" title="随机变量"></a>随机变量</h4><p>随机试验的结果可以用数表示，每个样本空间中的元素都是数，但有时候样本空间S的元素不是一个数，此时难以研究，所以将S中的每个元素与实数空间联对应起来，于是有了随机变量。</p><p>同样抛掷硬币为例，一枚硬币投掷3次，样本空间为（假设正面为H，反面为T）：<br>$$S = {HHH, HHT, HTH, THH, HTT, THT, TTH, TTT}$$<br>若以X记三次投掷得倒正面H的总数，则S中的每一个样本点，在X中都有一个数与之对应，于是得到一个定义域为S，值域为${0, 1, 2, 3}$的函数：</p><p>$$X = X(e) =<br>\begin{cases}<br>3 &amp; e = HHH, \<br>2 &amp; e = HHT, HTH, THH, \<br>1 &amp; e = HTT, THT, TTH, \<br>0 &amp; e = TTT.<br>\end{cases}$$</p><p>以上记${X = 2}$，对应样本点集合 $A = {HHT, HTH, THH}$<br>，这一事件当且仅当事件A发生时有${X = 2}$。类似有：<br>$$P{X \leq 1} = P(HTT, THT, TTH, TTT) = \frac{1}{2}$$</p><h4 id="离散型随机变量分布"><a href="#离散型随机变量分布" class="headerlink" title="离散型随机变量分布"></a>离散型随机变量分布</h4><h5 id="离散型随机分布"><a href="#离散型随机分布" class="headerlink" title="离散型随机分布"></a>离散型随机分布</h5><p>离散型随机变量定义：全部可能取到的值是有限个或可列无限多个。<br>设全部可能取到的值为$x_{k}(k=1,2,3,…)$，则事件${X = x_{k}}$的概率为：<br>$$P{X = x_{k}} = p_{k}, k = 1,2,3,…$$<br>以上也叫随机变量X的分布律</p><h5 id="0-1-分布"><a href="#0-1-分布" class="headerlink" title="(0-1)分布"></a>(0-1)分布</h5><p>设随机变量X只可能是取0与1两个值，它的分布律是<br>$$P{X = k} = p^{k}(1 - p)^{1 - k}, k = 0, 1 (0 &lt; p &lt; 1)$$<br>则称X服从$p$为参数的(0-1)分布或两点分布<br>其随机变量函数为：<br>$$X = X(e) =<br>\begin{cases}<br>0 &amp; e = e_{1}, \<br>1 &amp; e = e_{2}.<br>\end{cases}$$<br>实际中的0-1分布如：新生儿性别，产品质量是否合格，PM2.5是否超标等。</p><h5 id="二项分布（伯努利试验）"><a href="#二项分布（伯努利试验）" class="headerlink" title="二项分布（伯努利试验）"></a>二项分布（伯努利试验）</h5><p>设试验E只有两种可能结果：$A$ 及 $\overline{A}$，则称E为伯努利试验。设$P(A) = p(0 &lt; p &lt; 1)$，此时$P(\overline{A}) = 1 - p$，将E独立重复（指每次$P(A) = p$保持不变）地进行n次，则这一串重复的独立试验为 n重伯努利试验。</p><p>n重伯努利试验某个A事件发生k次的概率可以记为：<br>$$\underbrace{p \cdot p \cdot … \cdot p}_{k个} \cdot \underbrace{(1 - p) \cdot (1 - p) \cdot … \cdot (1 - p)}_{n - k个} = p^{k}(1 - p)^{n - k}$$<br>这种指定的方式共有${n \choose k}$种，它们两两互不容，故在n次实验中A发生k次的概率为:<br>$$P{X = k} = {n \choose k}p^{k}q^{n - k}, k = 0,1,2,…,n.$$<br>$P{X = k} = {n \choose k}p^{k}q^{n - k}$正好是$(p + q)^{n}$的展开式中出现$p^{k}$的哪一项，故称变量X服从$n,p$的二项分布。</p><p>特别地：当$n = 1$时二项分布就是为<br>$$P{X = k} = p^{k}q^{1-k}$$</p><p>实际中二项分布的例子：单次射击命中率为0.02，独立射击400次</p><p>求至少命中两次的概率。<br>$$P{X = k} = {400 \choose k}(0.02)^{k}(0.98)^{400-k}, k = 0,1,2,…,400$$<br>于是所求概率为：<br>$$P{X \geq 2} = 1 - P{X = 0} - P{X = 1}$$</p><h5 id="柏松分布"><a href="#柏松分布" class="headerlink" title="柏松分布"></a>柏松分布</h5><p>设随机变量X所有可能取的值为0,1,2,…，取各个值的概率为<br>$$P{X = k} = \frac{\lambda^{k}e^{-\lambda}}{k!}, k = 0,1,2,…$$<br>其中$\lambda$是常数，则称X服从参数为$\lambda$的柏松分布。</p><p>实际中服从柏松分布的例子如：一本书一页中的印刷错误数，某地区一天内邮递遗失的信件数，某一医院一天内的急症病人数，某地区一个事件间隔内发生的交通事故次数。</p><p>柏松定理，设$\lambda$是一个常数，n是任意正整数，设$np_{n} = \lambda$，则对于任一个固定的非负整数k，有<br>$$\lim_{y \to \infty}{n \choose k}p^{k}_{n}(1 - p_{n})^{n - k} = \frac{\lambda^{k}e^{-\lambda}}{k!}$$<br>直观理解一下<br>柏松分布就是当n很大，但p很小时候的二项分布逼近</p><h4 id="连续型随机变量分布"><a href="#连续型随机变量分布" class="headerlink" title="连续型随机变量分布"></a>连续型随机变量分布</h4><h5 id="连续型随机分布"><a href="#连续型随机分布" class="headerlink" title="连续型随机分布"></a>连续型随机分布</h5><p>区别与离散型随机变量，连续型随机变量的样本空间值是不能被一一列举的，比如误差，元件寿命等。对于这样的随机变量，我们不太关注具体数值出现的概率，而是落在某一区间内的概率。于是有：<br>$$P{x_{1} &lt; X \leq x_{2}} = P{X \leq x_{2}} - P{X \leq x_{1}}$$</p><p>记：<br>$$F(x) = P{X \leq x}, -\infty &lt; x &lt; \infty$$<br>为X的分布函数</p><p>对于分布函数F(x)，存在非负函数f(x)，使得任意实数x有：<br>$$F(x) = \int^{x}_{-\infty}{f(t)dt}$$<br>则X为连续型随机变量，其中函数f(x)为X的概率密度函数（概率密度）。</p><h5 id="均匀分布"><a href="#均匀分布" class="headerlink" title="均匀分布"></a>均匀分布</h5><p>均匀分布的概率密度函数：<br>$$f(x) =<br>\begin{cases}<br>\frac{1}{b - a} &amp; a &lt; x &lt; b, \<br>0 &amp; 其他,<br>\end{cases}$$<br>该密度函数表示随机变量X落在区间(a,b)中任意长度的子区间内的可能性是相同的，概率只依赖于子区间长度，而与子区间未知无关。</p><p>通过对均匀分布密度函数求积分可得分布函数为：</p><p>$$F(x) =<br>\begin{cases}<br>0 &amp; x &lt; a, \<br>\frac{x - a}{b - a} &amp; a \leq x &lt; b, \<br>1 &amp; x \geq b,<br>\end{cases}$$</p><p>均匀分布密度函数与分布函数分别如下</p><p><img src="uniform_distribution.png" alt="均匀分布密度函数与分布函数"></p><h5 id="指数分布"><a href="#指数分布" class="headerlink" title="指数分布"></a>指数分布</h5><p>指数分布的密度函数为（$\theta &gt; 0$ 为常数）：<br>$$f(x) =<br>\begin{cases}<br>\frac{1}{\theta}e^{-x/\theta} &amp; x &gt; 0, \<br>0 &amp; 其他,<br>\end{cases}$$</p><p>通过对指数分布密度函数求积分可得分布函数为：<br>$$f(x) =<br>\begin{cases}<br>1 - e^{-x/\theta} &amp; x &gt; 0, \<br>0 &amp; 其他,<br>\end{cases}$$<br>指数分布有一个重要的性质是无记忆性，比如一个电子元件已经使用了s小时，它总共能使用至少s+t小时的条件概率，与从开始使用时候算起至少使用t小时的概率相等，即对已经使用的s小时没有记忆。</p><p>指数分布无记忆性公式：<br>$$P{X &gt; s + t | X &gt; s} = P{X &gt; t}$$</p><h5 id="正态分布"><a href="#正态分布" class="headerlink" title="正态分布"></a>正态分布</h5><p>正态分布的密度函数为（$\mu,\sigma(\sigma &gt; 0)$为常数）：<br>$$f(x) = \frac{1}{\sqrt{2\pi}\sigma}e^-{\frac{(x - \mu)^{2}}{2\sigma ^{2}}}, -\infty &lt; x &lt; \infty$$</p><p>特别地，当$\mu = 0,\sigma = 1$时候称随机变量X服从标准正态分布。</p><p>对于任意一个正态分布，经过一个线性变换就能转化成标准正态分布。</p><p>若$X ～ N(\mu,\sigma^{2})$，则$Z = \frac{X - \mu}{\sigma} ～ N(0, 1)$</p><p>正态分布函数与密度函数分别如下</p><p><img src="normal_distribution.png" alt="正态分布函数与密度函数"></p><p>尽管正态变量的取之范围是$(-\infty, \infty)$，但它的值落在$(\mu - 3\sigma, \mu + 3\sigma)$内几乎是肯定的事，所以常被认为是$3\sigma$法则（$1\sigma$概率68.26%，$2\sigma$概率95.44%，$3\sigma$概率99.76%）。</p><h3 id="随机变量的数字特征"><a href="#随机变量的数字特征" class="headerlink" title="随机变量的数字特征"></a>随机变量的数字特征</h3><h4 id="数学期望（一阶原点矩）"><a href="#数学期望（一阶原点矩）" class="headerlink" title="数学期望（一阶原点矩）"></a>数学期望（一阶原点矩）</h4><p>若离散型随机变量X的分布律为：<br>$$P{X = x_{k}} = p_{k}, k = 1,2,…$$<br>若级数<br>$$\sum^{\infty}_{k = 1}{x_{k}p_{k}}$$<br>绝对收敛，则该级数的和为随机变量X的数学期望，记为$E(X)$。</p><p>同理：</p><p>设连续型随机变量X的概率密度函数为$f(x)$，若积分<br>$$\int^{\infty}_{-\infty}{xf(x)dx}$$<br>绝对收敛，则该积分的值为随机变量X的数学期望，记为$E(X)$。</p><p>数学期望$E(X)$由随机变量X的概率分布确定，若X服从某一分布，则$E(X)$为这一分布的数学期望。</p><h4 id="方差（二阶中心矩）"><a href="#方差（二阶中心矩）" class="headerlink" title="方差（二阶中心矩）"></a>方差（二阶中心矩）</h4><p>数学期望可以评估平均水平，但实际中往往还需要评估偏离程度，于是用<br>$$E{|X - E(X)|}$$<br>来度量偏离程度，因绝对值运算不方便，故使用<br>$$E{[X - E(X)]^{2}}$$<br>来度量偏离程度，记为$D(X)$或$Var(X)$（在实际应用中引入$\sqrt{D(X)}$，记为$\sigma(X)$）表示标准差。</p><p>对于分布率为$P{X = x_{k}} = p_{k}, k = 1,2,…$的离散型随机变量有：<br>$$D(X) = \sum^{\infty}_{k = 1}{[X_{k} - E(X)]^{2}p_{k}}$$</p><p>对于概率密度是$f(x)$的连续型随机变量有：<br>$$D(X) = \int^{\infty}_{-\infty}{[x - E(X)]^{2}f(x)dx}$$</p><h4 id="协方差与相关系数"><a href="#协方差与相关系数" class="headerlink" title="协方差与相关系数"></a>协方差与相关系数</h4><p>对于二维随机变量(X, Y)，除了X与Y的数学期望和方差之外，还需要度量X与Y之间的相互关系。</p><p>若两个随机变量X与Y相互独立，则容易得出：<br>$$E{[X - E(X)][Y - E(Y)]} = 0$$<br>这说明当$E{[X - E(X)][Y - E(Y)]} \neq 0$时，X与Y存在一定关系（不相互独立）。</p><p>于是记$E{[X - E(X)][Y - E(Y)]}$为随机变量X与Y的协方差，记为$Cov(X, Y)$，即：<br>$$Cov(X, Y) = E{[X - E(X)][Y - E(Y)]}$$<br>而<br>$$\rho_{xy} = \frac{Cov(X, Y)}{\sqrt{D(X)}\sqrt{D(Y)}}$$<br>就是随机变量X与Y的相关系数。</p><p>于是对于任意两个随机变量X与Y，有<br>$$D(X + Y) = D(X) + D(Y) + 2Cov(X, Y)$$<br>$$Cov(X, Y) = E(XY) - E(X)E(Y)$$</p><h2 id="机器学习中的统计学基础"><a href="#机器学习中的统计学基础" class="headerlink" title="机器学习中的统计学基础"></a>机器学习中的统计学基础</h2><h3 id="训练样本预测测试样本是可行的——样本与抽样分布"><a href="#训练样本预测测试样本是可行的——样本与抽样分布" class="headerlink" title="训练样本预测测试样本是可行的——样本与抽样分布"></a>训练样本预测测试样本是可行的——样本与抽样分布</h3><p>在概率论中，我们所研究的随机变量，它的分布都是假设已知的，在这一前提下去研究它性质，特点和规律；在数理统计中，我们研究的随机变量，总体的分布一般是未知的，或只知道它包含某种未知数的某种形式，于是通过对所研究对随机变量进行独立重复的观察，抽取一部分个体（样本）的观察值进行分析，根据获得的数据来对总体分布进行统计推断。对样本进行抽样时候一般有无放回抽样和有放回抽样，整理观察值一般有直方图与箱线图。</p><p>为了进行统计推断，一般不直接使用统计本身，而是针对不同问题构造适当的函数，常称其为统计量，以下为几个常用统计量。</p><p>样本平均值：<br>$$\overline{X} = \frac{1}{n}\sum^{n}_{i =1} X_{i}$$<br>更广泛地有样本k阶（原点）矩：<br>$$A_{k} = \frac{1}{n}\sum^{n}_{i = 1}X^{k}_{i}, k = 1,2,…$$</p><p>样本方差为二阶中心矩的（无偏估计）：<br>$$S^{2} = \frac{1}{n-1}\sum^{n}_{i = 1}{(X_{i} - \overline{X})^{2}} = \frac{1}{n - 1}{(\sum^{n}_{i = 1}X^{2}<em>{i} - n\overline{X}^{2})}$$<br>更广泛地有样本k阶中心矩：<br>$$B</em>{k} = \frac{1}{n}\sum^{n}_{i = 1}{(X_{i} - \overline{X})^{k}}, k = 2,3,…$$</p><p>同理，可以作出与总体分布函数$F(x)$相应的统计量——经验分布函数。</p><p>设$X_{1}, X_{2},… ,X_{n}$是总体F中的一个样本，用$S(x), -\infty &lt; x &lt; \infty$表示$X_{1}, X_{2},… ,X_{n}$中不大雨x的随机变量的个数，定义经验分布函数$F_{n}(x)$为<br>$$F_{n}(x) = \frac{1}{n}S(x), -\infty &lt; x &lt; \infty$$</p><p>对于经验分布函数$F_{n}(x)$，格里汶科（Glivenko）在1993年证明了以下结果：对于任意实数x，当$n \to \infty$时，$F_{n}(x)$以概率1一致收敛与分布函数$F(x)$，即<br>$$P{\lim_{n \to \infty} \sup_{-\infty &lt; x &lt; \infty} | F_{n}(x) - F(x) | = 0} = 1$$</p><p>因此，对于任一实数x当n充分大时，经验分布函数的任意观察值$F_{n}(x)$与总体分布函数$F(x)$只有微小的差别，从而在实际中可以当作$F(x)$来使用。</p><h3 id="机器学习中的预测——参数估计"><a href="#机器学习中的预测——参数估计" class="headerlink" title="机器学习中的预测——参数估计"></a>机器学习中的预测——参数估计</h3><h4 id="点估计"><a href="#点估计" class="headerlink" title="点估计"></a>点估计</h4><p>设总体X的分布函数的形式已知，但它的一个或多个参数未知，借助于总体X的一个样本来估计总体未知参数的值的问题记为点估计。</p><p>点估计问题的一般提法如下：</p><p>设总体X的分布函数$F(x; \theta)$的形式为已知，$\theta$是待估参数，$X_{1},X_{2},…,X_{n}$是X的一个样本，$x_{1},x_{2},…,x_{n}$是相应的一个样本值，点估计的问题就是构造一个适当的统计量$\hat{\theta}(X_{1},X_{2},…,X_{n})$，用它的观测值$\hat{\theta}(x_{1},x_{2},…,x_{n})$作为未知参数$\theta$的近似值，我们称$\hat{\theta}(X_{1},X_{2},…,X_{n})$为估计量，称$\hat{\theta}(x_{1},x_{2},…,x_{n})$为估计值。</p><p>常用构造估计量的方法为矩估计法和最大似然估计法</p><h5 id="矩估计法"><a href="#矩估计法" class="headerlink" title="矩估计法"></a>矩估计法</h5><p>设X为连续型随机变量，其概率密度为$f(x; \theta_{1}, \theta_{2}, …, \theta_{k})$，或X为离散型随机变量，其分布律为$P{X = x} = p(x; \theta_{1}, \theta_{2}, …, \theta_{k})$，其中$\theta_{1}, \theta_{2}, …, \theta_{k}$为待估参数，$X_{1},X_{2},…,X_{n}$是来自X的样本，假设总体X的前k阶矩（$l = 1,2,…,k$）</p><p>X连续型<br>$$\mu_{l} = E(X^{l}) = \int^{\infty}_{-\infty}x^{l}f(x; \theta_{1}, \theta_{2}, …, \theta_{k})dx$$</p><p>X离散型（$R_{X}$是X可能取值的范围）<br>$$\mu_{l} = E(X^{l}) = \sum_{x \in R_{X}}x^{l}p(x; \theta_{1}, \theta_{2}, …, \theta_{k})$$</p><p>存在，一般来说，它们是$\theta_{1}, \theta_{2}, …, \theta_{k}$的函数，基于样本矩</p><p>$$A_{i} = \frac{1}{n}\sum^{n}_{i = 1}X^{l}_{i}$$</p><p>依概率收敛于相应的总体矩$\mu_{l}(l = 1,2,…,k)$，样本矩的连续函数依概率收敛于相应的总体矩的连续函数，我们就用样本矩作为相应的总体矩的估计量，而以样本矩的连续函数作为相应总体矩的连续函数的估计量。这种估计方法就是矩估计法。</p><p>具体而言，设</p><p>$$\begin{cases}<br>\mu_{1} = \mu_{1}(\theta_{1}, \theta_{2}, …, \theta_{k}), \<br>\mu_{2} = \mu_{2}(\theta_{1}, \theta_{2}, …, \theta_{k}), \<br>… … \<br>\mu_{k} = \mu_{k}(\theta_{1}, \theta_{2}, …, \theta_{k})<br>\end{cases}$$</p><p>一般而言对联立方程组求解可得</p><p>$$\begin{cases}<br>\theta_{1} = \theta_{1}(\mu_{1}, \mu_{2}, …, \mu_{k}), \<br>\theta_{2} = \theta_{2}(\mu_{1}, \mu_{2}, …, \mu_{k}), \<br>… … \<br>\theta_{k} = \theta_{k}(\mu_{1}, \mu_{2}, …, \mu_{k})<br>\end{cases}$$</p><p>以$A_{i}$分别代替$\mu_{i}$，就以<br>$$\hat{\theta_{i}} = \theta_{i}(A_{1}, A_{2}, …, A_{k}), i = 1,2,…,k$$</p><p>分别作为$\theta_{i}$的估计量，这种估计量称为矩估计量。</p><h5 id="最大似然估计"><a href="#最大似然估计" class="headerlink" title="最大似然估计"></a>最大似然估计</h5><p>若总体X属于离散型，其分布律$P{X = x} = p(x; \theta), \theta \in \Theta$的形式为已知，$\theta$为待估参数，$\Theta$是$\theta$可能取值的范围，设$X_{1},X_{2},…,X_{n}$是来自X的样本，则$X_{1},X_{2},…,X_{n}$的联合分布律为</p><p>$$\prod^{n}_{i = 1}{p(x_{i}; \theta)}$$</p><p>又设$x_{i},x_{2},…,x_{n}$是相应于样本$X_{i},X_{2},…,X_{n}$的一个样本值，可得到$X_{i},X_{2},…,X_{n}$取到观察值$x_{i},x_{2},…,x_{n}$的概率值，即事件${X_{1} = x_{1}, X_{2} = x_{2},…,X_{n} = x_{n}}$发生的概率为</p><p>$$L(\theta) = L(x_{i},x_{2},…,x_{n}; \theta) = \prod^{n}_{i = 1}{p(x_{i}; \theta)}, \theta \in \Theta$$</p><p>这以概率随$\theta$的取值而变化，它是$\theta$的函数，$L(\theta)$称为样本的似然函数。</p><p>直观理解，现在已经取到样本值$x_{i},x_{2},…,x_{n}$，这表明取到这一样本值的概率$L(\theta)$较大，所以我们不会考虑那些不能使样本$x_{i},x_{2},…,x_{n}$出现的$\theta \in \Theta$作为$\theta$的估计；反之，如果已知$\theta = \theta_{0} \in \Theta$时有$L(\theta)$取得很大值，而$\Theta$中的其他$\theta$的值使$L(\theta)$取很小值，我们自然可以认为取$\theta_{0}$作为未知参数$\theta$的估计值较为合理。</p><p>由费希尔（R.A.Fisher）引进的最大似然估计法就是固定样本观察值$x_{i},x_{2},…,x_{n}$，在$\theta$取值的可能范围$\Theta$内挑选使似然函数$L(x_{i},x_{2},…,x_{n}; \theta)$达到最大的参数值$\hat{\theta}$，作为参数$\theta$的估计值，即取$\hat{\theta}$使</p><p>$$L(x_{i},x_{2},…,x_{n}; \hat{\theta}) = \max_{\theta \in \Theta}{L(x_{i},x_{2},…,x_{n}; \theta)}$$</p><p>这样得到的$\hat{\theta}$与样本值$x_{i},x_{2},…,x_{n}$有关，常记为$\hat{\theta}(x_{i},x_{2},…,x_{n})$，称为参数$\theta$的最大似然估计值，而相应的统计量$\hat{\theta}(X_{i},X_{2},…,X_{n})$称为参数$\theta$的最大似然估计量。</p><h4 id="区间估计"><a href="#区间估计" class="headerlink" title="区间估计"></a>区间估计</h4><p>对于一个未知量，在测量和计算时，有时近似值不足以满足要求，还需要估计误差，即要知道近似值的精确程度，类似地，对未知参数$\theta$，除了对其进行点估计$\hat{\theta}$外，我们还需要估计出一个范围，并希望知道这个范围包含参数$\theta$真值的可信程度，这样的范围通常以区间的形式给出，这样的区间就是置信区间。</p><p>设总体X的分布函数$F(x; \theta)$含有一个未知参数$\theta, \theta \in \Theta$（$\Theta$是$\theta$可能取值的范围），对于给定值$\alpha$（$0 &lt; \alpha &lt; 1$），若由来自样本$X_{i},X_{2},…,X_{n}$确定的两个统计量$\overline{\theta}_{1} = \overline{\theta}_{1}{(X_{i},X_{2},…,X_{n})}$和$\overline{\theta}_{2} = \overline{\theta}_{2}{(X_{i},X_{2},…,X_{n})}(\overline{\theta}_{1} &lt; \overline{\theta}_{2})$，对于任意$\theta \in \Theta$满足</p><p>$$P{\overline{\theta}_{1}{(X_{i},X_{2},…,X_{n})} &lt; \theta &lt; \overline{\theta}_{2} = {(X_{i},X_{2},…,X_{n})}} \geq 1- \alpha$$</p><p>则称随机区间$(\overline{\theta}_{1}, \overline{\theta}_{2})$是$\theta$的置信水平为$1 - \alpha$的置信区间，$\overline{\theta}_{1}$和$\overline{\theta}_{2}$分别为置信下限和置信上限。</p><p>直观理解，若反复抽样多次（各次得打的样本容量相等，都是n），每个样本值确定一个区间$(\overline{\theta}_{1}, \overline{\theta}_{2})$，每个这样的区间要么包含$\theta$的真值，要不不包含$\theta$的真值，按伯努利大数定理，这么多的区间中，包含$\theta$真值的约占$100(1 - \alpha)%$，不包含$\theta$真值的约占$100\alpha%$。</p><h3 id="判定模型是否合理——假设检验"><a href="#判定模型是否合理——假设检验" class="headerlink" title="判定模型是否合理——假设检验"></a>判定模型是否合理——假设检验</h3><h4 id="假设检验与两类错误"><a href="#假设检验与两类错误" class="headerlink" title="假设检验与两类错误"></a>假设检验与两类错误</h4><p>在总体的分布函数完全未知或只知其形式，但不知具体参数的情况下，为了推断总体的某些未知特性，提出关于某些关于总体的假设，我们要根据样本对所提出的假设作出接受或拒绝的决策，假设检验就是这一决策的过程。</p><p>对于一个假设检验问题，在显著性水平$\alpha$下，检验假设</p><p>$$H_{0}: \mu = \mu_{0},$$<br>$$H_{1}: \mu \neq \mu_{0}.$$</p><p>其中$H_{0}$为原假设或零假设，$H_{1}$为备择假设。</p><p>由于检验是根据样本作出的，总有可能作出错误的决策，在假设$H_{0}$为真时，我们可能犯拒绝$H_{0}$的错误，称这一类“弃真”的错误为第I类错误；又当$H_{0}$实际上不真时，我们也有可能接受$H_{0}$，称这种“取伪”当错误为第II错误。</p><p>在确定检验法则时我们尽可能使犯两类错误的概率都小，但死当样本量固定的条件下，若减少犯一类错误的概率，往往另一类错误的概率会增加。一般来说，我们总是控制犯第I类错误的概率，使它不大于$\alpha$（$\alpha$一般取0.1, 0.05, 0.01, 0.005），这种只对犯第I类错误对概率进行控制，而不考虑犯第II类错误的概率的检验称为显著性检验。</p><h4 id="一个正态分布的均值检验（例）"><a href="#一个正态分布的均值检验（例）" class="headerlink" title="一个正态分布的均值检验（例）"></a>一个正态分布的均值检验（例）</h4><p>例：某机器生产的产品净重是一个随机变量，它服从均值0.5kg，标准差0.015kg，某日随机抽取9袋进行检查，称得净重为(kg)</p><p>0.497 | 0.506 | 0.518 | 0.524 | 0.498 | 0.511 | 0.520 | 0.515 | 0.512</p><p>问机器是否正常（置信度0.05）？</p><p>解：<br>$$H_{0}: \mu = \mu_{0} = 0.5$$<br>$$H_{1}: \mu \neq \mu_{0}$$</p><p>当$H_{0}$为真时有</p><p>$$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} ～ N(0, 1)$$</p><p>重而衡量$|\overline{x} - \mu_{0}|$当大小可以归结为衡量$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}$的大小。我们可适当选择一正数k，使当观察值$\overline{x}$满足$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} \geq k$时就拒绝假设$H_{0}$，反之$\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}} &lt; k$就接受$H_{0}$。</p><p>即当满足</p><p>$$|z| = |\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| \geq k = z_{\alpha/2}$$</p><p>则接受$H_{0}$，而若</p><p>$$|z| = |\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| &lt; k = z_{\alpha/2}$$</p><p>则接受$H_{0}$。</p><p>取$\alpha = 0.05$计算得</p><p>$$|\frac{\overline{X} - \mu_{0}}{\sigma/\sqrt{n}}| = 2.2 &gt; 1.96$$</p><p>故在0.05置信度下拒绝$H_{0}$，机器不正常。</p><h4 id="假设检验解决的一些问题"><a href="#假设检验解决的一些问题" class="headerlink" title="假设检验解决的一些问题"></a>假设检验解决的一些问题</h4><ul><li>单个总体均值检验</li><li>多个总体均值检验</li><li>单个总体方差检验</li><li>多个总体方差检验</li><li>样本容量选取</li><li>分布拟合检验</li></ul><h3 id="大数据让机器学习效果更好－大数定律与中心极限定理"><a href="#大数据让机器学习效果更好－大数定律与中心极限定理" class="headerlink" title="大数据让机器学习效果更好－大数定律与中心极限定理"></a>大数据让机器学习效果更好－大数定律与中心极限定理</h3><h4 id="大数定律"><a href="#大数定律" class="headerlink" title="大数定律"></a>大数定律</h4><p>当随机事件A进行大量重复试验以后，其频率$f_{n}(x)$会随着n的增大而出现稳定性，稳定在一个常数附近，这种稳定性是概率定义的客观基础。</p><p>辛钦大数定理（弱大数定律）表示在数学期望存在的条件下其数学期望依概率收敛。设$X_{1},X_{2},…$是相互独立同分布的随机变量序列，且具有数学期望$E(X_{k}) = \mu (k = 1,2,…)$作前n和变量的算术平均$\frac{1}{n}\sum^{n}_{k = 1}{X_{k}}$，对任意的$\epsilon &gt; 0$有：<br>$$\lim_{n \to \infty}P({|\frac{1}{n}\sum^{n}_{k = 1}{X_{k}} - \mu| &lt; \epsilon}) = 1$$</p><p>对于连续型随机变量，设$f_{A}$是n次独立重复试验中事件A发生的次数，p是事件A在每次试验中发生的概率，则对于任意正数$\epsilon &gt; 0$有：<br>$$\lim_{n \to \infty}P({|\frac{f_{A}}{n} - p| &lt; \epsilon}) = 1$$<br>或<br>$$\lim_{n \to \infty}P({|\frac{f_{A}}{n} - p| \geq \epsilon}) = 0$$<br>这就是著名的伯努利大数定理。</p><p>强大数定理由波莱尔在1909年对伯努利试验场合验证，一般情形的强大数定理证明由柯尔莫哥洛夫给出。</p><p>弱大数定律是依概率收敛，强大数定律则是以概率1收敛（几乎处处收敛），只要n足够大，任意指定一个正整数$\epsilon$，总能找到一个N，使当n &gt; N时，前n个变量的算术平均与$\mu$的差大于$\epsilon$的次数有限的。表达式可定义为：<br>$$P{\lim_{n \to \infty}{\frac{X_{1} + X_{2} + … + X_{n}}{n} = \mu}} = 1$$</p><p>弱大数定律表明对于足够大的值$n^{<em>}$，随机变量$\frac{X_{1} + X_{2} + … + X_{n^{\</em>}}}{n^{*}}$的值靠近$\mu$，但它不能保证所有的$n &gt; n^{<em>}$，$\frac{X_{1} + X_{2} + … + X_{n^{\</em>}}}{n^{*}}$仍然停留在$\mu$附近，因此$|\frac{X_{1} + X_{2} + … + X_{n^{*}}}{n^{*}} - \mu|$可以无限多次离开0（尽管较大偏离的频率不会很高）。而强大数定律能保证这种情况不会发生，特别地，强大数定律表明这种表示以概率1成立。即对于任意的$\epsilon &gt; 0$有：<br>$$|\sum^{n}_{i = i}{\frac{X_{i}}{n}} - \mu| &gt; \epsilon$$<br>只会出现有限次。</p><h4 id="中心极限定理"><a href="#中心极限定理" class="headerlink" title="中心极限定理"></a>中心极限定理</h4><p>在客观实际中有许多随机变量，他们由大量相互独立的随机因素综合影响所形成，其中每一个别因素影响在总的影响中所起的作用都是微小的，这种随机变量往往服从正态分布。这种现象构成了中心极限定理的客观背景。</p><p>这就是为什么正态分布在概率论甚至整个现实世界中重要的原因，在很多问题中，所考虑的随机变量可以表示成很多独立的随机变量只和。而对于不相互独立的随机变量，就会出现马太效应。</p><p>独立同分布的中心极限定理（表达式构造比较复杂）表示均值为$\mu$，方差为$\sigma^{2} &gt; 0$的独立同分布的随机变量$X_{1},X_{2},…,X_{n}$之和$\sum^{n}_{k = 1}{X_{k}}$的标准化变量，当n充分大时，近似成立</p><p>$$\frac{\sum^{n}_{k = 1}{X_{A}} - n\mu}{\sqrt{n}\sigma} ～N(0, 1)$$</p><p>李雅普诺夫（Lyapunov定理）（表达式构造比较复杂）表示，在定理的条件下，随机变量</p><p>$$Z_{n} = \frac{\sum^{n}_{k = 1}{X_{k}} - \sum^{n}_{k = 1}{\mu_{k}}}{B_{n}}$$</p><p>当n很大时，近似地服从正态分布N(0, 1)。</p><p>棣莫弗-拉普拉斯（De Moivre-Laplace）定理（表达式构造比较复杂）说明正态分布是二项分布的极限分布。</p><h2 id="用数理统计解决实际问题"><a href="#用数理统计解决实际问题" class="headerlink" title="用数理统计解决实际问题"></a>用数理统计解决实际问题</h2><h3 id="回归"><a href="#回归" class="headerlink" title="回归"></a>回归</h3><p>这里主要讨论一元线性回归，一般表达式为$y = a + bx$。</p><p>假设对于x（在某一区间内）的每一个值有</p><p>$$Y ～ N(a + bx, \sigma^{2})$$</p><p>其中$a,b$及$\sigma^{2}$都不是依赖于x的未知参数，及$\epsilon = Y - (x + bx)$，相当于假设</p><p>$$Y = a + bx + \epsilon, \epsilon ～ N(0, \sigma^{2})$$</p><p>下面对$a, b$进行参数估计（中间结果省略）得到一个方程组</p><p>$$\begin{cases}<br>na + (\sum^{n}_{i = 1}{x_{i}})b = \sum^{n}_{i = 1}{y_{i}},\<br>(\sum^{n}_{i = 1}{x_{i}})a + (\sum^{n}_{i = 1}{x_{i}^{2}})b = \sum^{n}_{i = 1}{x_{i}y_{i}}<br>\end{cases}$$</p><p>解得最大似然估计值为</p><p>$$\hat{b} = \frac{n\sum^{n}_{i = 1}{x_{i}y_{i}} - (\sum^{n}_{i = 1}{x_{i}})(\sum^{n}_{i = 1}{y_{i}})}{n\sum^{n}_{i = 1}{x_{i}^{2}} - (\sum^{n}_{i = 1}{x_{i}})^{2}} = \frac{\sum^{n}_{i = 1}{(x_{i} - \overline{x})(y_{i} - \overline{y})}}{\sum^{n}_{i = 1}{(x_{i} - \overline{x})^{2}}}$$</p><p>$$\hat{a} = \frac{1}{n}\sum^{n}_{i = 1}{y_{i}} - \frac{\hat{b}}{n}{\sum^{n}_{i = 1}{x_{i}}} = \overline{y} - \hat{b}\overline{x}$$</p><p>在得到$a,b$的估计$\hat{a}, \hat{b}$后，我们就取$\hat{a} + \hat{b}x$为回归函数$\mu(x) = a + bx$的估计。</p><p>$$\hat{y} = \hat{a} + \hat{b}x$$</p><p>就为一元回归方程。</p><h3 id="朴素贝叶斯"><a href="#朴素贝叶斯" class="headerlink" title="朴素贝叶斯"></a>朴素贝叶斯</h3><p>贝叶斯的思想主要为通过先验概率加数据得后验概率。这里主要讨论朴素贝叶斯的算法过程。</p><p>设训练集为m和样本n和纬度</p><p>$$(x^{(1)}_{1},x^{(1)}_{2},…,x^{(1)}_{n},y_{1}), (x^{(2)}_{1},x^{(2)}_{2},…,x^{(2)}_{n},y_{2}), …,<br>(x^{(m)}_{1},x^{(m)}_{2},…,x^{(m)}_{n},y_{m})$$</p><p>共有k个特征输出类别，分别为$C_{1},C_{2},…,C_{k}$，每个特征输出的类别的样本数为$m_{1},m_{2},…,m_{k}$，在第k个类别中，如果是离散特征，则特征$X_{j}$各个类别取值为$m_{jl},l = 1,2,…,S_{j}$，$S_{j}$为特征j的 不同取值数。</p><p>输出为$X^{t}$的分类</p><p>算法流程如下：</p><p>1.如果没有Y的先验概率，则计算Y的K个先验概率</p><p>$$P(Y = C_{k}) = (m_{k} + \lambda)/(m + K\lambda)$$</p><p>否则$P(Y = C_{k})为输入的先验概率$</p><p>2.分别计算第k个类别的第j纬特征的第$l$个取值条件概率</p><p>$$P(X_{j} = x_{jl} | Y = C_{k})$$</p><p>如果是离散值</p><p>$$P(X_{j} = x_{jl} | Y = C_{k}) = \frac{m_{kjl} + \lambda}{m_{k} + S_{j}\lambda}, \lambda &gt; 0$$</p><p>如果是连续值直接求正态分布参数</p><p>$$P(X_{j} = x_{j} | Y = C_{k}) = \frac{1}{\sqrt{2\pi}\sigma_{k}}e^-{\frac{(x_{j} - \mu_{k})^{2}}{2\sigma_{k}^{2}}}$$</p><p>$\mu_{k}$为样本$C_{k}$中的所有$X_{j}$平均值，$\sigma_{k}^{2}$为方差。</p><p>对于需要预测的$X^{t}$，分别计算</p><p>$$P(Y = X_{k})\prod^{n}_{j = 1}P(X_{j} = x^{t}_{j} | Y = C_{k})$$</p><p>$X^{t}$的分类$C_{result}$为</p><p>$$C_{result} =\max_{C_{k}}P(Y = C_{k})\prod^{n}_{j = 1}P(X_{j} = X^{t}_{j} | Y = C_{k}))$$</p><h3 id="航空公司预售票策略"><a href="#航空公司预售票策略" class="headerlink" title="航空公司预售票策略"></a>航空公司预售票策略</h3><h4 id="问题分析"><a href="#问题分析" class="headerlink" title="问题分析"></a>问题分析</h4><p>对于一次航班，若航空公司限制订票对数量恰等于飞机法容量，那么由于总会有一些定了机票但不按时登机的乘客，致使飞机因不满员飞行而利润下降。而如果不限制预订票数量，那么当持票按时前来的乘客超过飞机容量时，必然引起乘客的抱怨，影响其社会声誉。所以航空公司需要综合考虑紧急利益与社会声誉，确定订票数量的最佳限额。</p><p>公司的经济利益可以用机票收入扣除飞行费用和赔偿金后的利润来衡量，社会声誉可以用持票前来登机，但因满员无法飞走的乘客限制在一定数量来衡量。该问题的关键因素——预定票乘客是否能按时来登机，这个因素是随机的。所以经济利益和社会声誉都需要在平均意义下衡量。这两个目标的优化问题，决策变量都是预定票数量的限额。</p><h4 id="模型假设"><a href="#模型假设" class="headerlink" title="模型假设"></a>模型假设</h4><p>1.飞机容量为n，假票价格为g，飞行费用为r，机票价格按照$g = r / \lambda n$来制定，其中$\lambda$为利润调节因子，如$\lambda = 0.6$表示飞机60%满员率就不亏本。</p><p>2.预定票数量的限额为m（m &gt; n），每位乘客不按时登机的概率为$p$，各位乘客之间是否按时登机相互独立。</p><p>3.无法飞走的乘客获得赔偿金为b</p><h4 id="模型建立"><a href="#模型建立" class="headerlink" title="模型建立"></a>模型建立</h4><p>公司经济利益用平均理论S来衡量，每次航班的利润s为从机票收入中减飞行费用和可能发生的赔偿金。当m为乘客有k为不按时来登机时</p><p>$$s =<br>\begin{cases}<br>(m - k)g -r &amp; m - k \leq n, \<br>ng - r - (m - k - n)b &amp; m - k &gt; n<br>\end{cases}$$</p><p>由假设2，不按前来登机当乘客数k服从二项分布，于是概率</p><p>$$p_{k} = P(K = k) = {m \choose k}p^{k}q^{m - k}, q = 1 - p$$</p><p>平均利润S(s的期望)为</p><p>$$S(m) = \sum^{m - n -1}_{k = 0}{[ng - r - (m - k - n)b]p_{k}} + \sum^{m}_{k = m - n}{[(m - k)g - r]p_{k}}$$</p><p>其中$\sum^{m}_{k = 0}{k p_{k}} = mp$</p><p>$$S(m) = qmg - r - (g + b) \sum^{m - n - 1}_{k = 0}{(m - k - n)p_{k}}$$</p><p>当$n, g, r, p$给定后，可以求m使得S(m)最大。</p><p>从公司声誉和经济利益两方面考虑，应该让不能飞走当乘客不要太多，而由于这个数量是随机的，可以用不能飞走的乘客数超过若干人的概率作为度量指标，记不超过j个人的概率为$P_{j}(m)$，因为不能飞走的乘客超过j人，等价于m位预定票的乘客中不按时来登机的不超过$m - n - j -1$人，所以</p><p>$$P_{j}(m) = \sum^{m - n - j - 1}_{k = 0}{p_{k}}$$</p><p>对于给定的n, j，显然当 m = n + j时不能飞走的乘客不超过 j 人，$P_{j}{m} = 0$，而当m变大时$P_{j}{m}$单调增加。</p><p>以上$S(m)$和$P_{j}{(m)}$无法解析求解，需要进行数值计算求解。</p><h2 id="更多数学模型"><a href="#更多数学模型" class="headerlink" title="更多数学模型"></a>更多数学模型</h2><ul><li>优化模型</li><li>数学规划模型</li><li>微分方程模型</li><li>代数方程与差分方程模型</li><li>稳定性模型</li><li>离散模型</li><li>概率模型</li><li>统计回归模型</li><li>博弈模型</li><li>马氏链模型</li><li>动态优化模型</li></ul><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 统计学 </tag>
            
            <tag> 数据模型 </tag>
            
            <tag> 数理统计 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用距离定义与计算</title>
      <link href="2020/10/31/chang-yong-ju-chi-ding-yi-yu-ji-suan/"/>
      <url>2020/10/31/chang-yong-ju-chi-ding-yi-yu-ji-suan/</url>
      
        <content type="html"><![CDATA[<h2 id="说明"><a href="#说明" class="headerlink" title="说明"></a>说明</h2><p>此处主要使用scipy中的距离计算模块，scipy.spatial.distance</p><p>源码在这里 <a href="https://github.com/scipy/scipy/blob/v0.17.1/scipy/spatial/distance.py#L606-L634">scipy距离计算源码</a> </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>spatial <span class="token keyword">import</span> distance<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="数值向量距离"><a href="#数值向量距离" class="headerlink" title="数值向量距离"></a>数值向量距离</h2><h3 id="布雷柯蒂斯相异度（Bray-Curtis-distance）"><a href="#布雷柯蒂斯相异度（Bray-Curtis-distance）" class="headerlink" title="布雷柯蒂斯相异度（Bray-Curtis distance）"></a>布雷柯蒂斯相异度（Bray-Curtis distance）</h3><p>Bray-Curtis 相异度（Bray-Curtis dissimilarity）是生态学中用来衡量不同样地物种组成差异的测度。由J. Roger Bray and John T. Curtis 提出。其计算基于样本中不同物种组成的数量特征（多度，盖度，重要值等）。计算公式为：</p><p>$$\frac{\sum_{i = 1}^{n}|x_{i} - y_{i}|}{\sum_{i = 1}^{n}|x_{i} + y_{i}|}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>braycurtis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.5</code></pre><h3 id="坎贝拉距离（Canberra-distance）"><a href="#坎贝拉距离（Canberra-distance）" class="headerlink" title="坎贝拉距离（Canberra distance）"></a>坎贝拉距离（Canberra distance）</h3><p>Canberra distance是用来衡量两个向量空间的居间，1966年被提出，1977年被G. N. Lance和 W. T. Williams重新提出。是Manhattan distance的加权版本，Canberra distance已被用作比较排名列表和计算机安全中的入侵检测的测量。</p><p>$$\sum_{i = 1}^{n}\frac{|x_{i} - y_{i}|}{|x_{i}| + |y_{i}|}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>canberra<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.3333333333333333</code></pre><h3 id="切比雪夫距离（Chebyshev-distance）"><a href="#切比雪夫距离（Chebyshev-distance）" class="headerlink" title="切比雪夫距离（Chebyshev distance）"></a>切比雪夫距离（Chebyshev distance）</h3><p>切比雪夫距离（Chebyshev distance）是向量空间中的一种度量，二个点之间的距离定义是其各坐标数值差绝对值的最大值。以数学的观点来看，切比雪夫距离是由一致范数（uniform norm）（或称为上确界范数）所衍生的度量，也是超凸度量（injective metric space）的一种。计算公式为</p><p>$$max_{i}|x_{i} - y_{i}|$$</p><p>下图是国际象棋棋盘上所有位置距f6位置的切比雪夫距离</p><p><img src="chebyshev_distance.jpg" alt="切比雪夫距离"></p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>chebyshev<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5</code></pre><h3 id="曼哈顿距离（Manhattan／cityblock-distance）"><a href="#曼哈顿距离（Manhattan／cityblock-distance）" class="headerlink" title="曼哈顿距离（Manhattan／cityblock distance）"></a>曼哈顿距离（Manhattan／cityblock distance）</h3><p>曼哈顿距离（Manhattan Distance）是由十九世纪的赫尔曼·闵可夫斯基所创词汇，是种使用在几何度量空间的几何学用语，用以标明两个点在标准坐标系上的绝对轴距总和。曼哈顿距离的命名原因是从规划为方型建筑区块的城市（如曼哈顿）间，最短的行车路径而来（忽略曼哈顿的单向车道以及只存在于3、14大道的斜向车道）。任何往东三区块、往北六区块的的路径一定最少要走九区块，没有其他捷径。计算公式为：</p><p>$$\sum_{i}^{n}|x_{i} - y_{i}|$$</p><p>曼哈顿距离依赖坐标系统的转度，而非系统在坐标轴上的平移或映射。</p><p>如下图所示，红色表示曼哈顿距离，蓝色和黄色代表等价的曼哈顿距离。</p><p><img src="manhattan_distance.jpg" alt="曼哈顿距离"></p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>cityblock<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>10</code></pre><h3 id="相关系数距离（Correlation-distance）"><a href="#相关系数距离（Correlation-distance）" class="headerlink" title="相关系数距离（Correlation distance）"></a>相关系数距离（Correlation distance）</h3><p>相关系数距离是1与相关系数的差，相关系数的定义为</p><p>$$\frac{(X - \overline{X})(Y - \overline{Y})}<br>{||(X - \overline{X})||_{2}||(Y - \overline{Y})||_{2}}$$</p><p>常见的Pearson相关性系数即为</p><p>$$\rho(X, Y) = \frac{E[(X - \mu_{X})(Y - \mu_{Y})]}{\sigma_{X}\sigma_{Y}}<br>= \frac{E[(X - \mu_{X})(Y - \mu_{Y})]}{\sqrt{\sum_{i = 1}^{n}(X_{i} - \mu_{X})}\sqrt{\sum_{i = 1}^{n}(Y_{i} - \mu_{Y})}}$$</p><p>Pearson相关距离为</p><p>$$D_{X, Y} = 1 - \rho(X, Y)$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>correlation<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.1175024967072299</code></pre><h3 id="余弦相似度距离（Cosine-distance）"><a href="#余弦相似度距离（Cosine-distance）" class="headerlink" title="余弦相似度距离（Cosine distance）"></a>余弦相似度距离（Cosine distance）</h3><p>余弦相似性通过测量两个向量的夹角的余弦值来度量它们之间的相似性。0度角的余弦值是1，而其他任何角度的余弦值都不大于1；并且其最小值是-1。从而两个向量之间的角度的余弦值确定两个向量是否大致指向相同的方向。两个向量有相同的指向时，余弦相似度的值为1；两个向量夹角为90°时，余弦相似度的值为0；两个向量指向完全相反的方向时，余弦相似度的值为-1。这结果是与向量的长度无关的，仅仅与向量的指向方向相关。余弦相似度通常用于正空间，因此给出的值为0到1之间。</p><p>余弦相似度定义来自于欧几里得点积，点积定义如下</p><p>$$X \cdot Y = ||X||\space||Y||\space cos(\theta)$$</p><p>余弦相似度为</p><p>$$cos(\theta) = \frac{X \cdot Y}{||X||\space||Y||}$$</p><p>余弦相似度距离为1与余弦相似度的差</p><p>$$1 - \frac{X \cdot Y}{||X||_{2}\space||Y||_{2}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>cosine<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.1261737770471213</code></pre><h3 id="欧氏距离（Euclidean-distance）"><a href="#欧氏距离（Euclidean-distance）" class="headerlink" title="欧氏距离（Euclidean distance）"></a>欧氏距离（Euclidean distance）</h3><p>在数学中，欧几里得距离或欧几里得度量是欧几里得空间中两点间“普通”（即直线）距离。使用这个距离，欧氏空间成为度量空间。相关联的范数称为欧几里得范数。计算公式为</p><p>$$||X - Y||_{2}$$</p><p>二维空间中的欧氏距离</p><p>$$d = \sqrt{(x_{2} - x_{1})^{2} + (y_{2} - y_{1})^{2}}$$</p><p>三维空间中的欧式距离</p><p>$$d = \sqrt{(x_{2} - x_{1})^{2} + (y_{2} - y_{1})^{2} + (z_{2} - z_{1})^{2}}$$</p><p>n维空间中的欧式距离</p><p>$$d(X, Y) = \sqrt{\sum_{i = 1}^{n}(x_{i} - y_{i})^{2}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>euclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.4142135623730951</code></pre><h3 id="JS散度距离（Jensen-Shannon-distance）"><a href="#JS散度距离（Jensen-Shannon-distance）" class="headerlink" title="JS散度距离（Jensen-Shannon distance）"></a>JS散度距离（Jensen-Shannon distance）</h3><p>JS散度度量了两个概率分布的相似度，基于KL散度的变体，解决了KL散度非对称的问题。一般地，JS散度是对称的，其取值是0到1之间。定义如下：</p><p>$$JS(P_{1}||P_{2}) = \frac{1}{2}KL(P_{1}||\frac{P_{1} + P_{2}}{2}) = \frac{1}{2}KL(P_{2}||\frac{P_{1} + P_{2}}{2})$$</p><p>其中KL表示KL散度，KL散度又称为相对熵，信息散度，信息增益。KL散度是是两个概率分布P和Q差别的非对称性的度量。KL散度是用来度量使用基于Q的编码来编码来自P的样本平均所需的额外的位元数。典型情况下，P表示数据的真实分布，Q表示数据的理论分布，模型分布，或P的近似分布。计算公式为</p><p>$$KL(P||Q) = -\sum_{x \in X}P(x)log\frac{1}{P(x)} + \sum_{x \in X}P(x)log\frac{1}{Q(x)}<br>= \sum_{x \in X}P(x)log\frac{P(x)}{Q(x)}$$</p><p>因为对数函数是凸函数，所以KL散度的值为非负数。</p><p>有时会将KL散度称为KL距离，但它并不满足距离的性质：</p><ul><li>KL散度不是对称的</li><li>KL散度不满足三角不等式</li></ul><p>KL散度和JS散度度量的时候有一个问题：</p><p>如果两个分配P,Q离得很远，完全没有重叠的时候，那么KL散度值是没有意义的，而JS散度值是一个常数。这在学习算法中是比较致命的，这就意味这这一点的梯度为0。梯度消失了。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">from</span> scipy <span class="token keyword">import</span> stats <span class="token keyword">as</span> stsx <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span>y <span class="token operator">=</span> np<span class="token punctuation">.</span>asarray<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">JS_divergence</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    M <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> q<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span>    <span class="token keyword">return</span> <span class="token number">0.5</span> <span class="token operator">*</span> sts<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>p<span class="token punctuation">,</span> M<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">0.5</span> <span class="token operator">*</span> sts<span class="token punctuation">.</span>entropy<span class="token punctuation">(</span>q<span class="token punctuation">,</span> M<span class="token punctuation">)</span>dis <span class="token operator">=</span> JS_divergence<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.009225640794865278</code></pre><h3 id="马氏距离（Mahalanobis-distance）"><a href="#马氏距离（Mahalanobis-distance）" class="headerlink" title="马氏距离（Mahalanobis distance）"></a>马氏距离（Mahalanobis distance）</h3><p>协方差矩阵记为$S$，则马式距离为</p><p>$$\sqrt{(X - Y)S^{-1}(X - Y)^T}$$</p><p>若协方差矩阵是单位矩阵（各个样本向量之间独立同分布）,则公式就成了</p><p>$$\sqrt{(X - Y)(X - Y)^T}$$</p><p>也就是欧氏距离了，若协方差矩阵是对角矩阵，公式变成了标准化欧氏距离。</p><pre class="line-numbers language-python"><code class="language-python">M <span class="token operator">=</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> y<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">2</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">iv <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>mahalanobis<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> iv<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.7320508075688772</code></pre><h3 id="闵可夫斯基距离（Minkowski-distance）"><a href="#闵可夫斯基距离（Minkowski-distance）" class="headerlink" title="闵可夫斯基距离（Minkowski distance）"></a>闵可夫斯基距离（Minkowski distance）</h3><p>闵氏距离不是一种距离，而是一组距离的定义，将以下形式的距离都定义为Minkowski distance。</p><p>$$||X - Y||_{p} = (\sum_{i = 1}^{n}|x_{i} - y_{i}|^{p})^{\frac{1}{p}}$$</p><p>或</p><p>$$(\sum_{i = 1}^{n}w_{i}|x_{i} - y_{i}|^{p})^{\frac{1}{p}}$$</p><p>当$p=1$时，就是曼哈顿距离<br>当$p=2$时，就是欧氏距离<br>当$p \to \infty$时，就是切比雪夫距离</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>minkowski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.23606797749979</code></pre><h3 id="标准欧式距离（standardized-Euclidean-distance）"><a href="#标准欧式距离（standardized-Euclidean-distance）" class="headerlink" title="标准欧式距离（standardized Euclidean distance）"></a>标准欧式距离（standardized Euclidean distance）</h3><p>标准化欧氏距离是针对简单欧氏距离的缺点（量纲差异）而作的一种改进方案，标准化方法为</p><p>$$X_{*} = \frac{X - \mu}{s}$$</p><p>变换后标准欧式距离为</p><p>$$\sqrt{\sum_{i = 1}^{n}(\frac{X_{i} - Y_{i}}{s_{i}})^{2}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>s <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">,</span> <span class="token number">0.1</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>seuclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4.47213595499958</code></pre><h3 id="平方欧式距离（squared-Euclidean-distance）"><a href="#平方欧式距离（squared-Euclidean-distance）" class="headerlink" title="平方欧式距离（squared Euclidean distance）"></a>平方欧式距离（squared Euclidean distance）</h3><p>平方欧式距离是简单欧式距离每一项的平方，公式如下</p><p>$$||X - Y||_{2}^{2} = \sum_{i = 1}^{n}w_{i}|x_{i} - y_{i}|^{2}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sqeuclidean<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.0</code></pre><h3 id="加权闵可夫斯基距离（Minkowski-distance）"><a href="#加权闵可夫斯基距离（Minkowski-distance）" class="headerlink" title="加权闵可夫斯基距离（Minkowski distance）"></a>加权闵可夫斯基距离（Minkowski distance）</h3><p>$$(\sum_{i = 1}^{n}|w_{i}(x_{i} - y_{i})|^{p})^{\frac{1}{p}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>wminkowski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.4142135623730951</code></pre><h3 id="搬土距离（Earth-Mover-distance）"><a href="#搬土距离（Earth-Mover-distance）" class="headerlink" title="搬土距离（Earth Mover distance）"></a>搬土距离（Earth Mover distance）</h3><p>Earth Mover distance，是基于运输问题的效率提出的一种直方图相似度量。它是归一化的从一个分布变为另一个分布的最小代价, 可以用来测量两个分布(multi-dimensional distributions)之间的距离。EMD运算复杂度较高，平均而言至少是二次方级别。但是它作为距离函数，有一个非常好的特点是存在下界，两个分布的质心之间的距离，因此在粗略计算时，可以考虑用分布质心之间的距离代替EMD。</p><p>$$\frac{\sum_{i = 1}^{M}\sum_{j = 1}^{N}d_{ij}f_{ij}}{\sum_{i = 1}^{M}\sum_{j = 1}^{N}f_{ij}}$$</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> scipy<span class="token punctuation">.</span>stats <span class="token keyword">import</span> wasserstein_distancex <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.4</span><span class="token punctuation">,</span> <span class="token number">3.9</span><span class="token punctuation">,</span> <span class="token number">7.5</span><span class="token punctuation">,</span> <span class="token number">7.8</span><span class="token punctuation">]</span>x_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1.4</span><span class="token punctuation">,</span> <span class="token number">0.9</span><span class="token punctuation">,</span> <span class="token number">3.1</span><span class="token punctuation">,</span> <span class="token number">7.2</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">4.5</span><span class="token punctuation">,</span> <span class="token number">1.4</span><span class="token punctuation">]</span>y_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3.2</span><span class="token punctuation">,</span> <span class="token number">3.5</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x_w<span class="token punctuation">,</span> y_w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.7</code></pre><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span>x_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">10.0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.0</span><span class="token punctuation">]</span>y_w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2.0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x_w<span class="token punctuation">,</span> y_w<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.0</code></pre><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.5</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">,</span> <span class="token number">0.007009673349221927</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.1480135071948422</span><span class="token punctuation">,</span> <span class="token number">2.7785622593068027</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0.28901734104046245</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0.02111525564774837</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">3.3881989165193145e-06</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0.8</span><span class="token punctuation">,</span> <span class="token number">6.859405279689656</span><span class="token punctuation">,</span> <span class="token number">0.0037439161362785474</span><span class="token punctuation">,</span> <span class="token number">4020.4096644631295</span><span class="token punctuation">,</span> <span class="token number">0.005439330543933054</span><span class="token punctuation">,</span> <span class="token number">0.08928571428571429</span><span class="token punctuation">,</span> <span class="token number">0.04654587589796659</span><span class="token punctuation">,</span> <span class="token number">128609.0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">0.7678571428571429</span><span class="token punctuation">,</span> <span class="token number">0.03798619846624095</span><span class="token punctuation">,</span> <span class="token number">0.24815204448802128</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.017954805269944772</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">358.62096982747676</span><span class="token punctuation">,</span> <span class="token number">13.421226391252906</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">0.017857142857142856</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">8.571428571428571</span><span class="token punctuation">,</span> <span class="token number">0.1179245283018868</span><span class="token punctuation">,</span> <span class="token number">0.028545153041402063</span><span class="token punctuation">,</span> <span class="token number">0.06847760995576437</span><span class="token punctuation">,</span> <span class="token number">0.5714285714285714</span><span class="token punctuation">,</span> <span class="token number">0.0</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">358.62096982747676</span><span class="token punctuation">,</span> <span class="token number">64.26004935863212</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1.2244897959183674</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">wasserstein_distance<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre><code>2.7</code></pre><h2 id="布尔向量距离"><a href="#布尔向量距离" class="headerlink" title="布尔向量距离"></a>布尔向量距离</h2><h3 id="Dice系数（Dice-dissimilarity）"><a href="#Dice系数（Dice-dissimilarity）" class="headerlink" title="Dice系数（Dice dissimilarity）"></a>Dice系数（Dice dissimilarity）</h3><p>Dice系数是一种集合相似度度量函数，通常用于计算两个样本的相似度</p><p>$$\frac{2|X \bigcap Y|}{|X| + |Y|}$$</p><p>Dice距离为</p><p>$$1 - \frac{2|X \bigcap Y|}{|X| + |Y|} = \frac{C_{TF} + C_{FT}}{2C_{TT} + C_{TF} + C_{FT}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>dice<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="汉明距离（Hamming-distance）"><a href="#汉明距离（Hamming-distance）" class="headerlink" title="汉明距离（Hamming distance）"></a>汉明距离（Hamming distance）</h3><p>两个等长字符串s1与s2之间的汉明距离定义为将其中一个变为另外一个所需要作的最小替换次数。</p><p>$$\frac{C_{01} - C_{10}}{n}$$</p><p>例如字符串’1111’与’1001’之间的汉明距离为2。（汉明距离也可计算离散的数值向量）</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>hamming<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.6666666666666666</code></pre><h3 id="杰卡德差异（Jaccard-Needham-dissimilarity）"><a href="#杰卡德差异（Jaccard-Needham-dissimilarity）" class="headerlink" title="杰卡德差异（Jaccard-Needham dissimilarity）"></a>杰卡德差异（Jaccard-Needham dissimilarity）</h3><p>两个集合A和B的交集元素在A，B的并集中所占的比例，称为两个集合的杰卡德相似系数。</p><p>$$\frac{|X \bigcap Y|}{|X \bigcup Y|}$$</p><p>杰卡德距离为</p><p>$$1 - \frac{|X \bigcap Y|}{|X \bigcup Y|} = \frac{C_{TF} + C_{FT}}{C_{TT} + C_{TF} + C_{FT}}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>jaccard<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="库尔辛斯基差异（Kulsinski-dissimilarity）"><a href="#库尔辛斯基差异（Kulsinski-dissimilarity）" class="headerlink" title="库尔辛斯基差异（Kulsinski dissimilarity）"></a>库尔辛斯基差异（Kulsinski dissimilarity）</h3><p>$$\frac{C_{TF} + C_{FT} - C_{TT} + n}{C_{TF} + C_{FT} + n}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>kulsinski<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="田本罗杰斯差异（Rogers-Tanimoto-dissimilarity）"><a href="#田本罗杰斯差异（Rogers-Tanimoto-dissimilarity）" class="headerlink" title="田本罗杰斯差异（Rogers-Tanimoto dissimilarity）"></a>田本罗杰斯差异（Rogers-Tanimoto dissimilarity）</h3><p>$$\frac{R}{C_{TT} + C_{FF} + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>rogerstanimoto<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.8</code></pre><h3 id="拉塞尔差异（Russell-Rao-dissimilarity）"><a href="#拉塞尔差异（Russell-Rao-dissimilarity）" class="headerlink" title="拉塞尔差异（Russell-Rao dissimilarity）"></a>拉塞尔差异（Russell-Rao dissimilarity）</h3><p>$$\frac{n - C_{TT}}{n}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>russellrao<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="索卡尔米切纳差异（Sokal-Michener-dissimilarity）"><a href="#索卡尔米切纳差异（Sokal-Michener-dissimilarity）" class="headerlink" title="索卡尔米切纳差异（Sokal-Michener dissimilarity）"></a>索卡尔米切纳差异（Sokal-Michener dissimilarity）</h3><p>$$\frac{R}{S + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$<br>$$S = C_{FF} + C_{TT}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sokalmichener<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0.8</code></pre><h3 id="索卡尔雪差异（Sokal-Sneath-dissimilarity）"><a href="#索卡尔雪差异（Sokal-Sneath-dissimilarity）" class="headerlink" title="索卡尔雪差异（Sokal-Sneath dissimilarity）"></a>索卡尔雪差异（Sokal-Sneath dissimilarity）</h3><p>$$\frac{R}{C_{TT} + R}$$</p><p>其中</p><p>$$R = 2(C_{TF} + C_{FT})$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>sokalsneath<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>1.0</code></pre><h3 id="Yule差异（Yule-dissimilarity）"><a href="#Yule差异（Yule-dissimilarity）" class="headerlink" title="Yule差异（Yule dissimilarity）"></a>Yule差异（Yule dissimilarity）</h3><p>$$\frac{R}{C_{TT} * C_{FF} + \frac{R}{2}}$$</p><p>其中</p><p>$$R = 2 * C_{TF} * C_{FT}$$</p><pre class="line-numbers language-python"><code class="language-python">x <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>y <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>dis <span class="token operator">=</span> distance<span class="token punctuation">.</span>yule<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dis<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>2.0</code></pre><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
            <tag> 距离算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CV2图像处理</title>
      <link href="2020/10/31/cv2-tu-xiang-chu-li/"/>
      <url>2020/10/31/cv2-tu-xiang-chu-li/</url>
      
        <content type="html"><![CDATA[<p>以下所有代码在mac python3下测试通过。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding:utf-8 -*-</span><span class="token keyword">from</span> __future__ <span class="token keyword">import</span> division<span class="token keyword">from</span> __future__ <span class="token keyword">import</span> print_function<span class="token operator">%</span>matplotlib inline<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 本文中主要使用cv2处理图片，但不利于在notebook中展示，所以使用plt输出前做简单处理</span><span class="token keyword">def</span> <span class="token function">img_convert</span><span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    cv2使用BGR，plt使用RGB    包含灰度，3通道，4通道    下面这个不好使    ret_img = cv2.cvtColor(ret_img, cv2.COLOR_BGR2RGB)    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cv2_img    <span class="token keyword">elif</span> len<span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>        b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span>        <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> len<span class="token punctuation">(</span>cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">3</span> <span class="token operator">and</span> cv2_img<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>        b<span class="token punctuation">,</span> g<span class="token punctuation">,</span> r<span class="token punctuation">,</span> a <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>cv2_img<span class="token punctuation">)</span>        <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> cv2_img<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="阈值"><a href="#阈值" class="headerlink" title="阈值"></a>阈值</h2><h3 id="threshold-简单阈值"><a href="#threshold-简单阈值" class="headerlink" title="threshold 简单阈值"></a>threshold 简单阈值</h3><h4 id="介绍"><a href="#介绍" class="headerlink" title="介绍"></a>介绍</h4><p>顾名思义，通过阈值处理，大于为1，小于则为0，使用函数cv2.threshold()。参数解释如下：</p><p>ret, dst = cv2.threshold (src, thresh, maxval, type)</p><ul><li>src：源图片，必须是单通道</li><li>dst：输出图</li><li>thresh：阈值，取值范围0～255</li><li>maxval：填充色，取值范围0～255</li><li>type：阈值类型，具体见下表</li></ul><table><thead><tr><th>阈值</th><th>小于阈值的像素点</th><th>大于阈值的像素点</th></tr></thead><tbody><tr><td>0</td><td>置0</td><td>置填充色</td></tr><tr><td>1</td><td>置填充色</td><td>置0</td></tr><tr><td>2</td><td>保持原色</td><td>置灰色</td></tr><tr><td>3</td><td>置0</td><td>保持原色</td></tr><tr><td>4</td><td>保持原色</td><td>置0</td></tr></tbody></table><p>type还可以写为如下：</p><p>type：二值化操作的类型，包含以下5种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV； cv2.THRESH_TRUNC； cv2.THRESH_TOZERO；cv2.THRESH_TOZERO_INV</p><h4 id="实现"><a href="#实现" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> numpy <span class="token keyword">as</span> np<span class="token keyword">import</span> cv2<span class="token keyword">import</span> matplotlib<span class="token punctuation">.</span>pyplot <span class="token keyword">as</span> plt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">ori_img <span class="token operator">=</span> cv2<span class="token punctuation">.</span>imread<span class="token punctuation">(</span><span class="token string">'../Fast_neural_style/img_d2cfac63.jpeg'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 现转化为单通道图</span>img_gray <span class="token operator">=</span> cv2<span class="token punctuation">.</span>cvtColor<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>COLOR_RGB2GRAY<span class="token punctuation">)</span>imgs <span class="token operator">=</span> <span class="token punctuation">[</span>ori_img<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>img_gray<span class="token punctuation">]</span>title <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">'ori_img'</span><span class="token punctuation">,</span> <span class="token string">'img_gray'</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 简单阈值处理</span><span class="token keyword">for</span> typ <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    _<span class="token punctuation">,</span> thresh <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> type<span class="token operator">=</span>typ<span class="token punctuation">)</span>    title<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'type_'</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>typ<span class="token punctuation">)</span><span class="token punctuation">)</span>    imgs <span class="token operator">=</span> imgs <span class="token operator">+</span> <span class="token punctuation">[</span>thresh<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可视化</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_7_0.png" alt="threshold"></p><h3 id="adaptiveThreshold-自适应阈值"><a href="#adaptiveThreshold-自适应阈值" class="headerlink" title="adaptiveThreshold 自适应阈值"></a>adaptiveThreshold 自适应阈值</h3><h4 id="介绍-1"><a href="#介绍-1" class="headerlink" title="介绍"></a>介绍</h4><p>简单阈值对图片对处理过于简单粗暴，特别是对对色彩复杂图片，处理后很多细节都无法复现。自适应阈值则根据图像上的每个小区域计算与其对应的阈值，不同区域采用不同阈值。可使用cv2.adaptiveThreshold()实现。参数解释如下：</p><p>dst = cv2.adaptiveThreshold(src, maxval, thresh_type, type, Block Size, C)</p><ul><li>src：源图片，只能输入单通道图像</li><li>dst： 输出图</li><li>maxval： 当像素值超过了阈值（或者小于阈值，根据type来决定），所赋予的值</li><li>thresh_type： 阈值的计算方法，包含以下2种类型：cv2.ADAPTIVE_THRESH_MEAN_C，阈值即取相邻领域的平均值； cv2.ADAPTIVE_THRESH_GAUSSIAN_C，阈值同样取自相邻领域，只是不再是平均值，而是加权平均，权重为一个高斯窗口</li><li>type：二值化操作的类型，与固定阈值函数相同，包含以下2种类型： cv2.THRESH_BINARY； cv2.THRESH_BINARY_INV“</li><li>Block Size： 图片中分块的大小</li><li>C ：阈值计算方法中的常数项</li></ul><h4 id="实现-1"><a href="#实现-1" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">ret<span class="token punctuation">,</span> th1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>th2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_MEAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">)</span>th3 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_GAUSSIAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY_INV<span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th1<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'th_binary'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">223</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th2<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">224</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th3<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gauss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_10_0.png" alt="adaptiveThreshold"></p><p>改变Block Size和c能得到不同的图片处理结果，以GAUSSIAN为例。</p><pre class="line-numbers language-python"><code class="language-python">imgs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>title <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 简单阈值处理</span><span class="token keyword">for</span> block <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        th <span class="token operator">=</span> cv2<span class="token punctuation">.</span>adaptiveThreshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>ADAPTIVE_THRESH_GAUSSIAN_C<span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">,</span> block<span class="token punctuation">,</span> c<span class="token punctuation">)</span>        title<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'GAUSSIAN: block = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>block<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">', c = '</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        imgs <span class="token operator">=</span> imgs <span class="token operator">+</span> <span class="token punctuation">[</span>th<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 可视化</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> i<span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>imgs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'gray'</span><span class="token punctuation">)</span>    plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span>title<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_12_0.png" alt="png"></p><h3 id="Otsu’s-Binarization-基于直方图"><a href="#Otsu’s-Binarization-基于直方图" class="headerlink" title="Otsu’s Binarization 基于直方图"></a>Otsu’s Binarization 基于直方图</h3><h4 id="Otsu过程"><a href="#Otsu过程" class="headerlink" title="Otsu过程"></a>Otsu过程</h4><ol><li>计算图像直方图</li></ol><ul><li>设定一阈值，把直方图强度大于阈值的像素分成一组，把小于阈值的像素分成另外一组</li><li>分别计算两组内的偏移数，并把偏移数相加</li><li>把0~255依照顺序多为阈值，重复1-3的步骤，直到得到最小偏移数，其所对应的值即为结果阈值</li></ul><h4 id="Otsu数学原理"><a href="#Otsu数学原理" class="headerlink" title="Otsu数学原理"></a>Otsu数学原理</h4><p>Otsu的算法类似于聚类，针对的是双峰图，所以目的就是要找到一个阈值t，将这两峰分开，同时使得峰内的方差最小，这样便可以将两峰最大化的分开。判别过程中最大类间方差，主要函数如下：</p><p>$$w_{0} + w_{1} = 1$$<br>$$\mu = w_{0}\mu_{0} + w_{1}\mu_{1}$$</p><p>$$<br>\begin{align}<br>var &amp; = w_{0} * (\mu_{0} - \mu)^{2} + w_{1} * (\mu_{1} - \mu)^{2} \<br> &amp; = w_{0}w_{1}(\mu_{0} - \mu_{1})^{2}<br>\end{align}<br>$$</p><p>源论文：<a href="https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4310076">https://ieeexplore.ieee.org/stamp/stamp.jsp?tp=&amp;arnumber=4310076</a> </p><h4 id="实现-2"><a href="#实现-2" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">ret1<span class="token punctuation">,</span> th1 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY<span class="token punctuation">)</span>ret2<span class="token punctuation">,</span> th2 <span class="token operator">=</span> cv2<span class="token punctuation">.</span>threshold<span class="token punctuation">(</span>img_gray<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">255</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>THRESH_BINARY <span class="token operator">+</span> cv2<span class="token punctuation">.</span>THRESH_OTSU<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">131</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">132</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th1<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'threshold'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">133</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>th2<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'Otsu'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_15_0.png" alt="Otsu’s Binarization"></p><h2 id="噪声"><a href="#噪声" class="headerlink" title="噪声"></a>噪声</h2><h3 id="椒盐噪声"><a href="#椒盐噪声" class="headerlink" title="椒盐噪声"></a>椒盐噪声</h3><h4 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h4><p>椒盐噪声也称为脉冲噪声，是图像中经常见到的一种噪声，它是一种随机出现的白点或者黑点，可能是亮的区域有黑色像素或是在暗的区域有白色像素（或是两者皆有）。</p><p>椒盐噪声包含两种噪声，一种是盐噪声（salt noise），另一种是胡椒噪声（pepper noise）。 盐=白色，椒=黑色</p><p>常用的去除这种噪声的有效手段是使用中值滤波器。</p><h4 id="实现-3"><a href="#实现-3" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> random<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">sp_noise</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> prob<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''    添加椒盐噪声     prob:噪声比例     '''</span>    output <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">,</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span>    thres <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">-</span> prob     <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            rdn <span class="token operator">=</span> random<span class="token punctuation">.</span>random<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> rdn <span class="token operator">&lt;</span> prob<span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">elif</span> rdn <span class="token operator">></span> thres<span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">255</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                output<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> image<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> output<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">out_img <span class="token operator">=</span> sp_noise<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sp_noise'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_19_0.png" alt="椒盐噪声"></p><h3 id="高斯噪声"><a href="#高斯噪声" class="headerlink" title="高斯噪声"></a>高斯噪声</h3><h4 id="简介-1"><a href="#简介-1" class="headerlink" title="简介"></a>简介</h4><p>椒盐噪声是直接随机的增加白点和黑点，高斯噪声则不然，它是指概率密度函数服从高斯分布（即正态分布）的一类噪声。和椒盐噪声最大的区别就为：</p><ul><li>椒盐噪声使用random.random，高斯噪声使用random.normal</li><li>椒盐噪声直接置0、255，高斯噪声做加操作</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">gasuss_noise</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> mean<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span> var<span class="token operator">=</span><span class="token number">0.001</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">'''         添加高斯噪声        mean : 均值         var : 方差    '''</span>    image <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span>image<span class="token operator">/</span><span class="token number">255</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span>float<span class="token punctuation">)</span>    noise <span class="token operator">=</span> np<span class="token punctuation">.</span>random<span class="token punctuation">.</span>normal<span class="token punctuation">(</span>mean<span class="token punctuation">,</span> var <span class="token operator">**</span> <span class="token number">0.5</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    out <span class="token operator">=</span> image <span class="token operator">+</span> noise    <span class="token keyword">if</span> out<span class="token punctuation">.</span>min<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">:</span>        low_clip <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">.</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        low_clip <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">.</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>clip<span class="token punctuation">(</span>out<span class="token punctuation">,</span> low_clip<span class="token punctuation">,</span> <span class="token number">1.0</span><span class="token punctuation">)</span>    out <span class="token operator">=</span> np<span class="token punctuation">.</span>uint8<span class="token punctuation">(</span>out<span class="token operator">*</span><span class="token number">255</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">#cv.imshow("gasuss", out)</span>    <span class="token keyword">return</span> out<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python">out_img <span class="token operator">=</span> gasuss_noise<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">0.02</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gasuss_noise'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_22_0.png" alt="高斯噪声"></p><h2 id="滤波-平滑"><a href="#滤波-平滑" class="headerlink" title="滤波/平滑"></a>滤波/平滑</h2><h3 id="2D卷积"><a href="#2D卷积" class="headerlink" title="2D卷积"></a>2D卷积</h3><h4 id="简介-2"><a href="#简介-2" class="headerlink" title="简介"></a>简介</h4><p>2D卷积，即使用一个指定打下的卷积核对源图进行自定义处理，cv2.filter2D()函数供我们进行2D卷积。</p><p>dst=cv.filter2D(src, ddepth, kernel, anchor, delta, borderType)</p><ul><li>src：原图像</li><li>dst：目标图像，与原图像尺寸和通过数相同</li><li>ddepth：目标图像的所需深度</li><li>kernel：卷积核（或相当于相关核），单通道浮点矩阵;如果要将不同的内核应用于不同的通道，请使用拆分将图像拆分为单独的颜色平面，然后单独处理它们。</li><li>anchor：内核的锚点，指示内核中过滤点的相对位置;锚应位于内核中;默认值（-1，-1）表示锚位于内核中心。</li><li>detal：在将它们存储在dst中之前，将可选值添加到已过滤的像素中。类似于偏置。</li><li>borderType：像素外推法，参见BorderTypes</li></ul><p>参考：<a href="https://www.kancloud.cn/aollo/aolloopencv/269599">https://www.kancloud.cn/aollo/aolloopencv/269599</a></p><h4 id="实现-4"><a href="#实现-4" class="headerlink" title="实现"></a>实现</h4><h4 id="卷积核定义"><a href="#卷积核定义" class="headerlink" title="卷积核定义"></a>卷积核定义</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 分身（identity）就是不考虑边界时的原图（不考虑边界时</span>kernel0 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 单位核</span>kernel1 <span class="token operator">=</span> np<span class="token punctuation">.</span>ones<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> np<span class="token punctuation">.</span>float32<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">9</span><span class="token comment" spellcheck="true"># 模糊（blur）内核消除了相邻像素值之间的差异</span>kernel2 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0.0625</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.25</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0.0625</span><span class="token punctuation">,</span> <span class="token number">0.125</span><span class="token punctuation">,</span> <span class="token number">0.0625</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 索贝尔（sobel）内核用于仅显示特定方向上相邻像素值的差异，</span><span class="token comment" spellcheck="true"># 分为left sobel、right sobel（检测梯度的水平变化）、top sobel、buttom sobel（检测梯度的垂直变化）</span>kernel3 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 浮雕（emboss）通过强调像素的差在给定方向的Givens深度的错觉。在这种情况下，沿着从左上到右下的直线的方向。</span>kernel4 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 大纲（outline）是一个轮廓内核（也称为“边缘”的内核）用于突出显示的像素值大的差异。</span><span class="token comment" spellcheck="true"># 具有接近相同强度的相邻像素旁边的像素在新图像中将显示为黑色，而与强烈不同的相邻像素相邻的像素将显示为白色。</span>kernel5 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 锐化（sharpen）内核强调在相邻的像素值的差异。这使图像看起来更生动。</span>kernel6 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 拉普拉斯算子（laplacian operator）可以用于边缘检测，对于检测图像中的模糊也非常有用。</span>kernel7 <span class="token operator">=</span> np<span class="token punctuation">.</span>array<span class="token punctuation">(</span><span class="token punctuation">(</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>    <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token string">"float32"</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">331</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">332</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel0<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'identity'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">333</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'ones'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">334</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'blur'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">335</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sobel'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">336</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel4<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'emboss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">337</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'outline'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">338</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'sharpen'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">339</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>cv2<span class="token punctuation">.</span>filter2D<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> kernel7<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'laplacian'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_26_0.png" alt="2D卷积"></p><h3 id="平均滤波"><a href="#平均滤波" class="headerlink" title="平均滤波"></a>平均滤波</h3><h4 id="简介-3"><a href="#简介-3" class="headerlink" title="简介"></a>简介</h4><p>平均滤波使用归一化卷积核完成，即卷积核的所有元素和为1。主要思想为将卷积核覆盖的所有像素求平均值，并将这个值作为结果赋给中心像素。也可以使用filter2D完成，不过cv2提供了直接的函数。可以使用cv2.blur()或cv2.boxFilter() 实现。如果不想使用归一化卷积核，那么应该用后者，并且设置参数normalize = False</p><h4 id="实现-5"><a href="#实现-5" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>blur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'dst'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_28_0.png" alt="平均滤波"></p><h3 id="高斯滤波"><a href="#高斯滤波" class="headerlink" title="高斯滤波"></a>高斯滤波</h3><h4 id="简介-4"><a href="#简介-4" class="headerlink" title="简介"></a>简介</h4><p>其原理与平均滤波相同，不同的是此处变成了加权平均，而这个权服从二维高斯分布。方框中心的值最大，其余方框根据距离中心元素的距离递减，构成一个高斯小山包，原来的求平均数变成求加权平均数，权就是方框里的值。实现的函数是cv2.GaussianBlur()。需要指定高斯核的宽和高（必须是奇数），以及高斯函数沿X,Y方向的标准差。</p><h4 id="实现-6"><a href="#实现-6" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>GaussianBlur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'gauss'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_30_0.png" alt="高斯滤波"></p><h3 id="中值滤波"><a href="#中值滤波" class="headerlink" title="中值滤波"></a>中值滤波</h3><h4 id="简介-5"><a href="#简介-5" class="headerlink" title="简介"></a>简介</h4><p>用与卷积框对应像素的中值来替代中心像素的值，这个滤波器经常用来去除椒盐噪声。前面的滤波器都是用计算得到的一个新值来取代中心像素的值，而中值滤波是用中心像素周围或者本身的值来取代他，他能有效去除噪声。卷积核的大小为是一个奇数。</p><h4 id="实现-7"><a href="#实现-7" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>medianBlur<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'median'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_32_0.png" alt="中值滤波"></p><h3 id="双边滤波"><a href="#双边滤波" class="headerlink" title="双边滤波"></a>双边滤波</h3><h4 id="简介-6"><a href="#简介-6" class="headerlink" title="简介"></a>简介</h4><p>高斯滤波器只考虑像素之间的空间关系，而不会考虑像素值之间的关系（像素的相似度），所以这种方法不会考虑一个像素是否位于边界，因此边界也会被模糊掉。<br>双边滤波在同时使用空间高斯权重和灰度值相似性高斯权重。空间高斯函数确保只有邻近区的像素对中心点有影响，灰度值相似性高斯函数确保只有与中心像素灰度值相近的才会被用来做模糊运算，边界处的灰度值变化比较大，所以能保证边界不会被模糊。函数cv2.bilateralFilter()能在保持边界清晰的情况下有效的去除噪音，但比较慢。</p><h4 id="实现-8"><a href="#实现-8" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python">dst <span class="token operator">=</span> cv2<span class="token punctuation">.</span>bilateralFilter<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">121</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">122</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>dst<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'bilateral'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_34_0.png" alt="双边滤波"></p><h3 id="算术均值滤波"><a href="#算术均值滤波" class="headerlink" title="算术均值滤波"></a>算术均值滤波</h3><h4 id="介绍-2"><a href="#介绍-2" class="headerlink" title="介绍"></a>介绍</h4><p>顾名思义，算术均值滤波器即求某一范围内图像的均值，代替范围中心点的值。算术平均数计算如下：</p><p>$$A = \frac{x_{1} + x_{2} + \cdots + x_{n}}{n}$$</p><h4 id="实现-9"><a href="#实现-9" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">arithmetic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_arithmetic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> arithmetic_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_arithmetic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'arithmetic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_36_0.png" alt="算术均值滤波"></p><h3 id="几何均值滤波"><a href="#几何均值滤波" class="headerlink" title="几何均值滤波"></a>几何均值滤波</h3><h4 id="介绍-3"><a href="#介绍-3" class="headerlink" title="介绍"></a>介绍</h4><p>和算术均值滤波不同的是，此处取某一选定区域内的几何均值，几何均值计算如下：</p><p>$$A = \sqrt[n]{x_{1} * x_{2} * \cdots * x_{n}}$$</p><h4 id="实现-10"><a href="#实现-10" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">geometric_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    p <span class="token operator">=</span> np<span class="token punctuation">.</span>prod<span class="token punctuation">(</span>roi<span class="token punctuation">)</span>    <span class="token keyword">return</span> p <span class="token operator">**</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">/</span> <span class="token punctuation">(</span>roi<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> roi<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">geometric_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> geometric_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_geometric_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span>g<span class="token punctuation">,</span>b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> geometric_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_geometric_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'geometric_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_38_0.png" alt="几何均值滤波"></p><h3 id="谐波均值"><a href="#谐波均值" class="headerlink" title="谐波均值"></a>谐波均值</h3><h4 id="介绍-4"><a href="#介绍-4" class="headerlink" title="介绍"></a>介绍</h4><p>即调和均值，计算如下：</p><p>$$H = \frac{n}{\frac{1}{x_{1}} + \frac{1}{x_{2}} + \cdots + \frac{1}{x_{n}}}$$</p><p>注意：$x$不能为0</p><h4 id="实现-11"><a href="#实现-11" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> scipy<span class="token keyword">import</span> scipy<span class="token punctuation">.</span>stats<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">harmonic_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token number">0</span> <span class="token keyword">in</span> roi<span class="token punctuation">:</span>        roi <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        roi <span class="token operator">=</span> scipy<span class="token punctuation">.</span>stats<span class="token punctuation">.</span>hmean<span class="token punctuation">(</span>roi<span class="token punctuation">.</span>reshape<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> roi<span class="token keyword">def</span> <span class="token function">harmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> harmonic_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_harmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    g <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    b <span class="token operator">=</span> harmonic_mean<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_harmonic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'harmonic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_41_0.png" alt="谐波均值"></p><h3 id="逆谐波均值"><a href="#逆谐波均值" class="headerlink" title="逆谐波均值"></a>逆谐波均值</h3><h4 id="介绍-5"><a href="#介绍-5" class="headerlink" title="介绍"></a>介绍</h4><p>计算公式为：</p><p>$$f(x, y) = \frac{\sum_{(x, t) \in S_{xy}}g(s, t)^{Q + 1}}{\sum_{(x, t) \in S_{xy}}g(s, t)^{Q}}$$</p><ul><li>当Q是正值时滤波对去除“胡椒”噪声有效</li><li>当Q是负值时滤波对去除“盐”噪声有效</li></ul><h4 id="实现-12"><a href="#实现-12" class="headerlink" title="实现"></a>实现</h4><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">iharmonic_mean_operator</span><span class="token punctuation">(</span>roi<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    roi <span class="token operator">=</span> roi<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>float64<span class="token punctuation">)</span>    <span class="token keyword">return</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>mean<span class="token punctuation">(</span><span class="token punctuation">(</span>roi<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">iharmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    new_image <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span>image<span class="token punctuation">.</span>shape<span class="token punctuation">)</span>    image <span class="token operator">=</span> cv2<span class="token punctuation">.</span>copyMakeBorder<span class="token punctuation">(</span>image<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> cv2<span class="token punctuation">.</span>BORDER_DEFAULT<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> image<span class="token punctuation">.</span>shape<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            new_image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> iharmonic_mean_operator<span class="token punctuation">(</span>image<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">,</span> j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span> j <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>    new_image <span class="token operator">=</span> <span class="token punctuation">(</span>new_image <span class="token operator">-</span> np<span class="token punctuation">.</span>min<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">255</span> <span class="token operator">/</span> np<span class="token punctuation">.</span>max<span class="token punctuation">(</span>image<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> new_image<span class="token punctuation">.</span>astype<span class="token punctuation">(</span>np<span class="token punctuation">.</span>uint8<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">rgb_iharmonic_mean</span><span class="token punctuation">(</span>image<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token punctuation">:</span>    r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b <span class="token operator">=</span> cv2<span class="token punctuation">.</span>split<span class="token punctuation">(</span>image<span class="token punctuation">)</span>    r <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>r<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    g <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>g<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    b <span class="token operator">=</span> iharmonic_mean<span class="token punctuation">(</span>b<span class="token punctuation">,</span> q<span class="token punctuation">)</span>    <span class="token keyword">return</span> cv2<span class="token punctuation">.</span>merge<span class="token punctuation">(</span><span class="token punctuation">[</span>r<span class="token punctuation">,</span> g<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>out_img <span class="token operator">=</span> rgb_iharmonic_mean<span class="token punctuation">(</span>ori_img<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>figure<span class="token punctuation">(</span>figsize<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">221</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>ori_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'original_img'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>subplot<span class="token punctuation">(</span><span class="token number">222</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>imshow<span class="token punctuation">(</span>img_convert<span class="token punctuation">(</span>out_img<span class="token punctuation">)</span><span class="token punctuation">,</span> cmap<span class="token operator">=</span><span class="token string">'gray'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> plt<span class="token punctuation">.</span>title<span class="token punctuation">(</span><span class="token string">'iharmonic_mean'</span><span class="token punctuation">)</span>plt<span class="token punctuation">.</span>show<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="output_43_0.png" alt="逆谐波均值"></p><h2 id="简单总结"><a href="#简单总结" class="headerlink" title="简单总结"></a>简单总结</h2><p>阈值方法可以对图片像素进行分类处理，噪声可以对原图片进行干扰，滤波和平滑可以对经过加噪声干扰过的图片进行部分修复复原。</p><p>end~</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片视觉 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>人工神经网络</title>
      <link href="2020/10/31/ren-gong-shen-jing-wang-luo/"/>
      <url>2020/10/31/ren-gong-shen-jing-wang-luo/</url>
      
        <content type="html"><![CDATA[<h2 id="神经元模型"><a href="#神经元模型" class="headerlink" title="神经元模型"></a>神经元模型</h2><p>在生物学神经网络中，每个神经元与其他神经元连接，当它“兴奋”时，就会向相邻的神经元发送化学物质，从而改变这些神经元的电位，如果某神经元的电位超过一个阈值，那么它就会被激活（兴奋），向其他神经元发送化学物质。</p><p><img src="biology_neuron.jpeg"></p><center><font size=2>示图: 生物学神经元</font></center><p>1943年，McCulloch and Pitts基于生物神经元模型抽象出了我们熟知的M-P神经元模型。神经元接收来自n个其他神经元传递来的输入信号，这些输入信号通过带权重的连接进行传递，神经元接收到的总输入值将与神经元的阈值进行比较，然后通过激活函数处理以产生神经元的输出。</p><p><img src="M-P_neuron.png"></p><center><font size=2>示图: M-P神经元模型</font></center><p>理想中的激活函数应该是将任意输入值映射为0（抑制）或1（兴奋），即阶跃函数。但是阶跃函数具有不连续、不光滑等不好的性质。因此，实际中经常使用sigmoid函数作为激活函数，它把可能在较大范围内变化的输入值挤压到了$(0, 1)$熟出值范围内（也叫挤压函数）。</p><p><img src="activation_function.png"></p><center><font size=2>示图: 阶跃函数(左)；sigmoid函数(右)</font></center><p>把许多个这样的神经元按一定的层次结果连接起来，就得到了神经网络。</p><h2 id="感知器与多层网络"><a href="#感知器与多层网络" class="headerlink" title="感知器与多层网络"></a>感知器与多层网络</h2><h3 id="感知器"><a href="#感知器" class="headerlink" title="感知器"></a>感知器</h3><p>感知器（perceptron）由两层神经元组成，输入层接收外界信号后传入输出层（一个M-P神经元）。</p><p><img src="perceptron.png"></p><center><font size=2>示图: 感知器网络</font></center><p>感知器能很轻易实现与、或、非运算：</p><ul><li>与（$x_{1} \bigwedge x_{2}$）：令$w_{1} = w_{2} = 1, \theta = 2$，则$y = f(1 \cdot x_{1} + 1 \cdot x_{2} - 2)$，仅在$x_{1} = x_{2} = 1$时，$y = 1$；</li><li>或（$x_{1} \bigvee x_{2}$）：令$w_{1} = w_{2} = 1, \theta = 0.5$，则$y = f(1 \cdot x_{1} + 1 \cdot x_{2} - 0.5)$，当$x_{1} = 1$或$x_{2} = 1$时，$y = 1$；</li><li>非（$not x_{1}$）：令$w_{1} = -0.6, w_{2} = 0, \theta = -0.5$，则$y = f(-0.6 \cdot x_{1} + 0 \cdot x_{2} - (-0.5))$，当$x_{1} = 1$时，$y = 0$，当$x_{1} = 0$时，$y = 1$。</li></ul><p>一般地，给定训练集，权重$w_{i}(i = 1,2,\cdots,n)$以及阈值$\theta$都可以通过学习得到（阈值$\theta$可以看作一个固定输入的“哑节点”，所对应的连接权重$w_{n + 1}$，就可以全部统一为权重学习）。</p><p>感知器权重调整过程：</p><p>$$w_{i} \leftarrow w_{i} + \Delta w_{i}$$<br>$$\Delta w_{i} = \eta (y - \hat{y})x_{i}$$</p><p>$\eta \in (0, 1)$为学习率，$x{i}$用于控制每个$w_{i}$的不同变化率。若感知器预测准确，则$y = \hat{y}$，感知器不发生变化，否则根据错误的程度进行权重调整。</p><p>感知器只有一层功能神经元，只能解决线性可分问题，若两类模式是线性可分的，则一定存在线性超平面将其分开，所以只要求得适当的权向量，感知器一定会收敛，但是对于非线性可分问题，感知器就会出现震荡，不能求得合适解，如异或问题。</p><p><img src="logic_problem.png"></p><center><font size=2>示图: 逻辑问题</font></center><h3 id="多层网络"><a href="#多层网络" class="headerlink" title="多层网络"></a>多层网络</h3><p>要解决异或问题，需要多层功能神经元，于是就引入了隐含层，隐含层和输出层都是拥有激活函数的功能神经元。</p><p><img src="two_perceptron.png"></p><center><font size=2>示图: 两层感知器</font></center><p>多层网络中每层神经元与下层神经元全互连，同层神经元之间不互连，不相邻层神经元之间不互连，这种神经网络就叫“多层前馈神经网络”（“前馈”并不是信号不能向后传递，是指网络拓扑结构中不存在环或回路）。</p><p><img src="more_perceptron.png"></p><center><font size=2>示图: 多层感知器</font></center><p>神经网络学到的东西，就蕴含在连接权（含激活阈值）中。</p><h2 id="误差逆传播（error-BackPropagation）算法"><a href="#误差逆传播（error-BackPropagation）算法" class="headerlink" title="误差逆传播（error BackPropagation）算法"></a>误差逆传播（error BackPropagation）算法</h2><p>给定训练集$D = {(x_{1}, y_{1}), (x_{2}, y_{2}, \cdots, (x_{n}, y_{n}))}, x_{i} \in R^{d}, y_{i} \in R^{l}$（输入是$d$个属性，输出是$l$维实向量），得如下多层前馈网络结构，其中输出层第$j$个神经元第阈值用$\theta_{j}$表示，隐层第$h$个神经元第阈值用$\gamma_{h}$表示。</p><p><img src="more_layer_BP.png"></p><center><font size=2>示图: 多层前馈网络结构</font></center><p>假设隐层和输出层神经元都使用sigmoid函数（sigmoid函数很多，这里实际是一个对率函数）。</p><p>$$y = \frac{1}{1 + e^{-x}}$$</p><p>对训练例$(x_{k}, y_{k})$，假定神经网络的输出为$\hat{y}_{k} = (\hat{y}_{1}^{k},\hat{y}_{2}^{k},\cdots, \hat{y}_{l}^{k})$，即</p><p>$$\hat{y}_{j}^{k} = f(\beta_{j} - \theta_{j})$$</p><p>网络在$(x_{k}, y_{k})$上的均方误差为</p><p>$$E_{k} = \frac{1}{2}\sum_{j = 1}^{l}(\hat{y}_{j}^{k} - y_{j}^{k})^{2}$$</p><p>易知上面网络中有$(d + l + 1)q + l$个参数需要确定，BP迭代学习算法在每一轮迭代中采用广义第感知器学习规则对参数更新估计，即</p><p>$$\upsilon \leftarrow \upsilon + \Delta \upsilon$$</p><p>以$w_{hj}$为例</p><p>BP算法基于梯度下降，以目标的负梯度方向对参数进行调整，给定学习率$\eta$，则</p><p>$$\Delta w_{hj} = -\eta \frac{\partial E_{k}}{\partial w_{hj}}$$</p><p>根据链式法则</p><p>$$\frac{\partial E_{k}}{\partial w_{hj}} = \frac{\partial E_{k}}{\partial \hat{y}_{j}^{k}} \cdot \frac{\partial \hat{y}_{j}^{k}}{\partial \beta_{j}} \cdot \frac{\partial \beta_{j}}{\partial w_{hj}} $$</p><p>显然</p><p>$$\frac{\partial \beta_{j}}{\partial w_{hj}} = b_{n}$$</p><p>对率函数有</p><p>$$f^{‘}(x) = f(x)(1 - f(x))$$</p><p>$$-\frac{\partial E_{k}}{\partial \hat{y}_{j}^{k}} \cdot \frac{\partial \hat{y}_{j}^{k}}{\partial \beta_{j}} = -(\hat{y}_{j}^{k} - y_{j}^{k})f^{‘}(\beta_{j} - \theta_{j}) = \hat{y}_{j}^{k}(1 - \hat{y}_{j}^{k})(y_{j}^{k} - \hat{y}_{j}^{k})$$</p><p>令上式为$g_{j}$，则</p><p>$$\Delta w_{hj} = \eta g_{j} b_{h}$$</p><p>类似地令$e_{h}$为</p><p>$$-\frac{\partial E_{k}}{\partial b_{n}} \cdot \frac{\partial b_{n}}{\partial \alpha_{h}} = -\sum_{j = 1}^{l} \frac{\partial E_{k}}{\partial \beta_{j}} \cdot \frac{\partial \beta_{j}}{\partial b_{n}}f^{‘}(\alpha_{h} - \gamma_{h}) = \sum_{j = 1}^{l}w_{hj}g_{j}f^{‘}(\alpha_{h} - \gamma_{h}) = b_{h}(1 - b_{h})\sum_{j = 1}^{l}w_{hj}g_{j}$$</p><p>故</p><p>$$\Delta \theta_{j} = -\eta g_{j}$$<br>$$\Delta \upsilon_{ih} = \eta e_{h}x_{i}$$<br>$$\Delta \gamma_{h} = -\eta e_{h}$$</p><p>$\eta$的选择直接影响了算法的收敛效果，常让隐藏层到输出层之间用一个$\eta_{1}$，而输入层到隐藏层之间用另一个$\eta_{2}$。</p><p>BP算法大概工作流程为：先将输入示例提供给输入神经元，然后逐层将信号前传，直到产生输出层的结果；然后计算输出层的误差，再将误差逆向传播至隐藏神经元，最后根据隐藏神经元的误差来对连接权和阈值进行调整，以此循环迭代，直至达到某个停止条件。</p><p>BP算法的目标是最小化训练集上的累计误差</p><p>$$E = \frac{1}{m}\sum_{k = 1}^{m}E_{k}$$</p><p>上面（标准BP）的推导是基于单个$E_{k}$的，即每次只针对一个训练样例更新链接权和阈值。如果基于累计误差最小化更新规则，就得到了累计误差逆传播（累计BP）。</p><p>标准BP更新非常频繁，而且不同样例之间可能出现抵消现象，因此为了达到相同的累计误差极小点，标准BP需要更多第迭代次数；累计BD读取完整个训练集i一边后才对参数进行更新，更新频率小很多，但是累计误差在下降到一定程度后，下降会非常缓慢（特别是训练集非常大时），这是标准BP的收敛速度会更快。</p><p>只要神经元足够，BP算法能以任意精度毕竟任意连续函数，正由于其强大的表示能力，BP神经网络经常过拟合，常用解决方法是提前终止（训练集误差降低但验证集误差升高则终止）和正则化。</p><p>正则化基本思想是定义约束和惩罚，上面的提前终止就是一种约束，以惩罚为例，则目标误差函数可以改写为</p><p>$$E = \lambda \frac{1}{m} \sum_{k = 1}^{m}E_{k} + (1 - \lambda) \sum_{i}w_{i}^{2}$$</p><p>增加正则项后，传输网络会更加“光滑”。</p><h2 id="神经网络结构"><a href="#神经网络结构" class="headerlink" title="神经网络结构"></a>神经网络结构</h2><h3 id="RBF-网络"><a href="#RBF-网络" class="headerlink" title="RBF 网络"></a>RBF 网络</h3><p>RBF(Radial Basis Function, 径向基函数)网络是一种单隐层前馈神经网络（理论上可以有多个隐层），它使用径向基函数作为隐层神经元激活函数，径向基是一种沿径向对称的标量函数，通常定义为样本$x$到数据中心$c_{i}$之间的欧式距离的单调函数。输出层是对隐层神经元输出的线性组合，假定输入是$d$维向量$x$，在RBF网络为</p><p>$$\varphi(x) = \sum_{i = 1}^{q}w_{i} \rho(x, c_{i})$$</p><p>$q$为隐层神经元个数，$c_{i}, w_{i}$分别为第$i$个神经元所对应的中心和权重，$\rho(x, c_{i})$是径向基函数，常用的高斯径向基函数为</p><p>$$\rho(x, c_{i}) = e^{-\beta||x - c_{i}||^2}$$</p><p>训练RBF需要两步</p><ul><li>确定神经元中心，如随机采样，聚类</li><li>确定$w_{i}, \beta_{i}$，如BP算法</li></ul><h3 id="ART-网络"><a href="#ART-网络" class="headerlink" title="ART 网络"></a>ART 网络</h3><p>ART(Adaptive Resonance Theory, 自适应谐振理论)网络是一种竞争学习（一种无监督策略，遵循胜者通吃原则，网络的输出神经元相互竞争，每一时刻仅一个神经元被激活，其他神经元被抑制）网络，由比较层（接收输入样本），识别层（每个神经元是一个模式类），识别阈值和重置模块构成，神经元数量可以动态增加。</p><p>竞争的最简单方式是计算输入向量与每个识别层神经元所对应的模式类的代表向量之间的距离，距离小者获胜。</p><ul><li>若输入向量与获胜神经元所对应的代表向量之间第相似度大于识别阈值，则当前样本归为该类别，同时更新连接权重，使得以后接收相似输入时计算出更大的相似度</li><li>若相似度不大于识别阈值，则重置模块在识别层新增一个神经元，当前输入向量为代表向量。</li></ul><p>ART能在学习新知识的基础上保留旧知识的记忆（解决可塑性-稳定性窘境），因此ART可被用于增量学习或在线学习。</p><h3 id="SOM网络"><a href="#SOM网络" class="headerlink" title="SOM网络"></a>SOM网络</h3><p>SOM(Self-Organizing Map, 自组织映射)网络也是一种竞争学习的无监督神经网络，它是在保持输入数据高维空间拓扑结构的基础上将数据映射到低维空间，高位空间中的相似样本点在低维空间中是相邻的。</p><p>以二维为例，输出神经元以矩阵形式排列在二维空间，每个神经元的权向量决定了输入向量在低维空间中第位置，SOM的目的就是训练这个权向量。</p><p>训练方法与ART类似，接收一个输入相本后每个输出神经元会计算样本与自身携带第权向量之间的距离，距离小者获胜，同时调整邻近神经元权向量，使这些权向量雨输入样本的距离更小，以此更新迭代。</p><p><img src="SOM.png"></p><center><font size=2>示图: SOM网络</font></center><h3 id="级联相关网络"><a href="#级联相关网络" class="headerlink" title="级联相关网络"></a>级联相关网络</h3><p>级联相关(Cascade-Correlation)网络是一种自适应网络，即一般的神经网络都是假定网络结构是固定的，训练的目的是确定连接权，阈值等参数，而自适应网络则将网络结构也当作学习目标之一。</p><p><img src="cascade_correlation.png"></p><center><font size=2>示图: 级联相关网络</font></center><ul><li>级联：建立层次连接的层级结构，初始状态出于最小拓扑结构，只有输入层与输出层，训练中逐渐增加隐层神经元以创建层级结构（新隐层神经元加入时，连接权固定）</li><li>相关：最大化新神经元的输出与网络误差之间的相关性</li></ul><h3 id="Elman-网络"><a href="#Elman-网络" class="headerlink" title="Elman 网络"></a>Elman 网络</h3><p>Elman 网络是一种递归神经网络，它与网络拓扑结构中不存在环或回路的一般前馈神经网络不同，它让让一些神经元的输出反馈回来作为输入信号，使得$t$时刻的输出不仅与$t$时刻的输入有关，还与$t-1$时刻的网路状态有关。</p><p>Elman 网络的结构与多层前馈网络相似，但隐层神经元的输出被反馈回来，与下一时刻输入层神经元的信号一起作为隐层神经元的下一时刻输入。</p><p><img src="elman.png"></p><center><font size=2>示图: Elman网络</font></center><h3 id="Boltzmann-机"><a href="#Boltzmann-机" class="headerlink" title="Boltzmann 机"></a>Boltzmann 机</h3><p>Boltzmann 机是一种基于能量的模型（为网络定义一个能力，能量最小时网络达到理想状态），其神经元只能取0、1两种布尔状态，其神经元分为两层</p><ul><li>显层表示数据等输入与输出</li><li>隐层为数据的内在表达</li></ul><p><img src="boltzmann.png"></p><center><font size=2>示图: boltzmann机</font></center><p>Boltzmann 机的训练过程就是将训练样本视为一个状态向量，使起出现的概率尽可能大。</p><p>标准Boltzmann 机是一个全连接图，训练成本较高，现实常用的是受限Boltzmann 机（Restricted Boltzmann Machine, 简称RBM），它仅保留显层与隐层之间的连接，将完全图简化为了二部图。</p><h2 id="深度学习"><a href="#深度学习" class="headerlink" title="深度学习"></a>深度学习</h2><p>要让模型有更好的拟合效果，可以增加隐层神经元数量或隐层数目，但从增加模型复杂度来看，增加隐层数目更加有效，因为增加隐层数目不仅增加了神经元数量，还增加了激活函数嵌套层数，所以典型的深度学习模型就是增加隐层数目。</p><p>多层神经网络难以用经典算法（如BP）训练，因为误差在多隐层逆传播时，往往会发散不收敛。</p><p>对于这种大量参数分组的训练采用可采用“预训练＋微调”的方法（如深度信念网络DBN）。</p><ul><li>预训练：每次训练一层隐节点，训练时将上一层隐节点的输出作为输入，而本层隐节点的输出作为下一层的输入</li><li>微调节：训练完成后使用BP等算法对整个网络进行微调</li></ul><p>另外还可以采用“权共享”的方式训练（如卷积神经网络CNN）</p><p>CNN可用BP算法进行训练，单卷积层和采样层中的每一组神经都是用相同的连接权。</p><p>深度学习中多隐层堆叠，可看成是对输入信号进行了逐层加工，逐渐将初始对“低维”特征表示为“高维”特征，用简单模型即可完成复杂的分类学习，因此深度学习本质上就是特征学习（数据表示），而这在一般机器学习中，这一步就是特征工程。</p><p>end～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 神经网络 </tag>
            
            <tag> 感知器 </tag>
            
            <tag> 神经网络结构 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python面试题50道</title>
      <link href="2020/10/31/python-mian-shi-ti-50-dao/"/>
      <url>2020/10/31/python-mian-shi-ti-50-dao/</url>
      
        <content type="html"><![CDATA[<h2 id="Python-2-和-Python-3-的差异（这里写15个）"><a href="#Python-2-和-Python-3-的差异（这里写15个）" class="headerlink" title="Python 2 和 Python 3 的差异（这里写15个）"></a>Python 2 和 Python 3 的差异（这里写15个）</h2><ol><li>__future__模块：如果在想在python2中使用python3的一些关键字或特性，可以使用python2中内置的__future__模块导入，如想在python2中使用python3的输出模块，可以使用from __future__ import print_function</li></ol><ul><li>print：python2中print是一个特殊语句，在python3中该语句没有了，取而代之的是print()函数</li><li>异常捕获：python2中捕获异常的语法是except exc, var python3中改为了except exc as var</li><li>除法运算：python2整数相除的结果是一个整数，python3是一个浮点数</li><li>编码：python2中使用ascii编码，python中使用utf-8编码</li><li>输入函数：python2中是raw_input()函数，python3中是input()函数</li><li>range：python2中range()返回列表，python3中返回迭代器</li><li>xrange：Python3中，range()是像xrange()那样实现，不存在一个专门的xrange()函数</li><li>不等号运算：Python2中不等于有两种写法 != 和 &lt;&gt;，Python3中去掉了&lt;&gt;, 只有!=一种写法</li><li>repr反引号：Python2中反引号相当于repr函数的作用，Python3中去掉了反引号这种写法，只允许使用repr函数</li><li>模块命名变化：如ConfigParser变成了configparser，SocketServer变成了socketserver</li><li>模块合并：python2中的StringIO和cStringIO合并为python3中的io，python2中的pickle和cPickle合并为python3中的pickle，python2中的urllib、urllib2和urlparse合并为python3中的urllib</li><li>字典：python2中的dict类中的keys、values和items均返回list对象，iterkeys、itervalues和iteritems返回生成器对象，python3中只返回一个生成器的对象，方法名为keys、values和items。</li><li>申明原类：python2中声明元类：<strong>metaclass</strong> = MetaClass，python3中声明元类：class newclass(metaclass=MetaClass):pass</li><li>字符串类型</li></ul><table><thead><tr><th align="center">版本</th><th align="center">python2</th><th align="center">python3</th></tr></thead><tbody><tr><td align="center">字节字符串</td><td align="center">str</td><td align="center">bytes</td></tr><tr><td align="center">文本字符串</td><td align="center">Unicode</td><td align="center">str</td></tr></tbody></table><h2 id="read、readline、readlines读取文件的区别"><a href="#read、readline、readlines读取文件的区别" class="headerlink" title="read、readline、readlines读取文件的区别"></a>read、readline、readlines读取文件的区别</h2><ul><li>read 读取整个文件</li><li>readline 读取下一行,使用生成器方法</li><li>readlines 读取整个文件到一个迭代器以供我们遍历</li></ul><h2 id="r、r-、rb、rb-等文件打开模式的区别"><a href="#r、r-、rb、rb-等文件打开模式的区别" class="headerlink" title="r、r+、rb、rb+等文件打开模式的区别"></a>r、r+、rb、rb+等文件打开模式的区别</h2><p>r和w的用一张图表示，后面加b的是二进制文件，其他相同。</p><p><img src="openfile.png"></p><h2 id="列出python中主要可变数据类型和不可变数据类型并解释原理"><a href="#列出python中主要可变数据类型和不可变数据类型并解释原理" class="headerlink" title="列出python中主要可变数据类型和不可变数据类型并解释原理"></a>列出python中主要可变数据类型和不可变数据类型并解释原理</h2><p>不可变数据类型：int，float，string，tuple等</p><p>不允许变量的值发生变化，如果改变了变量的值，相当于是新建了一个对象（一个地址），相同值的对象，在内存中只有一个。</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 14427273392 2</code></pre><p>可变数据类型：list，dict，set，</p><p>允许变量的值发生变化，如对list执行append操作，只是改变了list的值，而不会新建一个对象，变量引用的对象的地址也不会变化，相同的值的不同对象，在内存中则会存在不同的对象。</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4489262656 [1, 2]4489262656 [1, 2, 3]4495298720 [1, 2]</code></pre><h2 id="python传参数是传值还是传址"><a href="#python传参数是传值还是传址" class="headerlink" title="python传参数是传值还是传址"></a>python传参数是传值还是传址</h2><p>Python的参数传递有：位置参数、默认参数、可变参数、关键字参数。</p><p>函数的传值到底是值传递还是引用传递、要分情况：</p><p>不可变参数用值传递：像整数和字符串这样的不可变对象，是通过拷贝进行传递的，因为你无论如何都不可能在原处改变不可变对象。</p><p>可变参数是引用传递：比如像列表，字典这样的对象是通过引用传递、和C语言里面的用指针传递数组很相似，可变对象能在函数内部改变。</p><h2 id="什么是lambda函数，有什么好处"><a href="#什么是lambda函数，有什么好处" class="headerlink" title="什么是lambda函数，有什么好处"></a>什么是lambda函数，有什么好处</h2><p>lambda函数是匿名函数，是一个可以接收任意多个参数(包括可选参数)并且返回单个表达式值的函数。这种函数得名于省略了用def声明函数的标准步骤。</p><ol><li>lambda函数比较轻便，即用即仍，很适合需要完成一项功能，但是此功能只在此一处使用</li></ol><ul><li><p>匿名函数，一般用来给filter，map这样的函数式编程服务</p></li><li><p>作为回调函数，传递给某些应用，比如消息处理</p></li></ul><h2 id="如何在函数内部修改全局变量并解释原理"><a href="#如何在函数内部修改全局变量并解释原理" class="headerlink" title="如何在函数内部修改全局变量并解释原理"></a>如何在函数内部修改全局变量并解释原理</h2><p>把id打出来一目了然</p><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">func1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>func1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 44272733604427273392 44272733924427273360 44272733601</code></pre><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">def</span> <span class="token function">func2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> a     a <span class="token operator">=</span> <span class="token number">2</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>func2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>id<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>4427273360 44272733604427273392 44272733924427273392 44272733602</code></pre><h2 id="python中断言"><a href="#python中断言" class="headerlink" title="python中断言"></a>python中断言</h2><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span><span class="token punctuation">(</span>a <span class="token operator">&lt;</span> <span class="token number">5</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"断言成功，继续，a等于%d"</span> <span class="token operator">%</span> a<span class="token punctuation">)</span>    a <span class="token operator">+=</span> <span class="token number">1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>断言成功，继续，a等于1断言成功，继续，a等于2断言成功，继续，a等于3断言成功，继续，a等于4---------------------------------------------------------------------------AssertionError                            Traceback (most recent call last)&lt;ipython-input-13-7bc103f31806&gt; in &lt;module&gt;      1 a = 1      2 while True:----&gt; 3     assert(a &lt; 5)      4     print(&quot;断言成功，继续，a等于%d&quot; % a)      5     a += 1AssertionError: </code></pre><h2 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"数字大于2了，最新数字为%d"</span> <span class="token operator">%</span> i<span class="token punctuation">)</span>    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span>func<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>0123数字大于2了，最新数字为3</code></pre><h2 id="主要的异常"><a href="#主要的异常" class="headerlink" title="主要的异常"></a>主要的异常</h2><ul><li>IOError：输入输出异常</li><li>AttributeError：试图访问一个对象没有的属性</li><li>ImportError：无法引入模块或包，基本是路径问题</li><li>IndentationError：语法错误，代码没有正确的对齐</li><li>IndexError：下标索引超出序列边界</li><li>KeyError：试图访问你字典里不存在的键</li><li>SyntaxError：Python代码逻辑语法出错，不能执行</li><li>NameError：使用一个还未赋予对象的变量</li></ul><h2 id="异常模块中try-except-else-finally的相关意义"><a href="#异常模块中try-except-else-finally的相关意义" class="headerlink" title="异常模块中try except else finally的相关意义"></a>异常模块中try except else finally的相关意义</h2><ul><li>try..except..else没有捕获到异常，执行else语句</li><li>try..except..finally不管是否捕获到异常，都执行finally语句</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    printerr<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> errmsg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"产生错误，错误维%s"</span> <span class="token operator">%</span> errmsg<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"没有错误，继续执行"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"--------------------"</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token number">10</span>    printerr<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">except</span> NameError <span class="token keyword">as</span> errmsg<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"产生错误，错误维%s"</span> <span class="token operator">%</span> errmsg<span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"不管是否错误都执行"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>产生错误，错误维name &#39;printerr&#39; is not defined--------------------产生错误，错误维name &#39;printerr&#39; is not defined不管是否错误都执行</code></pre><h2 id="Python中是如何管理内存的"><a href="#Python中是如何管理内存的" class="headerlink" title="Python中是如何管理内存的"></a>Python中是如何管理内存的</h2><p>python中的内存管理由Python私有堆空间管理。所有Python对象和数据结构都位于私有堆中。程序员无权访问此私有堆。python解释器负责处理这个问题。</p><p>Python对象的堆空间分配由Python的内存管理器完成。核心API提供了一些程序员编写代码的工具。</p><p>Python还有一个内置的垃圾收集器，它可以回收所有未使用的内存，并使其可用于堆空间。</p><h2 id="内存泄露是什么，如何避免"><a href="#内存泄露是什么，如何避免" class="headerlink" title="内存泄露是什么，如何避免"></a>内存泄露是什么，如何避免</h2><p>内存泄漏指由于疏忽或错误造成程序未能释放已经不再使用的内存。内存泄漏并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费。</p><p>有<strong>del</strong>()函数的对象间的循环引用是导致内存泄露的主凶。不使用一个对象时使用: del object 来删除一个对象的引用计数就可以有效防止内存泄露问题。</p><p>通过Python扩展模块gc 来查看不能回收的对象的详细信息。</p><p>可以通过 sys.getrefcount(obj) 来获取对象的引用计数，并根据返回值是否为0来判断是否内存泄露</p><h2 id="python中的闭包是什么"><a href="#python中的闭包是什么" class="headerlink" title="python中的闭包是什么"></a>python中的闭包是什么</h2><p>在函数内部再定义一个函数，并且这个函数用到了外边函数的变量，那么将这个函数以及用到的一些变量称之为闭包。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">outerfunc</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">innerfunc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>    innerfunc<span class="token punctuation">(</span><span class="token punctuation">)</span>outerfunc<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>5</code></pre><h2 id="字典排序"><a href="#字典排序" class="headerlink" title="字典排序"></a>字典排序</h2><pre class="line-numbers language-python"><code class="language-python">d <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;'b': 2, 'a': 3, 'c': 1&amp;#125;</span><span class="token comment" spellcheck="true"># 更根据键排序</span>d_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">(</span>d_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 根据值排序</span>d_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>d<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> i<span class="token punctuation">:</span>i<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dict<span class="token punctuation">(</span>d_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;a&#39;: 3, &#39;b&#39;: 2, &#39;c&#39;: 1&#125;&#123;&#39;c&#39;: 1, &#39;b&#39;: 2, &#39;a&#39;: 3&#125;</code></pre><h2 id="列表嵌套字典的排序"><a href="#列表嵌套字典的排序" class="headerlink" title="列表嵌套字典的排序"></a>列表嵌套字典的排序</h2><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name": "b", "age": 2&amp;#125;, &amp;#123;"name": "a", "age": 3&amp;#125;, &amp;#123;"name": "c", "age": 1&amp;#125;]</span>new_a <span class="token operator">=</span> sorted<span class="token punctuation">(</span>a<span class="token punctuation">,</span> key<span class="token operator">=</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x<span class="token punctuation">[</span><span class="token string">"name"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> reverse<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>[&#123;&#39;name&#39;: &#39;a&#39;, &#39;age&#39;: 3&#125;, &#123;&#39;name&#39;: &#39;b&#39;, &#39;age&#39;: 2&#125;, &#123;&#39;name&#39;: &#39;c&#39;, &#39;age&#39;: 1&#125;]</code></pre><h2 id="filter返回list中全部奇数"><a href="#filter返回list中全部奇数" class="headerlink" title="filter返回list中全部奇数"></a>filter返回list中全部奇数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s<span class="token operator">%</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>new_a <span class="token operator">=</span> filter<span class="token punctuation">(</span>func<span class="token punctuation">,</span> a<span class="token punctuation">)</span>new_a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> new_a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 3, 5]</code></pre><h2 id="至少用三种方式求1-100的和"><a href="#至少用三种方式求1-100的和" class="headerlink" title="至少用三种方式求1-100的和"></a>至少用三种方式求1-100的和</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># sum()函数</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第一种："</span><span class="token punctuation">,</span> sum<span class="token punctuation">(</span>range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 递归</span><span class="token keyword">def</span> <span class="token function">sum_num</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">return</span> n <span class="token operator">+</span> sum_num<span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第二种："</span><span class="token punctuation">,</span> sum_num<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 循环</span>sum_n <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    sum_n <span class="token operator">+=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"第三种："</span><span class="token punctuation">,</span> sum_n<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>第一种： 5050第二种： 5050第三种： 5050</code></pre><h2 id="用生成器生成斐波拉契数列"><a href="#用生成器生成斐波拉契数列" class="headerlink" title="用生成器生成斐波拉契数列"></a>用生成器生成斐波拉契数列</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">fib</span><span class="token punctuation">(</span>max<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>    <span class="token keyword">while</span> n <span class="token operator">&lt;</span> max<span class="token punctuation">:</span>        <span class="token keyword">yield</span> b        a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> a <span class="token operator">+</span> b        n <span class="token operator">=</span> n <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> <span class="token string">'done'</span>f <span class="token operator">=</span> fib<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>11235813</code></pre><h2 id="如何就地打乱一个列表"><a href="#如何就地打乱一个列表" class="headerlink" title="如何就地打乱一个列表"></a>如何就地打乱一个列表</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> shufflea <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>shuffle<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6, 7, 8, 9][3, 4, 5, 1, 8, 6, 9, 2, 7]</code></pre><h2 id="copy和deepcopy区别"><a href="#copy和deepcopy区别" class="headerlink" title="copy和deepcopy区别"></a>copy和deepcopy区别</h2><ul><li>copy：浅复制，不会拷贝其子对象，修改子对象，将受影响 </li><li>deepcopy 深复制，将拷贝其子对象，修改子对象，将不受影响  </li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> copyl1 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">]</span><span class="token punctuation">]</span>l2 <span class="token operator">=</span> copy<span class="token punctuation">.</span>copy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l3 <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>l1<span class="token punctuation">)</span>l1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'c'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l1:'</span><span class="token punctuation">,</span> l1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l2:'</span><span class="token punctuation">,</span> l2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'l3:'</span><span class="token punctuation">,</span> l3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>l1: [1, 2, 3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]l2: [1, 2, 3, [&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]]l3: [1, 2, 3, [&#39;a&#39;, &#39;b&#39;]]</code></pre><h2 id="map返回list中所有value的平方"><a href="#map返回list中所有value的平方" class="headerlink" title="map返回list中所有value的平方"></a>map返回list中所有value的平方</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">func</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> v <span class="token operator">**</span> <span class="token number">2</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span>new_a <span class="token operator">=</span> map<span class="token punctuation">(</span>func<span class="token punctuation">,</span> a<span class="token punctuation">)</span>new_a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> new_a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>new_a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 4, 9, 16, 25]</code></pre><h2 id="Python数组和列表有什么区别"><a href="#Python数组和列表有什么区别" class="headerlink" title="Python数组和列表有什么区别"></a>Python数组和列表有什么区别</h2><p>Python中的数组和列表具有相同的存储数据方式。但是，数组只能包含单个数据类型元素，而列表可以包含任何数据类型元素。</p><h2 id="Python中help-和dir-函数分别是什么"><a href="#Python中help-和dir-函数分别是什么" class="headerlink" title="Python中help()和dir()函数分别是什么"></a>Python中help()和dir()函数分别是什么</h2><p>help()和dir()这两个函数都可以从Python解释器直接访问，并用于查看内置函数的合并转储。</p><p>help()函数：help()函数用于显示文档字符串，还可以查看与模块，关键字，属性等相关的使用信息。</p><p>dir()函数：dir()函数用于显示定义的符号。</p><h2 id="正则保留中文"><a href="#正则保留中文" class="headerlink" title="正则保留中文"></a>正则保留中文</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">find_chinese1</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span><span class="token string">'\d+|[a-zA-Z]+'</span><span class="token punctuation">)</span>    chinese <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">find_chinese2</span><span class="token punctuation">(</span>file<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern <span class="token operator">=</span> re<span class="token punctuation">.</span>compile<span class="token punctuation">(</span>r<span class="token string">'[^\u4e00-\u9fa5]'</span><span class="token punctuation">)</span>    chinese <span class="token operator">=</span> re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">,</span> file<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>chinese<span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">"asdw正asdf则we43保547留sg756中45erg文3"</span>find_chinese1<span class="token punctuation">(</span>s<span class="token punctuation">)</span>find_chinese2<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>正则保留中文正则保留中文</code></pre><h2 id="和-匹配区别"><a href="#和-匹配区别" class="headerlink" title="(.)和(.?)匹配区别"></a>(.<em>)和(.</em>?)匹配区别</h2><ul><li><p>(.*)是贪婪匹配，会把满足正则的尽可能多匹配</p></li><li><p>(.*?)是非贪婪匹配，会把满足正则的尽可能少匹配</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> rea <span class="token operator">=</span> <span class="token string">"&lt;a>(非)贪婪&lt;/a>&lt;a>匹配&lt;/a>"</span>res1 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a>(.*)&lt;/a>"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"贪婪匹配: "</span><span class="token punctuation">,</span> res1<span class="token punctuation">)</span>res2 <span class="token operator">=</span> re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">"&lt;a>(.*?)&lt;/a>"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"非贪婪匹配: "</span><span class="token punctuation">,</span> res2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>贪婪匹配:  [&#39;(非)贪婪&lt;/a&gt;&lt;a&gt;匹配&#39;]非贪婪匹配:  [&#39;(非)贪婪&#39;, &#39;匹配&#39;]</code></pre><h2 id="python中什么元素为假"><a href="#python中什么元素为假" class="headerlink" title="python中什么元素为假"></a>python中什么元素为假</h2><p>有0、空字符串、空列表、空字典、空元组、None、False</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125;))</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span>None<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>bool<span class="token punctuation">(</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>FalseFalseFalseFalseFalseFalseFalse</code></pre><h2 id="any-和all-的区别"><a href="#any-和all-的区别" class="headerlink" title="any()和all()的区别"></a>any()和all()的区别</h2><ul><li><p>any()：只要迭代器中有一个元素为真就为真</p></li><li><p>all()：迭代器中所有的判断项返回都是真，结果才为真</p></li></ul><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">True</span><span class="token punctuation">,</span> <span class="token boolean">False</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"any: "</span><span class="token punctuation">,</span> any<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"all: "</span><span class="token punctuation">,</span> all<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><pre><code>any:  Trueall:  False</code></pre><h2 id="列表的交集、并集和差集"><a href="#列表的交集、并集和差集" class="headerlink" title="列表的交集、并集和差集"></a>列表的交集、并集和差集</h2><pre class="line-numbers language-python"><code class="language-python">a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>jj <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>intersection<span class="token punctuation">(</span>set<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>bj <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>union<span class="token punctuation">(</span>set<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cj1 <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>cj2 <span class="token operator">=</span> list<span class="token punctuation">(</span>set<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>difference<span class="token punctuation">(</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"交集"</span><span class="token punctuation">,</span> jj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"并集"</span><span class="token punctuation">,</span> bj<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"差集"</span><span class="token punctuation">,</span> cj1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"差集"</span><span class="token punctuation">,</span> cj2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>a [1, 2, 3, 4]b [3, 4, 5, 6]交集 [3, 4]并集 [1, 2, 3, 4, 5, 6]差集 [1, 2]差集 [5, 6]</code></pre><h2 id="列表去重、合并、删除"><a href="#列表去重、合并、删除" class="headerlink" title="列表去重、合并、删除"></a>列表去重、合并、删除</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 去重</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span>set<span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> set<span class="token punctuation">(</span>a<span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> a<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 合并</span>b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 删除</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6][1, 2, 3, 4, 5, 6, 7, 8, 9, 0][1, 2, 3, 4, 5, 6, 7, 8, 9]</code></pre><h2 id="找到数组中的第二大数"><a href="#找到数组中的第二大数" class="headerlink" title="找到数组中的第二大数"></a>找到数组中的第二大数</h2><pre class="line-numbers language-python"><code class="language-python">num_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token comment" spellcheck="true"># 直接排序，输出倒数第二个数</span>tmp_list <span class="token operator">=</span> sorted<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法一：Second_large_num is :"</span><span class="token punctuation">,</span> tmp_list<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 设置两个标志位一个存储最大数一个存储次大数</span>one <span class="token operator">=</span> num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>two <span class="token operator">=</span> num_list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>num_list<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> one<span class="token punctuation">:</span>        two <span class="token operator">=</span> one        one <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">elif</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> two<span class="token punctuation">:</span>        two <span class="token operator">=</span> num_list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法二：Second_large_num is :"</span><span class="token punctuation">,</span> two<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 用reduce与逻辑符号</span><span class="token keyword">from</span> functools <span class="token keyword">import</span> reducenum <span class="token operator">=</span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> ot<span class="token punctuation">,</span> x<span class="token punctuation">:</span> ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">and</span> <span class="token punctuation">(</span>ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">)</span> <span class="token operator">or</span> ot<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> x <span class="token operator">and</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> ot<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> ot<span class="token punctuation">,</span> num_list<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"方法三：Second_large_num is :"</span><span class="token punctuation">,</span> num<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>方法一：Second_large_num is : 8方法二：Second_large_num is : 8方法三：Second_large_num is : 8</code></pre><h2 id="字典的删除与合并"><a href="#字典的删除与合并" class="headerlink" title="字典的删除与合并"></a>字典的删除与合并</h2><pre class="line-numbers language-python"><code class="language-python">dic <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"name": "a", "age": 1&amp;#125;</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span class="token keyword">del</span> dic<span class="token punctuation">[</span><span class="token string">"age"</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span>dic2 <span class="token operator">=</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;"age": 2&amp;#125;</span>dic<span class="token punctuation">.</span>update<span class="token punctuation">(</span>dic2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>dic<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>&#123;&#39;name&#39;: &#39;a&#39;, &#39;age&#39;: 1&#125;&#123;&#39;name&#39;: &#39;a&#39;&#125;&#123;&#39;name&#39;: &#39;a&#39;, &#39;age&#39;: 2&#125;</code></pre><h2 id="remove、pop和del的区别"><a href="#remove、pop和del的区别" class="headerlink" title="remove、pop和del的区别"></a>remove、pop和del的区别</h2><ul><li>remove(item)直接对可变序中的元素进行检索删除，返回的是删除后的列表</li><li>pop(index)方法是对可变序列中元素下标进行检索删除，返回删除值</li><li>del(list[index])方法是对可变序列中元素下边进行检索删除，不返回删除值</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"remove方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>remove<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"pop方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"del方法"</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">del</span> a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>remove方法[1, 2, 3, 4, 5, 6, 7]None[1, 2, 4, 5, 6, 7]pop方法[1, 2, 3, 4, 5, 6, 7]4[1, 2, 3, 5, 6, 7]del方法[1, 2, 3, 4, 5, 6, 7][1, 2, 3, 5, 6, 7]</code></pre><h2 id="二维列表变一维"><a href="#二维列表变一维" class="headerlink" title="二维列表变一维"></a>二维列表变一维</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 不借助package</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> item <span class="token keyword">in</span> a <span class="token keyword">for</span> i <span class="token keyword">in</span> item<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 使用package</span><span class="token keyword">from</span> itertools <span class="token keyword">import</span> chain<span class="token keyword">print</span><span class="token punctuation">(</span>list<span class="token punctuation">(</span>chain<span class="token punctuation">(</span><span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>[1, 2, 3, 4, 5, 6, 7, 8][1, 2, 3, 4, 5, 6, 7, 8]</code></pre><h2 id="is和-有什么区别"><a href="#is和-有什么区别" class="headerlink" title="is和==有什么区别"></a>is和==有什么区别</h2><ul><li><p>is：比较的是两个对象的id值是否相等，也就是比较俩对象是否为同一个实例对象。是否指向同一个内存地址</p></li><li><p>== ： 比较的两个对象的内容/值是否相等，默认会调用对象的eq()方法</p></li></ul><h2 id="时间与时间戳转换"><a href="#时间与时间戳转换" class="headerlink" title="时间与时间戳转换"></a>时间与时间戳转换</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> timenow <span class="token operator">=</span> time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"时间戳:"</span><span class="token punctuation">,</span> now<span class="token punctuation">)</span>tl <span class="token operator">=</span> time<span class="token punctuation">.</span>localtime<span class="token punctuation">(</span>now<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"格式化:"</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span>format_time <span class="token operator">=</span> time<span class="token punctuation">.</span>strftime<span class="token punctuation">(</span><span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">,</span> tl<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"标准时间:"</span><span class="token punctuation">,</span> format_time<span class="token punctuation">)</span>ts <span class="token operator">=</span> time<span class="token punctuation">.</span>strptime<span class="token punctuation">(</span>format_time<span class="token punctuation">,</span> <span class="token string">"%Y-%m-%d %H:%M:%S"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"新时间戳:"</span><span class="token punctuation">,</span> time<span class="token punctuation">.</span>mktime<span class="token punctuation">(</span>ts<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>时间戳: 1586675347.695563格式化: time.struct_time(tm_year=2020, tm_mon=4, tm_mday=12, tm_hour=15, tm_min=9, tm_sec=7, tm_wday=6, tm_yday=103, tm_isdst=0)标准时间: 2020-04-12 15:09:07新时间戳: 1586675347.0</code></pre><h2 id="列出几种魔法方法并介绍用途"><a href="#列出几种魔法方法并介绍用途" class="headerlink" title="列出几种魔法方法并介绍用途"></a>列出几种魔法方法并介绍用途</h2><ul><li><p>__init__：构造器，当一个实例被创建的时候初始化的方法，但是它并不是实例化调用的第一个方法。</p></li><li><p>__new__：才是实例化对象调用的第一个方法，它只取下cls参数，并把其他参数传给__init__.</p></li><li><p>__call__：让一个类的实例像函数一样被调用</p></li><li><p>__getitem__：定义获取容器中指定元素的行为，相当于self[key]</p></li><li><p>__getattr__：定义当用户试图访问一个不存在属性的时候的行为。</p></li><li><p>__setattr__：定义当一个属性被设置的时候的行为</p></li><li><p>__getattribute__：定义当一个属性被访问的时候的行为</p></li></ul><h2 id="面向对象中-new-和-init-区别"><a href="#面向对象中-new-和-init-区别" class="headerlink" title="面向对象中__new__和__init__区别"></a>面向对象中__new__和__init__区别</h2><ul><li>__init__是初始化方法，创建对象后，就立刻被默认调用了，可接收参数，不需要返回值</li><li>__new__至少要有一个参数cls，代表当前类</li><li>__new__必须要有返回值，返回实例化出来的实例</li><li>__init__有一个参数self，就是这个__new__返回的实例，__init__在__new__的基础上可以完成一些其它初始化的动作</li><li>如果__new__创建的是当前类的实例，会自动调用__init__函数，通过return语句里面调用的__new__函数的第一个参数是cls来保证是当前类实例，如果是其他类的类名；那么实际创建返回的就是其他类的实例，其实就不会调用当前类的__init__函数，也不会调用其他类的__init__函数。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Demo</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是init方法"</span><span class="token punctuation">,</span> self<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是arg的id"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"这是new方法"</span><span class="token punctuation">,</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>Demo<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"类Demo的id为"</span><span class="token punctuation">,</span> id<span class="token punctuation">(</span>Demo<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>这是arg的id 140646464536368这是new方法 &lt;__main__.Demo object at 0x10d41c590&gt;这是init方法 &lt;__main__.Demo object at 0x10d41c590&gt;类Demo的id为 140646464536368</code></pre><h2 id="创建一个单列模式"><a href="#创建一个单列模式" class="headerlink" title="创建一个单列模式"></a>创建一个单列模式</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Singleton</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    __instance <span class="token operator">=</span> None    <span class="token keyword">def</span> <span class="token function">__new__</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">not</span> cls<span class="token punctuation">.</span>__instance<span class="token punctuation">:</span>            cls<span class="token punctuation">.</span>__instance <span class="token operator">=</span> object<span class="token punctuation">.</span>__new__<span class="token punctuation">(</span>cls<span class="token punctuation">)</span>        <span class="token keyword">return</span> cls<span class="token punctuation">.</span>__instancea <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>b <span class="token operator">=</span> Singleton<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>a<span class="token punctuation">.</span>age <span class="token operator">=</span> <span class="token number">3</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>3</code></pre><h2 id="类变量如何设置成私有变量"><a href="#类变量如何设置成私有变量" class="headerlink" title="类变量如何设置成私有变量"></a>类变量如何设置成私有变量</h2><p>如果要让内部属性不被外部访问，可以把属性的名称前加上两个下划线__，在Python中，实例的变量名如果以__开头，就变成了一个私有变量（private），只有内部可以访问，外部不能访问.</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">people1</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">print_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name: %s, age: %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>age<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">people2</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> name<span class="token punctuation">,</span> age<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>__name <span class="token operator">=</span> name        self<span class="token punctuation">.</span>__age <span class="token operator">=</span> age    <span class="token keyword">def</span> <span class="token function">print_age</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'name: %s, age: %d'</span> <span class="token operator">%</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>__name<span class="token punctuation">,</span> self<span class="token punctuation">.</span>__age<span class="token punctuation">)</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> people1<span class="token punctuation">(</span><span class="token string">"a"</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>p1<span class="token punctuation">.</span>print_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">.</span>name<span class="token punctuation">)</span>p2 <span class="token operator">=</span> people2<span class="token punctuation">(</span><span class="token string">"b"</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>p2<span class="token punctuation">.</span>print_age<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">.</span>name<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>name: a, age: 1aname: b, age: 2---------------------------------------------------------------------------AttributeError                            Traceback (most recent call last)&lt;ipython-input-192-9af57612b39b&gt; in &lt;module&gt;     20 p2 = people2(&quot;b&quot;, 2)     21 p2.print_age()---&gt; 22 print(p2.name)AttributeError: &#39;people2&#39; object has no attribute &#39;name&#39;</code></pre><h2 id="继承的好处并简单实现"><a href="#继承的好处并简单实现" class="headerlink" title="继承的好处并简单实现"></a>继承的好处并简单实现</h2><ul><li>继承最大的好处是子类获得了父类的全部功能。</li><li>继承的另一个好处：多态，当我们需要传入子类时，我们只需要接收父类类型即可。</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Animal</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">run</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Animal is running...'</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">Dog</span><span class="token punctuation">(</span>Animal<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">pass</span>dog <span class="token operator">=</span> Dog<span class="token punctuation">(</span><span class="token punctuation">)</span>dog<span class="token punctuation">.</span>run<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>Animal is running...</code></pre><h2 id="如何反转一个整数"><a href="#如何反转一个整数" class="headerlink" title="如何反转一个整数"></a>如何反转一个整数</h2><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">(</span>object<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">reverse</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">10</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> x        str_x <span class="token operator">=</span> str<span class="token punctuation">(</span>x<span class="token punctuation">)</span>        <span class="token keyword">if</span> str_x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token string">"-"</span><span class="token punctuation">:</span>            str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            x <span class="token operator">=</span> int<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            str_x <span class="token operator">=</span> str_x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>            x <span class="token operator">=</span> int<span class="token punctuation">(</span>str_x<span class="token punctuation">)</span>            x <span class="token operator">=</span> <span class="token operator">-</span>x        <span class="token keyword">return</span> x <span class="token keyword">if</span> <span class="token operator">-</span><span class="token number">2147483648</span> <span class="token operator">&lt;</span> x <span class="token operator">&lt;</span> <span class="token number">2147483647</span> <span class="token keyword">else</span> <span class="token number">0</span>s <span class="token operator">=</span> Solution<span class="token punctuation">(</span><span class="token punctuation">)</span>reverse_int <span class="token operator">=</span> s<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>reverse_int<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>-321</code></pre><h2 id="fun-args-kwargs-中的-args-kwargs什么意思"><a href="#fun-args-kwargs-中的-args-kwargs什么意思" class="headerlink" title="fun(*args,**kwargs)中的*args,**kwargs什么意思"></a>fun(*args,**kwargs)中的*args,**kwargs什么意思</h2><p>*args,**kwargs主要用于函数的定义，允许将不定数量的参数传递给函数，即预先并不知道函数使用者会传递多少个参数给函数。</p><ul><li>*args是用来发送一个非键值对的可变数量的参数列别给一个函数</li><li>**kwargs是用来发送一个不定长度的键值对给一个函数</li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">args_demo</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> args<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">kwargs_demo</span><span class="token punctuation">(</span><span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> kwargs<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>k<span class="token punctuation">,</span> v<span class="token punctuation">)</span>args_demo<span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">,</span> <span class="token string">'b'</span><span class="token punctuation">,</span> <span class="token string">'c'</span><span class="token punctuation">)</span>kwargs_demo<span class="token punctuation">(</span>name<span class="token operator">=</span><span class="token string">"a"</span><span class="token punctuation">,</span> age<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>abcname aage 1</code></pre><h2 id="装饰器的作用"><a href="#装饰器的作用" class="headerlink" title="装饰器的作用"></a>装饰器的作用</h2><p>装饰器本质上是一个 Python 函数或类，它可以让其他函数或类在不需要做任何代码修改的前提下增加额外功能，装饰器的返回值也是一个函数/类对象。有了装饰器，我们就可以抽离出大量与函数功能本身无关的雷同代码到装饰器中并继续重用。概括的讲，装饰器的作用就是为已经存在的对象添加额外的功能。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> time<span class="token keyword">def</span> <span class="token function">log</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wrapper</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"%s is running"</span> <span class="token operator">%</span> func<span class="token punctuation">.</span>__name__<span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kw<span class="token punctuation">)</span>    <span class="token keyword">return</span> wrapper@log<span class="token keyword">def</span> <span class="token function">foo1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>@log<span class="token keyword">def</span> <span class="token function">foo2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>foo1<span class="token punctuation">(</span><span class="token punctuation">)</span>foo2<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre><code>foo1 is running1586700083.317305foo2 is running1586700083.317503</code></pre><h2 id="python的GIL是什么"><a href="#python的GIL是什么" class="headerlink" title="python的GIL是什么"></a>python的GIL是什么</h2><p>GIL(Global Interpreter Lock)是python的全局解释器锁，同一进程中假如有多个线程运行，一个线程在运行python程序的时候会霸占python解释器（加了一把锁即GIL），使该进程内的其他线程无法运行，等该线程运行完后其他线程才能运行。</p><p>如果线程运行过程中遇到耗时操作，则解释器锁解开，使其他线程运行。所以在多线程中，线程的运行仍是有先后顺序的，并不是同时进行。</p><p>多进程中因为每个进程都能被系统分配资源，相当于每个进程有了一个python解释器，所以多进程可以实现多个进程的同时运行，缺点是进程系统资源开销大。</p><h2 id="python引用计数机制"><a href="#python引用计数机制" class="headerlink" title="python引用计数机制"></a>python引用计数机制</h2><p>python的垃圾回收采用的是引用计数机制为主和分代回收机制为辅的结合机制，当对象的引用计数变为0时，对象将被销毁。</p><p>对象的引用计数+1的情况：</p><ol><li>对象被创建</li><li>对象被引用</li><li>对象被作为参数，传入到一个函数中</li><li>对象作为一个元素，存储在容器中</li></ol><p>对象的引用计数-1的情况：</p><ol><li>对象的别名被赋予新的对象</li><li>对象的别名被显式销毁</li><li>一个对象离开它的作用域</li><li>对象所在的容器被销毁，或从容器中删除对象</li></ol><h2 id="分别说明多进程和多线程的优缺点"><a href="#分别说明多进程和多线程的优缺点" class="headerlink" title="分别说明多进程和多线程的优缺点"></a>分别说明多进程和多线程的优缺点</h2><ul><li><p>多进程模式最大的优点就是稳定性高，一个子进程崩溃了，不会影响主进程和其他子进程。</p></li><li><p>多进程模式的缺点是创建进程的代价大，特别是在Windows下创建进程开销巨大，在Unix/Linux系统下，用fork调用还行。</p></li><li><p>操作系统能同时运行的进程数是有限的，在内存和CPU的限制下，如果有几千个进程同时运行，操作系统几乎难以调度。</p></li><li><p>多线程模式通常比多进程稍快一点，在Windows速度明显。</p></li><li><p>多线程模式的致命缺点就是任何一个线程挂掉都可能直接造成整个进程崩溃，因为所有线程共享进程的内存。</p></li></ul><h2 id="什么是多线程竞争"><a href="#什么是多线程竞争" class="headerlink" title="什么是多线程竞争"></a>什么是多线程竞争</h2><p>线程是非独立的，同一个进程里线程是数据共享的，当各个线程访问数据资源时会出现竞争状态即：数据几乎同步会被多个线程占用，造成数据混乱，即所谓的线程不安全</p><p>那么怎么解决多线程竞争问题？—锁</p><p>锁的好处：确保了某段关键代码（共享数据资源）只能由一个线程从头到尾完整地执行能解决多线程资源竞争下的原子操作问题。</p><p>锁的坏处：阻止了多线程并发执行，包含锁的某段代码实际上只能以单线程模式执行，效率就大大地下降了</p><p>锁的致命问题：若干子线程在系统资源竞争时，都在等待对方对某部分资源解除占用状态，结果是谁也不愿先解锁，互相干等着，程序无法执行下去，这就是死锁。</p><h2 id="PEP8-python-编码规范"><a href="#PEP8-python-编码规范" class="headerlink" title="PEP8 python 编码规范"></a>PEP8 python 编码规范</h2><p><strong>代码编排：</strong></p><ol><li>4个空格的缩进，不使用Tap，更不能混合使用Tap和空格。</li></ol><ul><li>每行最大长度79，换行可以使用反斜杠，最好使用圆括号。</li><li>类和top-level函数定义之间空两行；类中的方法定义之间空一行；函数内逻辑无关段落之间空一行；其他地方尽量不要再空行。</li></ul><p><strong>文档编排：</strong></p><ol><li>模块内容的顺序：模块说明-&gt;docstring—&gt;import—&gt;globals&amp;constants—&gt;其他定义</li></ol><ul><li>不要在一句import中多个库</li><li>如果采用from XX import XX引用库，可以省略module.</li></ul><p><strong>空格的使用：</strong></p><p>总体原则，避免不必要的空格。</p><ol><li>各种右括号前不要加空格。</li></ol><ul><li>逗号、冒号、分号前不要加空格。</li><li>函数的左括号前不要加空格。</li><li>序列的左括号前不要加空格。</li><li>操作符左右各加一个空格，不要为了对齐增加空格。</li><li>函数默认参数使用的赋值符左右省略空格。</li><li>不要将多句语句写在同一行。</li><li>if/for/while语句中，即使执行语句只有一句，也必须另起一行。</li></ul><p><strong>注释：</strong></p><ol><li>块注释，在一段代码前增加的注释, 在’#’后加一空格。</li></ol><ul><li>行注释，在一句代码后加注释, 在’#’后加一空格。</li><li>避免不必要的注释。</li></ul><p><strong>文档描述：</strong></p><ol><li>为所有的共有模块、函数、类、方法写docstrings。</li></ol><ul><li>描述使用三引号</li></ul><p><strong>命名规范：</strong></p><ol><li>模块命名尽量短小，使用全部小写的方式，可以使用下划线。</li></ol><ul><li>包命名尽量短小，使用全部小写的方式，不可以使用下划线。</li><li>类的命名使用CapWords的方式，模块内部使用的类采用_CapWords的方式。</li><li>异常命名使用CapWords+Error后缀的方式。</li><li>全局变量尽量只在模块内有效，类似C语言中的static。实现方法有两种，一是all机制，二是前缀一个下划线。</li><li>函数命名使用全部小写的方式，可以使用下划线。</li><li>常量命名使用全部大写的方式，可以使用下划线。</li><li>类的属性（方法和变量）命名使用全部小写的方式，可以使用下划线。</li><li>类的属性若与关键字名字冲突，后缀一下划线，尽量不要使用缩略等其他方式。</li><li>为避免与子类属性命名冲突，在类的一些属性前，前缀两条下划线。</li><li>类的方法第一个参数必须是self，而静态方法第一个参数必须是cls。</li></ul><h2 id="提高python运行效率的方法"><a href="#提高python运行效率的方法" class="headerlink" title="提高python运行效率的方法"></a>提高python运行效率的方法</h2><ul><li>使用dict或set查找元素</li><li>使用生成器（generator）和yield</li><li>循环之外能做的事不要放在循环内</li><li>优化多判断表达式顺序</li><li>使用join合并迭代器中的字符串</li><li>不借助中间变量交换两个变量的值</li><li>使用if is True代替if == True</li><li>使用while 1代替while True</li><li>使用级联比较x &lt; y &lt; z</li><li>multiprocessing实现并行编程</li><li>使用C扩展，如Cython</li><li>核型模块用PyPy</li></ul><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> python教程 </tag>
            
            <tag> 面试问题 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>十大经典排序算法python实现</title>
      <link href="2020/10/31/shi-da-jing-dian-pai-xu-suan-fa-python-shi-xian/"/>
      <url>2020/10/31/shi-da-jing-dian-pai-xu-suan-fa-python-shi-xian/</url>
      
        <content type="html"><![CDATA[<h2 id="性能比较"><a href="#性能比较" class="headerlink" title="性能比较"></a>性能比较</h2><table><thead><tr><th align="center">排序算法</th><th align="center">时间复杂度（平均）</th><th align="center">时间复杂度（最差）</th><th align="center">时间复杂度（最好）</th><th align="center">空间复杂度</th><th align="center">稳定性</th></tr></thead><tbody><tr><td align="center">快速排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">不稳定</td></tr><tr><td align="center">冒泡排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">选择排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">归并排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($n$)</td><td align="center">稳定</td></tr><tr><td align="center">插入排序</td><td align="center">O($n^{2}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">稳定</td></tr><tr><td align="center">希尔排序</td><td align="center">O($n^{1.3}$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">堆排序</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O($nlog_{2}{n}$)</td><td align="center">O(1)</td><td align="center">不稳定</td></tr><tr><td align="center">桶排序</td><td align="center">O($n + k$)</td><td align="center">O($n^{2}$)</td><td align="center">O($n$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr><tr><td align="center">计数排序</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr><tr><td align="center">基数排序</td><td align="center">O($n * k$)</td><td align="center">O($n * k$)</td><td align="center">O($n * k$)</td><td align="center">O($n + k$)</td><td align="center">稳定</td></tr></tbody></table><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p>原理：对于任意一个需要排序的序列，首先选择序列中的人一个数为关键数据，然后将所有比它小的数都放左边，所有比它大的数都放右边，这就完成了一次快速排序，如此递归完成所有排序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    快速排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">else</span><span class="token punctuation">:</span>        base <span class="token operator">=</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        left<span class="token punctuation">,</span> right <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        data<span class="token punctuation">.</span>remove<span class="token punctuation">(</span>base<span class="token punctuation">)</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>            <span class="token keyword">if</span> num <span class="token operator">>=</span> base<span class="token punctuation">:</span>                right<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                left<span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        <span class="token keyword">return</span> quick_sort<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>base<span class="token punctuation">]</span> <span class="token operator">+</span> quick_sort<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p>原理：遍历需要排序的序列元素，依次比较两个相邻的元素，如果他们的顺序错误就进行交换。重复遍历直到没有相邻元素需要交换，即该序列已经排序完成。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    冒泡排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p>原理：一共需要遍历n-1次，没遍历一次选择出最小的元素，完成排序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">select_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    选择排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        min_index <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">:</span>                min_index <span class="token operator">=</span> j        data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>min_index<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p>原理：先使每个子序列有序，再使子序列段间有序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    归并排序    """</span>    <span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        归并过程        """</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>  <span class="token comment" spellcheck="true"># 保存归并后的结果</span>        i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> j <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> left<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                i <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        result <span class="token operator">=</span> result <span class="token operator">+</span> left<span class="token punctuation">[</span>i<span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> right<span class="token punctuation">[</span>j<span class="token punctuation">:</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> result    <span class="token comment" spellcheck="true"># 递归过程</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    mid <span class="token operator">=</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span><span class="token punctuation">:</span>mid<span class="token punctuation">]</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">[</span>mid<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p>原理：通过构建有序序列，对未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    插入排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                 data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p>原理：整个待排序的记录序列分割成为若干子序列分别进行直接插入排序，它与插入排序的不同之处在于，它会优先比较距离较远的元素。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    希尔排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    gap <span class="token operator">=</span> <span class="token number">1</span>      <span class="token keyword">while</span> gap <span class="token operator">&lt;</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">:</span>        gap <span class="token operator">=</span> gap <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">while</span> gap <span class="token operator">>=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            j <span class="token operator">=</span> i            <span class="token keyword">while</span> j <span class="token operator">>=</span> gap <span class="token operator">and</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                j <span class="token operator">-=</span> gap        gap <span class="token operator">//=</span> <span class="token number">3</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p>原理：在堆的数据结构中，堆中的最大值总是位于根节点，把序列放入堆数据中一直维持最大堆积性质。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    堆排序    """</span>    <span class="token keyword">def</span> <span class="token function">sift_down</span><span class="token punctuation">(</span>start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        最大堆调整        """</span>        root <span class="token operator">=</span> start        <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>            child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>                <span class="token keyword">break</span>            <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                child <span class="token operator">+=</span> <span class="token number">1</span>            <span class="token keyword">if</span> data<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>                data<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>root<span class="token punctuation">]</span>                root <span class="token operator">=</span> child            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>    <span class="token comment" spellcheck="true"># 创建最大堆</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sift_down<span class="token punctuation">(</span>start<span class="token punctuation">,</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 堆排序</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> data<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> data<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sift_down<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="桶排序"><a href="#桶排序" class="headerlink" title="桶排序"></a>桶排序</h2><p>原理：桶排序是计数排序的升级版，它利用了函数的映射关系，高效与否的关键就在于这个映射函数的确定。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bucket_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">,</span> bucket_size <span class="token operator">=</span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    桶排序    默认5个桶    """</span>    max_num<span class="token punctuation">,</span> min_num <span class="token operator">=</span> max<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">,</span> min<span class="token punctuation">(</span>data<span class="token punctuation">)</span>    bucket_count <span class="token operator">=</span> <span class="token punctuation">(</span>max_num <span class="token operator">-</span> min_num<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size <span class="token operator">+</span> <span class="token number">1</span>    buckets <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>bucket_count<span class="token punctuation">)</span><span class="token punctuation">:</span>        buckets<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>        buckets<span class="token punctuation">[</span><span class="token punctuation">(</span>num <span class="token operator">-</span> min_num<span class="token punctuation">)</span> <span class="token operator">//</span> bucket_size<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>    data<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> bucket <span class="token keyword">in</span> buckets<span class="token punctuation">:</span>        insert_sort<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>        data<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p>原理：先开辟一个覆盖序列范围的数组空间，将输入的数据值转化为键存储在额外开辟的数组空间中，再依次取出。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    计数排序    需要是整数序列    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>        bucket<span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    i <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>bucket<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>            data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> j            bucket<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">1</span>            i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="基数排序"><a href="#基数排序" class="headerlink" title="基数排序"></a>基数排序</h2><p>原理：将序列所有数字统一为相同数字长度，数字较短的数前面补零。从最低位开始，依次进行一次排序，然后从低位到高位依次完成排序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">radix_sort</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    基数排序    """</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> data    radix <span class="token operator">=</span> <span class="token number">10</span>    div <span class="token operator">=</span> <span class="token number">1</span>    max_bit <span class="token operator">=</span> len<span class="token punctuation">(</span>str<span class="token punctuation">(</span>max<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    bucket <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>radix<span class="token punctuation">)</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> max_bit<span class="token punctuation">:</span>        <span class="token keyword">for</span> num <span class="token keyword">in</span> data<span class="token punctuation">:</span>            bucket<span class="token punctuation">[</span>num <span class="token operator">//</span> div <span class="token operator">%</span> radix<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>num<span class="token punctuation">)</span>        j <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> b <span class="token keyword">in</span> bucket<span class="token punctuation">:</span>            <span class="token keyword">while</span> b<span class="token punctuation">:</span>                data<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>                j <span class="token operator">+=</span> <span class="token number">1</span>        div <span class="token operator">*=</span> <span class="token number">10</span>        max_bit <span class="token operator">-=</span> <span class="token number">1</span>    <span class="token keyword">return</span> data<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="测试结果"><a href="#测试结果" class="headerlink" title="测试结果"></a>测试结果</h2><pre class="line-numbers language-python"><code class="language-python">data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">6</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">9</span><span class="token punctuation">,</span><span class="token number">17</span><span class="token punctuation">,</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"input data &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span>quick_ret <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 快速排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"quick_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>quick_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>bubble_ret <span class="token operator">=</span> bubble_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 冒泡排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bubble_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>bubble_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>select_ret <span class="token operator">=</span> select_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 选择排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"select_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>select_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>merge_ret <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 归并排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"merge_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>merge_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>insert_ret <span class="token operator">=</span> insert_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 插入排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"insert_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>insert_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>shell_ret <span class="token operator">=</span> shell_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 希尔排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"shell_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>shell_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>heap_ret <span class="token operator">=</span> heap_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 堆排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"heap_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>heap_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>bucket_ret <span class="token operator">=</span> bucket_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 桶排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"bucket_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>bucket_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>count_ret <span class="token operator">=</span> count_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 计数排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"count_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>count_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>radix_ret <span class="token operator">=</span> radix_sort<span class="token punctuation">(</span>data<span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 基数排序</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"radix_ret &amp;#123;&amp;#125;"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>radix_ret<span class="token punctuation">)</span><span class="token punctuation">)</span>input data <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">]</span>quick_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>bubble_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>select_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>merge_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>insert_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>shell_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>heap_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>bucket_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>count_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span>radix_ret <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 排序算法 </tag>
            
            <tag> 算法 </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>图片风格迁移</title>
      <link href="2020/10/31/tu-pian-feng-ge-qian-yi/"/>
      <url>2020/10/31/tu-pian-feng-ge-qian-yi/</url>
      
        <content type="html"><![CDATA[<h2 id="基本依据"><a href="#基本依据" class="headerlink" title="基本依据"></a>基本依据</h2><p>基本原理：</p><ul><li>两张图像经过预训练好的分类网络，若提取出的高维特征之间的(欧氏)距离越小，则这两张图像内容越相似</li><li>两张图像经过预训练好的分类网络，若提取出的低维特征在数值上基本相等，则这两张图像越相似，换句话说，两张图像相似等价于二者特征的Gram矩阵具有较小的弗罗贝尼乌斯范数。</li></ul><p><img src="neural_style.jpeg"></p><h2 id="VGGNet"><a href="#VGGNet" class="headerlink" title="VGGNet"></a>VGGNet</h2><p>VGGNet是牛津大学计算机视觉组（Visual Geometry Group）和Google DeepMind公司的研究员一起在2014年研发出的新深度卷积神经网络，并取得了ILSVRC2014比赛分类项目的第二名（第一名是GoogLeNet，也是同年提出的）和定位项目的第一名。VGGNet探索了卷积神经网络的深度与其性能之间的关系，成功地构筑了16~19层深的卷积神经网络，证明了增加网络的深度能够在一定程度上影响网络最终的性能，使错误率大幅下降，同时拓展性又很强，迁移到其它图片数据上的泛化性也非常好。</p><p>VGGNet是AlexNet（2012）的加深版，都是由卷积层、全连接层两大部分构成。VGGNet常用的结构有16层和19层，下面给出VGGNet16结构：</p><p><img src="vggnet.png"></p><p><img src="vgg16_2.png"></p><p>VGGNet结构说明：</p><ul><li>输入224x224x3的图片，经64个3x3的卷积核作两次卷积+ReLU，卷积后的尺寸变为224x224x64</li><li>作max pooling（最大化池化），池化单元尺寸为2x2（效果为图像尺寸减半），池化后的尺寸变为112x112x64</li><li>经128个3x3的卷积核作两次卷积+ReLU，尺寸变为112x112x128</li><li>作2x2的max pooling池化，尺寸变为56x56x128</li><li>经256个3x3的卷积核作三次卷积+ReLU，尺寸变为56x56x256</li><li>作2x2的max pooling池化，尺寸变为28x28x256</li><li>经512个3x3的卷积核作三次卷积+ReLU，尺寸变为28x28x512</li><li>作2x2的max pooling池化，尺寸变为14x14x512</li><li>经512个3x3的卷积核作三次卷积+ReLU，尺寸变为14x14x512</li><li>作2x2的max pooling池化，尺寸变为7x7x512</li><li>与两层1x1x4096，一层1x1x1000进行全连接+ReLU（共三层）</li><li>通过softmax输出1000个预测结果</li></ul><p>简单而言，VGGNet的本意是输入图像、提取特征并输出图像类别，前面的卷积层是从图像中提取特征，后面的全连接层是把图片特征转换为概率，其中VGGNet中的浅层（如conv1_1, conv1_2）提取的特征主要是像检测点、线、亮度此类比较简单的特征，中间层（如conv5_1, conv5_2, conv5_3）提取的特征主要是像有无人脸或某种特定物体的复杂特征。</p><h2 id="梯度下降"><a href="#梯度下降" class="headerlink" title="梯度下降"></a>梯度下降</h2><p>梯度下降法（英语：Gradient descent）是一个一阶最优化算法，通常也称为最速下降法。 要使用梯度下降法找到一个函数的局部极小值，必须向函数上当前点对应梯度（或者是近似梯度）的反方向的规定步长距离点进行迭代搜索。如果相反地向梯度正方向迭代进行搜索，则会接近函数的局部极大值点；这个过程则被称为梯度上升法。</p><p><img src="Gradient_ascent_contour.png"></p><p>梯度下降法的缺点包括：</p><ul><li>靠近极小值时速度减慢。</li><li>直线搜索可能会产生问题。</li><li>可能会“之字型”地下降</li></ul><h2 id="Gram-矩阵"><a href="#Gram-矩阵" class="headerlink" title="Gram 矩阵"></a>Gram 矩阵</h2><p>Gram矩阵是一组向量的内积的对称矩阵，例如，向量组$\overrightarrow{x_{1}},\overrightarrow{x_{2}},\cdots,\overrightarrow{x_{n}}$的Gram矩阵为</p><p>$$ \begin{bmatrix}<br>(\overrightarrow{x_{1}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{1}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{1}}, \overrightarrow{x_{n}}) \<br>(\overrightarrow{x_{2}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{2}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{2}}, \overrightarrow{x_{n}}) \<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots \<br>(\overrightarrow{x_{n}}, \overrightarrow{x_{1}}) &amp; (\overrightarrow{x_{n}}, \overrightarrow{x_{2}}) &amp; \cdots &amp; (\overrightarrow{x_{n}}, \overrightarrow{x_{n}}) \<br>\end{bmatrix} $$</p><p>此处的内积通常为欧几里得空间中的标准内积，$(\overrightarrow{x_{i}}, \overrightarrow{x_{j}}) = \overrightarrow{x_{i}}^{T}\overrightarrow{x_{j}}$</p><p>设卷积层的输出为$F_{ij}^{l}$，则卷积特征对应的Gram矩阵为</p><p>$$D_{ij}^{l} = \sum_{k}F_{ik}^{l}F_{jk}^{l}$$</p><p>设在第$l$层，卷积特征的通道数为$N_{l}$，卷积第高、宽乘积为$M_{1}$，则$F_{ij}^{l}$满足$1 \leq i \leq N_{l}, 1 \leq j \leq M_{l}$，G就是向量组$\overrightarrow{F_{1}^{l}},\overrightarrow{F_{2}^{l}},\cdots,\overrightarrow{F_{N_{l}}^{l}}$的Gram矩阵，其中$F_{i}^{l} = (F_{i1}^{l}, F_{i2}^{l}, \dots, F_{iM_{l}}^{l})$</p><h2 id="损失定义"><a href="#损失定义" class="headerlink" title="损失定义"></a>损失定义</h2><h3 id="内容损失"><a href="#内容损失" class="headerlink" title="内容损失"></a>内容损失</h3><p>风格迁移就是使用卷积层的中间特征还原出对应这种特征的原始图像，如下图所示，先提取一副原始图像，经过VGGNet计算后得到各个卷积层的特征。然后根据这些特征，还原出对应这种特征的原始图像。从左到又分别是conv1_2，conv2_2，conv3_2，conv4_2，conv5_2。</p><p><img src="vgg_layer.png"></p><p>浅层的还原效果比较好，卷积特征基本保留了原始图像中的形状、位置、颜色和纹理等信息，深层对应的还原图像丢失了部分颜色和纹理信息，但大体保留了原始图像中的形状和位置。</p><p>还原图像采用梯度下降法。设原始图像为$\overrightarrow{p}$，期望还原（自动生成）的图像为$\overrightarrow{x}$，使用$l$层卷积，则将原始特征$\overrightarrow{p}$在第$l$层的卷积特征定义为$P_{ij}^{l}$。其中$i$表示卷积的第$i$个通道，$j$表示卷积的第$j$个位置，通常卷积有宽、高、通道三纬度，此处不考虑宽高，只考虑位置，相当于把图片扁平化了。如一个$10 \times 10 \times 32$ 的卷积特征，对应$1 \leq i \leq 32, 1 \leq j \leq 100$。同样的，生成图像$\overrightarrow{x}$在$l$层卷积特征为$F_{ij}^{l}$。</p><p>于是内容损失可以定义为：</p><p>$$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l) = \frac{1}{2}\sum_{i,j}(F_{ij}^{l} - P_{ij}^{l})^{2}$$</p><p>内容损失描述了原始图像$\overrightarrow{p}$和生成图像$\overrightarrow{x}$在内容上的“差异”，$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l)$越小，说明它们的内容越接近，反之亦然。</p><p>先用原始图像$\overrightarrow{p}$计算出卷积特征$P_{ij}^{l}$，同时随机初始化$\overrightarrow{x}$，然后以内容损失$L_{content}(\overrightarrow{p}, \overrightarrow{x}, l)$为优化目标，通过梯度下降法逐步改变$\overrightarrow{x}$，经过一定步数后，得到的$\overrightarrow{x}$就是喜欢还原的图像，在该过程中，内容损失会不断下降（具体下降到什么地方有专门的正则化方法）。</p><h3 id="风格损失"><a href="#风格损失" class="headerlink" title="风格损失"></a>风格损失</h3><p>除了内容，图像的风格怎么表示呢，一种方法就是使用图像的Gram矩阵。</p><p>还是假设某一层（$l$层）输入的卷积特征为$10 \times 10 \times 32$，即一个宽、高均为10，通道数为32的张量，$F_{1}^{l}$表示第一个通道的特征，它是一个100维第向量，$F_{2}^{l}$表示第二个通道的特征，它也是一个100维第向量，它对应第Gram矩阵G为</p><p>$$ \begin{bmatrix}<br>(\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{1}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>(\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{2}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>\cdots &amp; \cdots &amp; \cdots &amp; \cdots \<br>(\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{1}^{l}}) &amp; (\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{2}^{l}}) &amp; \cdots &amp; (\overrightarrow{F_{32}^{l}})^{T}(\overrightarrow{F_{32}^{l}}) \<br>\end{bmatrix} $$</p><p>这样的Gram矩阵就可以在一定程度上反映原始图片第风格，仿照内容损失函数，可以定义风格损失函数。</p><p>设原始图像为$\overrightarrow{a}$，要还原第风格图像是$\overrightarrow{x}$，先计算出原始图像某一层卷积第Gram矩阵$A^{l}$，要还原的图像$\overrightarrow{x}$经过同样计算得到对应卷积的Gram矩阵$X^{l}$，风格损失定义为</p><p>$$L_{style}(\overrightarrow{a}, \overrightarrow{x}, l) = \frac{1}{4 N_{l}^{2} M_{l}^{2}}\sum_{i,j}(A_{ij}^{l} - X_{ij}^{l})^{2}$$</p><p>在实际应用中，常使用多层而非一层的风格损失，多层风格损失是单层风格损失的加权累加，即</p><p>$$L_{style}(\overrightarrow{a}, \overrightarrow{x}) = \sum_{l}w_{l}L_{style}(\overrightarrow{a}, \overrightarrow{x}, l)$$</p><p>其中$w_{l}$为$l$层的权重。</p><p>于是我们就能得到这样的风格图</p><p><img src="style.png"></p><p>从左到又分别依据以下还原</p><ul><li>conv1_1</li><li>conv1_1, conv2_1</li><li>conv1_1, conv2_1，conv3_1</li><li>conv1_1, conv2_1，conv3_1，conv4_1</li><li>conv1_1, conv2_1，conv3_1，conv4_1，conv5_1</li></ul><p>和内容还原结果类似，浅层还原的风格图像纹理尺度较小，只保留了颜色和局部的纹理，组合浅层、深层还原出的风格图像更加真实且接近于原图片。</p><h2 id="风格迁移"><a href="#风格迁移" class="headerlink" title="风格迁移"></a>风格迁移</h2><p>现在有了内容损失和风格损失，可以分别还原图像内容和图像风格，那现在就可以将内容损失和风格损失组合起来，在还原一张图像的同时还原另一张图像的风格，这就是图像风格迁移。</p><p>设原始内容图像$\overrightarrow{p}$，原始的风格图像为$\overrightarrow{a}$，待生成的图像为$\overrightarrow{x}$，希望生成的$\overrightarrow{x}$保持$\overrightarrow{p}$的内容，同时由保留$\overrightarrow{a}$的风格，因此组合$\overrightarrow{p}$的内容损失和$\overrightarrow{a}$的风格损失，定义总的损失为</p><p>$$L_{total}(\overrightarrow{p}, \overrightarrow{a}, \overrightarrow{x}) = \alpha L_{content}(\overrightarrow{p}, \overrightarrow{x}) + \beta L_{style}(\overrightarrow{a}, \overrightarrow{x})$$</p><p>其中$\alpha, \beta$是平衡权重的超参数，使用总的损失函数可以组合$\overrightarrow{p}$的内容和$\overrightarrow{a}$的风格，这就实现了图像风格迁移。部分迁移效果如下（原始风格迁移）</p><p><img src="style_demo.png"></p><h2 id="风格迁移优化"><a href="#风格迁移优化" class="headerlink" title="风格迁移优化"></a>风格迁移优化</h2><h3 id="原始风格迁移"><a href="#原始风格迁移" class="headerlink" title="原始风格迁移"></a>原始风格迁移</h3><p>基于前面定义的损失就能搭建原始的风格迁移模型，但是该风格迁移模型运行非常慢，CPU上生成单张图片需要十几分钟到几个小时不等，即使在GPU上也需要数分钟。慢的原因是用总损失$L_{total}(\overrightarrow{p}, \overrightarrow{a}, \overrightarrow{x})$来优化图片$\overrightarrow{x}$，意味着每生成一张图片都需要数百步的梯度下降迭代，所以耗时就上来了。</p><p>原始风格迁移把优化$\overrightarrow{x}$定义成了训练的过程，训练是非常耗时的，一种提升速度的方法就是把这个过程变成执行的过程。</p><p>论文地址： <a href="https://arxiv.org/abs/1508.06576">A Neural Algorithm of Artistic Style</a></p><h3 id="快速风格迁移"><a href="#快速风格迁移" class="headerlink" title="快速风格迁移"></a>快速风格迁移</h3><p>快速风格迁移不使用优化的方法来逐步迭代生成$\overrightarrow{x}$，而是使用一个神经网络来直接生成$\overrightarrow{x}$，网络结构如下</p><p><img src="fast_style.png"></p><p>整个系统由两部分组成，左边是图像生成网络，右边是图像损失网络。损失网络实际上就是VGGNet，这与原始的风格迁移一致。利用损失网络来定义内容损失和风格损失，然后用这个损失来训练生成网络。</p><p>图像生成网络的目的就是生成某一种风格的图像，输入是一个图像，输出还是一张图像，此时图片生成就变成了一个执行神经网络的过程，所以速度就变很快，CPU上几秒钟，GPU上一般低于1秒。</p><p>论文地址：<a href="https://arxiv.org/abs/1603.08155">Perceptual Losses for Real-Time Style Transfer and Super-Resolution</a></p><h2 id="实践"><a href="#实践" class="headerlink" title="实践"></a>实践</h2><h3 id="效果图"><a href="#效果图" class="headerlink" title="效果图"></a>效果图</h3><p><img src="ret_1.png"></p><p><img src="ret_2.png"></p><p><img src="ret_3.png"></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> ML&amp;DL </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 图片视觉 </tag>
            
            <tag> 风格迁移 </tag>
            
            <tag> 图像处理 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>像读故事一样了解PySpark</title>
      <link href="2020/10/31/xiang-du-gu-shi-yi-yang-liao-jie-pyspark/"/>
      <url>2020/10/31/xiang-du-gu-shi-yi-yang-liao-jie-pyspark/</url>
      
        <content type="html"><![CDATA[<h2 id="初识spark"><a href="#初识spark" class="headerlink" title="初识spark"></a>初识spark</h2><p>一个人的心算能力是有限的，所以在很多年前，人们就开始了在各种东西上进行演算。最开始，在沙摊上，后来开始在布上，再后来开始在纸上，再后来有了计算器，再往后有了计算机。</p><p>在计算机上进行演算的确是很快，而且随着摩尔定律的一步步被验证（以后还这样下去可能有点够呛了），计算机处理效率越来越高。</p><p>虽然计算机是进步了，可是我们人类产生数据的速度简直是超乎想象的快，现在很多企业数据在单台计算机上已经难以处理（当然并不是说单台计算机处理数据的价值就比较低，需要分场景）。</p><p>为了可以处理更多的数据，人们把很多机器链接起来，形成了分布式集群，在这些集群上存储数据是可以，那么如何高效的处理这些数据，于是Apache Apark出现了，它是一个开源、强大的分布式查询和处理引擎，再此之前，有MapReduce也可以做分布式数据处理，但是spark更强。</p><p>spark酷毙的地方是除了它的快（内存中比Hadoop快100倍，读磁盘也快10倍），还有它惊人的灵活性。</p><p>在数据处理的时候，它支持被每个数据分析师烂熟于心的SQL，支持看惯关系型数据库的DataFrame，支持关联挖掘的GraphFrames，支持机器学习的ML，甚至在深度学习上都有TensorFrames。</p><p>在使用语言上，它基于Java，原生代码是Scala，但是也支持Python，SQL，R，可以说对程序员的照顾是发自内心的。除了这些，spark还支持流式计算Streaming，也就是说不用等到数据全部完成落到分布式集群上了再开始计算，在线实时采集一会儿就可以。</p><p>简单看一下它的结构</p><p><img src="spark_ecosystem.png"></p><p>多说一句，在分布式集群上执行数据处理，那必然会有主节点和多个工作节点，而spark通过有向无环（DAG）来组织这些依赖关系。</p><p>既然是处理数据，那么spark的数据是什么样的呢？答案是RDD。RDD中文叫弹性分布式数据集，是不可变Java虚拟机（JVM）对象的分布式集合，数据就是存储在这些JVM中的，这里的弹性，也说明了spark依赖数据的灵活性。</p><p>要做到快，就尽可能的把串行搞成并行，而RDD也正是这么做的。RDD包括两两组并行操作：</p><ul><li>转换，反馈指向新的RDD指针</li><li>动作，运行计算</li></ul><p>而且，spark还很“懒”，在没有收到具体的动作指令前，它不会做任何的转换，只有动作执行了而且需要有结果反馈时，才会计算，这种延迟计算可以让它有针对性的查询优化。也算“懒”得很有理由（对于熟悉深度学习的朋友，这个tensorflow的计算图差不多）。</p><p>为了对更多的程序员友好，光有RDD当然不够，毕竟RDD也不能支持那么多语言，所以RDD基础上衍生出了对Python、Pandas、R更友好的DataFrame，这就和关系型数据库非常类似了，这也是spark被很多数据工程师广泛应用的重要原因。</p><p>除了提高支持更多语言灵活性，在速度上spark也追求更快，所有有了Dataset，不过有点遗憾，Dataset由于设计的缘故，特别不适合做交互式分析，特别是Python，所以现在也不支持Python。</p><p>他们之间在spark 2.0上关系为</p><p><img src="history_of_spark.png"></p><p>RDD是spark原生的数据结构，快是应该的，可是既然说了灵活，也不能因为转换到SQL，Python上就慢了，不妨看看慢的原因，主要就是python这类新的API与RDD之间的通信拖慢了计算速度，所以spark有了Catalyst优化器，他将计算过程进行逻辑优化，极大的提高了计算速度，优化过程大概长这样。</p><p><img src="Catalyst.png"></p><h2 id="spark的核心——RDD"><a href="#spark的核心——RDD" class="headerlink" title="spark的核心——RDD"></a>spark的核心——RDD</h2><p>前面说了spark的快主要是因为RDD的并行操作，那这种并行操作是个什么概念了，我们来举个例子。</p><ol><li>统计出某一列中不同值出现的次数</li><li>选出以字母A开开头的</li><li>输出结果</li></ol><p>spark在计算的时候会先算2，再算1，最后算3，而不是1，2，3依次算，如果一个数据有1000万行，而A的只有10万行，这种计算速度的提升不言而喻了。</p><p>知道了并行的好处，现在开始创建RDD。创建方式有两种，一种的自己写，一种是读外部的。</p><ul><li>自己写通过.parallelize()，这里面的数据结构非常丰富，像元组、字典、列表啥的都可以</li><li>读外部的通过.textFile()，指定读取的文件地址就可以，还可以顺便定个分区</li></ul><p>前面我们说过，spark并行的两个东西分别是转换和动作，建好数据，现在就可以转换了。</p><p>RDD本身是一行一行的数据，所以自然首当其冲会有转换行的需求，可以使用.map()。</p><p>这种转换以后还是一行一行的，可是如果想转换到同一行呢，那就弄成水平的，用.flatMap()。</p><p>行转换完了，有时候我们也不需要全部的元素，选择条件就出现了，用.filter()，这就和SQL里面的where非常像了。</p><p>同样，去重也和SQL中的一样，用.distinct()，关联的时候用.join()，.leftOuterJoin()。当比join更严格，只要完全相同的时候，那就用.intersection()。</p><p>对于有明确条件的可以用filter，只想随机选择的时候就用.sample()。</p><p>spark是基于分布式集群的，那必定会涉及到分区，前面创建RDD的时候也会指定分区，那如果要改变分区了，可以用.repartition()。</p><p>说完转换，下面说动作。</p><p>对大量数据而言，我们最常用的就是看下数据大概长什么样。</p><p>比如反馈前面几行啥的，可以用.take()。</p><p>如果实在要看全部数据，那就用.collect()，不过这最好慎用。</p><p>当然，查看数据一般不能看完，如果想数一数有多少行，可以用.count()。</p><p>在转换的时候对行转换有map，那使用指定的方法呢，用.reduce()，这个是不是感觉用hadoop的mapreduce有点说不出的感觉了。</p><p>reduce是用一个函数，如果用相同的方法迭代的处理每个元素呢，那就用.foreach()。</p><p>最后，我们读了数据，最后也要记得把处理过后的数据保存下来，可以用.saveAsTextFile()。</p><h2 id="pyspark的核心——DataFrame"><a href="#pyspark的核心——DataFrame" class="headerlink" title="pyspark的核心——DataFrame"></a>pyspark的核心——DataFrame</h2><p>如前面所说，DataFrame和Catalyst优化器的意义在于非优化的RDD查询时提升PySpark查询的性能，这里提升的性能主要是Python与JVM之间的通信开销。</p><p>要分析DataFrame数据，首先创建DataFrame数据，创建方法和RDD相同，不过需要经过一次到DataFrame的转化，使用spark.raed.json()。前面有说到spark是惰性的，所以只read了还不行，实际使用的时候可以转换为临时表，使用.createOrReplaceTempView()。</p><p>从RDD转换到DataFrame，共计有两种方式。</p><ul><li>第一种是直接把json格式的数据给Dataframe，让spark自动推断是什么类型，这也叫反射推断模式。</li><li>另一种是定义StructTtpe定义schema，在CreateDataFrame的时候指定schema，这种叫编程指定模式。</li></ul><p>DataFrame创建完成后，可以使用python进行高效的查询，查询方法主要有两大类。</p><ul><li>使用DataFrame API指定，比如.show()和.head()都可以查看前几行，.count()可以统计行数，而且直接支持select操作。</li><li>另一种方式是用过SQL查询，使用spark.sql()。这里正常的SQL语句都可以，非常方便。</li></ul><h2 id="数据建模准备"><a href="#数据建模准备" class="headerlink" title="数据建模准备"></a>数据建模准备</h2><p>理解完基础数据RDD和DataFrame后，现在开始准备数据建模。</p><p>知道数据建模或机器学习的朋友应该都知道，在数据建模时，基本上80%的工作都是整理清洗处理数据。</p><p>准备数据无外乎就是让实际数据变得更可用，比如去重，缺失值处理，异常数据等，为了做到这些，PySpark提供了比较丰富的方法。</p><p>首先看重复数据，为了检测到重复数据，可以可用常用的.distinct()，检测到了，使用.dropDuplicates()可以删除重复项，这里可以增加subset参数指定特定的列。</p><p>对于缺失数据，处理缺失值最简单的方法就是益处，这和去除数据的方法一样，但是直接移除可能会对数据集的可用性带来比较大的影响。所以通常情况下，我们会采用稍微折中一些的方式处理缺失值。</p><ul><li>比如，当数据是离散布尔型时或已经是分类的，我们可以添加新列——Missing，并将其转化为一个分类变量。</li><li>如果数据是顺序类或数值类的，则可以使用描述性统计指标进行填充，如均值、分位数、众数等。</li></ul><p>如果是缺失值比较少，可以使用.dropna()删除，如果缺失值比较多就需要使用上面的方法填充，填充的方式是.fillna()，该方法会将所有缺失值都是用该值填充，以平均值填充为例，需要先计算平均值，然后将平均值传递给.fillna()方法。</p><p>除了缺失值，还有一个对原数据会产生较大影响的还有离群值，离群值可以看作是一种特殊的离群值，填充方法都是相同的，不过这种离群值怎么检测出来呢？</p><p>常用于检测离群值的方法为四分位法（Q1 - 1.5IQR, Q3 + 1.5IQR），这个方法对于经常做数据分析的朋友来说应该是非常熟悉。在PySpark中使用.approxQuantile()方法可以或得分位数，获取后就可以计算IQR。</p><p>为了快速了解数据，我们可以打印前面几行查看数据内容，比如前面所说的take，head和show，但是有时候除了数据本身，我们还需要看数据每个列的类型，就可以使用.printSchema()，进一步为了描述数据的描述性统计指标，可以使用.describe()。如果想使用更多的统计指标，如峰度、偏度等，可以使用agg函数指定。</p><p>除了单列特征的统计性指标，我们还会经常描述两个特征之间相关性，PySpark同样提供了相应的方法，为.corr()，这里是Pearson相关系数。</p><p>除了直接的指标外，要了解数据，通过图像也是一个非常好的方式，特别是直方图和散点图，但是对于大数据来说，绘图是一件不太理智的行为，这里就不说了。</p><h2 id="机器学习模型的福音——ML"><a href="#机器学习模型的福音——ML" class="headerlink" title="机器学习模型的福音——ML"></a>机器学习模型的福音——ML</h2><p>ML是支持DataFrame的一个机器学习库，对于RDD，有MLlib支持（现在并未被积极维护）。对于一个机器学习模型而言，无外乎就是处理数据、建立模型，不过在spark惰性计算的条件下，ML的使用和python的一般使用方法略有不同。</p><p>PySpark将ML建模分为了三个部分，分别是转换器、评估器和管道，直观来说，转换器就是处理数据的过程，评估器就是建模的过程，管道则是整个建模的过程。</p><p>从高层次看，当用转换器的抽象类派生时，每个新的转换器需要实现.transfrom()方法，该方法需要传递一个待被转换的DataFrame。下面简单列一些转换器及介绍。</p><ul><li>Binarizer: 根据指定的阈值将连续变量转换为对应的二进制值</li><li>Bucketizer: 根据阈值列别将连续变量转换为多项式</li><li>ChiSqSelector: 只用卡方（Chi-Square）进行参数特征选择</li><li>CountVectorizer: 用于文本标记</li><li>DCT: 离散余弦变换取实数值向量，并返回不同长度的向量，但余弦函数只和在不同频率下震荡</li><li>ElementwiseProduct: 返回传入该方法方向量和另一个传入参数scaling Vec向量的乘积</li><li>HashintTF: 返回一个带有计数的有预定长度的hash转换向量</li><li>IDF: 逆向逆向文件频率</li><li>IndexToString: 使用StringIndexerModel对象中的编码将字符串索引反转到原始值</li><li>MaxAbsScaler: 数据调整到[-1.0, 1.0]范围内</li><li>MinMaxScaler: 数据调整到[0.0, 1.0]范围内</li><li>NGram: 返回结果包含一些列n-gram</li><li>Normalizer: 是用p范数将数据缩放为单位范数（默认为L2范数）</li><li>OneHotEncoder: 分类列编码成二进制向量</li><li>PCA: 主成分分析数据降维</li><li>PolynomialExpansion: 向量的多项式展开</li><li>QuantileDiscretizer: 与Bucketizer类似，不过传递的是一个numBuckets，计算数据的近似分位数进行分割</li><li>RegexTokenizer: 使用正则表达式对字符串进行分词</li><li>RFormula: 使用公式生成新列</li><li>SQLTransformer: 使用SQL生成新列</li><li>StandardScaler: 标准化（均值0，标准查1）</li><li>StopWordsRemover: 删除文本中的停用词</li><li>StringIndexer: 生成一个索引向量</li><li>Tokenizer: 以空格为分割词进行分词</li><li>VectorAssembler: 多个数字列合并为一列向量</li><li>VectorIndexer: 为类别列生成索引向量</li><li>VectorSlicer: 给定一个索引列表，其从特征向量只能够提取值</li><li>Word2Vec: 将字符串转换为{string, vector}格式</li></ul><p>转换器是数据的加工过程，评估器则是建模的过程，可以被视为需要评估的统计模型，对观测的对象做预测和分类。</p><p>常用的评估器有分类、回归和聚类。ML中一共提供了7中分类模型，7中回归模型和4中聚类模型。</p><p>分类模型有：</p><ul><li>LogisticRegression: 逻辑回归</li><li>DecisionTreeClassifier: 决策树</li><li>GBTClassifier: 梯度提升树</li><li>RandomForestClassifier: 随机森林</li><li>NaiveBayes: 朴素贝叶斯</li><li>MultilayerPerceptronClassifier: 多层感知器</li><li>OneVsRest: 将多分类问题简化为二分类问题</li></ul><p>回归模型有：</p><ul><li>AFTSurvivalRegression: 生存回归，适用于明确的阶段性过程建模</li><li>DecisionTreeRegression: 决策树回归</li><li>GBTRegression: 梯度提升树回归</li><li>GeneralizedLinearRegression: 广义线性回归</li><li>IsotonicRegression: 保序回归</li><li>LinearRegression: 线性回归</li><li>RandomForestRegression: 随机森林回归</li></ul><p>聚类模型有：</p><ul><li>BisectingKMeans: 二分k均值算法</li><li>KMeans: k均值算法</li><li>GaussianMixture: 高斯混合模型</li><li>LDA: 隐含狄利克雷分布模型</li></ul><p>PySpark ML 中的管道用来表示从转换到评估的端到端的过程。一个管道可以被认为是一系列不同阶段组成，通常情况下，前一阶段的输出会成为下一阶段的输入。</p><h2 id="大数据上的深度学习——TensorFrames"><a href="#大数据上的深度学习——TensorFrames" class="headerlink" title="大数据上的深度学习——TensorFrames"></a>大数据上的深度学习——TensorFrames</h2><p>TensorFrames是利用TensorFlow来操作Spark DataFrame，其大概结构为：</p><p><img src="tensorframes.png"></p><p>TensorFrames可以将DataFrame作为输入应用到TensorFlow计算图中，同时还允许将TensorFlow计算图输出返回到DataFrame中进行下一步到Spark处理。</p><p>TensorFrames当前在工业界生产环境中未有比较典型的应用，毕竟tensorflow自身提供了更友好的分布式学习架构。这里简单说两句深度学习。</p><p>深度学习是机器学习的一部分，其主要包含三个层次结构，分别是输入层、隐藏层和输出层。每个层由一个或多个具有连接的节点组成，输入层被动接受信息，隐藏层和输出层主动修改数据。深度学习相比传统机器学习，可以做非常复杂的特征工程，让神经网络中的不同神经元自动去学习输入数据的特征结构。</p><h2 id="结构化图数据——GraphFrames"><a href="#结构化图数据——GraphFrames" class="headerlink" title="结构化图数据——GraphFrames"></a>结构化图数据——GraphFrames</h2><p>除了前面我们熟知的机器学习与深度学习，spark还有一个亮点是支持图结构数据的相关运算，图是我们生活中非常普遍的数据结构，比如人与人之间的社交关系，人与商品之间的消费关系，商品与地址的物流关系等等都是图结构。</p><p>而GraphFrames就是利用DataFrame来进行图计算的利器，图中的点和边由DataFrame表示，允许存储每个节点和边的任意数据，这里有必要说一下GraphFrames与GraphX的关键性区别。</p><ul><li>GraphFrames利用了DataFrame API的性能优化和简单性</li><li>GraphFrames可以使用Python、Java和Scala访问，但是GraphX只能使用Scala访问</li></ul><p>GraphFrame构建图形时需要对点和边对命名做一些特殊处理。</p><ul><li>表示节点的列需要id的名称</li><li>表示边的列需要一个起点（src）和一个终点（dst）</li></ul><p>在查询过程中，可以使用.edges.filter()选择边，通过degree可以查询图中节点的度，并且还有inDegree和outDegree。</p><p>说到图，不得不说一下Google Search Engine中的PageRank。在越是重要的网站接收到的其他网站的链接就越多的假设下，其工作原理是对连接页面的数量和质量进行计数，从而估计该页面的重要性。GraphFrames中已经包含了PageRank的API，可以使用.PageRank(resetProbability, maxIter)，其中resetProbability表示复位到随机节点的概率，maxIter表示最大迭代次数。</p><h2 id="结构化流——Spark-Streaming"><a href="#结构化流——Spark-Streaming" class="headerlink" title="结构化流——Spark Streaming"></a>结构化流——Spark Streaming</h2><p>Spark Streaming是一种可扩展、容错的数据流系统，它采用RDD的批量处理模式并加快处理速度，它的工作流大致如下：</p><p><img src="spark_streaming.png"></p><p>Spark Streaming接收输入数据流，并在内部将数据流分为多个较小的batch，Spark引擎将这些输入数据的batch处理后，输出被处理过的batch结果集。</p><p>当前Spark Streaming已经支持流非常多的组建，比较常用的有：Kafka，Flume，HDFS/S3，Kinesis和Twitter等。</p><p>结成了这么多组建，适应的应用场景也很刚需，Spark Streaming常用场景有：</p><ul><li>流ETL：将数据推送到下游系统之前进行持续的清洗和聚合</li><li>粗发器：实时检测行为和异常事件，及时触发下游动作</li><li>数据浓缩：将实时数据与其他数据集连接，进行更丰富的分析</li><li>复杂会话和持续学习：持续分析关联数据，以更新机器学习模型</li></ul><p>在了解完具体的应用场景后，最后来了解一下数据流的工作流程，大致工作流程如下图所示：</p><p><img src="sparkdriver.png"></p><ol><li>当Spark Streaming上下文启动时，驱动进程将对executor执行长时间运行的任务</li><li>executor中的Receiver从Streaming源接收数据流，Receiver将输入的数据流分为多个数据块并将这些块保留在内存中</li><li>为流避免丢失，这些块会被复制到另一个executor中</li><li>块ID信息被传送到driver上的Block Management Master。</li><li>对于在Spark Streaming Context内配置的批次间隔，驱动程序将启动Spark任务来处理这些数据，然后被持久化到任意数据的目标数据存储中，比如云存储，关系数据库和NoSQL。</li></ol><h2 id="打包spark——spark-submit"><a href="#打包spark——spark-submit" class="headerlink" title="打包spark——spark-submit"></a>打包spark——spark-submit</h2><p>描述性分析数据的时候可以在jupyter等交互式分析界面完成，但是当需要同时运行一堆程序时，就需要对应用程序打包，spark-submit就提供这样一个API，通过配置一些参数就可以将一堆程序跑起来，这些参数有：</p><ul><li>–master: 设置主节点URL的参数，支持的语法有<ul><li>local: 执行本地机器的代码</li><li>spark://host:port : Spark单机集群</li><li>mesos://host:port : 部署在Mesos上的Spark集群</li><li>yarn: 从运行Yarn的头节点提交作业</li></ul></li><li>–deploy-model: 是否在本地启动Spark驱动程序，或在集群内的其中一台机器上启动</li><li>–name: 应用程序名称</li><li>–py-files: .py、.egg或.zip的Python应用程序，这些文件会被交付给每一个执行器</li><li>–files: 以逗号分割的文件列表</li><li>–conf: 应用程序的配置（spar应用程序配置优先级SparkContext &gt; spark-submit &gt; spark-defaults.conf）</li><li>–properties-file: 配置文件，与spark-defaults.conf相似</li><li>–driver-memory: 在驱动程序上分配多少的内存</li><li>–executor-memory: 每个执行器上分配的内存</li><li>–help: 帮助信息</li><li>–verbose: 打印附加调试信息</li><li>–version: 版本信息</li><li>–driver-cores: 驱动程序内核数量（仅在单机或Yarn上可用）</li><li>–queue: 在Yarn上运行的队列（仅在Yarn上可用）</li><li>–num-executors: 指定执行器数量（仅在Yarn上可用）</li><li>–supervise: 当驱动程序丢失或失败的时候，重启该驱动（仅在单机或Mesos上可用）</li><li>–kill: 用于杀死任务，赋予submission_id</li><li>–status: 请求指定的应用程序状态</li></ul><h2 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h2><p>整体而言，PySpark作为一个大数据工具，性能是杠杠的，里面的方法也比较简单，可常用的SQL、Python相关方法联系都比较紧密，使用成本并不高。</p><p>spark上的MLlib（对scala）模块和ML（对python）模块对大数据机器学习而言是不过的选择，只是在模型选择上相对稀缺，而且不易自定义一些模型。同样，对于Graphx也是如此。至于深度学习，虽然有tensorDataFrame，但是咋生产环境上不建议使用，如果真要用深度学习，还是用深度学习原生框架会比较好。</p><p>总之，spark处理大数据是非常有优势的，但是过多、过细、过于复杂的数据还是尽量不要在上面进行，毕竟在非常大的数据上使用非常复杂的模型也得不偿失。</p><p>reference：<a href="https://github.com/drabastomek/learningPySpark">learningPySpark</a></p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> DS&amp;DM </category>
          
      </categories>
      
      
        <tags>
            
            <tag> spark </tag>
            
            <tag> pyspark </tag>
            
            <tag> 大数据 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo+Github搭建博客</title>
      <link href="2020/10/26/hexo-github-da-jian-bo-ke/"/>
      <url>2020/10/26/hexo-github-da-jian-bo-ke/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>现在写文章、写博客的地方这么多，为什么要自己搭建一个，还是希望有一个自己的自留地。</p><p>本来想自己完全写一个博客网站，但是苦于自己对前端的了解着实不深，而且后续也没有深入研究前端知识的计划，外加对网站自维护成本的担忧，最后选择了Hexo+Github的框架搭建博客。</p><p>网上有很多使用Hexo+Github搭建博客的教程，其实已经比较丰富了，为了供后续参考，也在这里记录一下自己的搭建过程。</p><p>Hexo是一个基于Node.js的静态站点生成框架，基于Hexo，我们可以直接用Markdown（对于我来说，现在写东西都用Markdown，感觉再也回不去Office Word了）来写博客。写完后通过三、四条命令就可以更新到博客上，专注在内容上，避免重复造轮子。</p><p>常用命令：</p><pre class="line-numbers language-shell"><code class="language-shell">hexo clean  # 清楚缓存文件hexo g  # 生成静态文件 hexo generatehexo s  # 启动本地服务预览 hexo serverhexo d  # 上传到github部署 hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>更多命令见：<a href="https://hexo.io/zh-cn/docs/commands.html">Hexo指令</a></p><h2 id="主要步骤"><a href="#主要步骤" class="headerlink" title="主要步骤"></a>主要步骤</h2><ul><li>安装Node.js</li><li>安装Git</li><li>Github上创建博客项目</li><li>安装Hexo</li><li>github与本地绑定</li><li>绑定域名</li><li>创建文章</li><li>个性化设置（Theme matery）</li></ul><h2 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h2><p>mac上可以直接通过homebrew安装，可以通过<code>brew -v</code>看自己使用已经安装homebrew，如果没有安装可以在命令行执行以下命令安装。</p><pre class="line-numbers language-shell"><code class="language-shell">ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)" <span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>执行命令安装Node.js</p><pre class="line-numbers language-shell"><code class="language-shell">brew link nodebrew uninstall nodebrew install node<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>也可以在 <a href="https://nodejs.org/en/#download">Node.js官网</a> 下载安装。</p><p>如果执行<code>npm -v</code>和<code>node -v</code>能看到版本号，则说明安装成功。</p><p>由于npm服务器在国外，如果没有梯子，在国内访问经常会超时，可以使用梯子，或者使用国内镜像，比如阿里、清华的镜像都挺好用，比如阿里镜像</p><pre class="line-numbers language-shell"><code class="language-shell">npm config set registry https://registry.npm.taobao.org  # 或 npm install -g cnpm --registry=https://registry.npm.taobao.org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="安装Git"><a href="#安装Git" class="headerlink" title="安装Git"></a>安装Git</h2><p>安装git主要是为了本地文件与github文件同步，可以通过brew安装</p><pre class="line-numbers language-shell"><code class="language-shell">brew install git<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>也可以在<a href="https://git-scm.com/download/win">Git网站</a>下载安装。</p><h2 id="Github上创建博客项目"><a href="#Github上创建博客项目" class="headerlink" title="Github上创建博客项目"></a>Github上创建博客项目</h2><p>首先需要一个github账号，这对于很多程序员来说或许都有。打开打开<a href="https://github.com/%E6%96%B0%E5%BB%BA%E4%B8%80%E4%B8%AA%E9%A1%B9%E7%9B%AE">https://github.com/新建一个项目</a></p><p><img src="image-20201025172701362.png"></p><p><strong>注：名字一定要和github名字一样，要以<code>.github.io</code>为后缀</strong>。</p><p><img src="image-20201025173105081.png"></p><p>创建好以后点击<code>Settings -&gt; GitHub Pages -&gt; Choose a theme</code>，选择一个主题。</p><p><img src="image-20201025173608226.png"></p><p>点击上面那个链接，就会有如下这样一个页面。</p><p><img src="image-20201025173650071.png"></p><p>到这里，博客网站算是正式成功了。</p><h2 id="安装Hexo"><a href="#安装Hexo" class="headerlink" title="安装Hexo"></a>安装Hexo</h2><p>博客页面搭建成功后，现在在本地建一个写博客的文件夹，<code>cd</code>到该目录下安装 Hexo。</p><pre class="line-numbers language-shell"><code class="language-shell">npm i hexo-cli -g<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>安装完后运运行 <code>hexo -v</code>如果打印版本号则说明安装成功了。</p><p>接下来初始化文件夹和安装必备的插件。</p><pre class="line-numbers language-shell"><code class="language-shell">hexo initnpm install<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p><img src="image-20201025174129296.png"></p><p>然后按照最开始说的命令生成静态文件和本地预览</p><pre class="line-numbers language-shell"><code class="language-shell">hexo g && hexo s<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时打开<a href="http://localhost:4000/%E5%BA%94%E8%AF%A5%E5%B0%B1%E6%9C%89%E6%95%88%E6%9E%9C%E4%BA%86">http://localhost:4000/应该就有效果了</a></p><p><img src="image-20201025174451649.png"></p><h2 id="github与本地绑定"><a href="#github与本地绑定" class="headerlink" title="github与本地绑定"></a>github与本地绑定</h2><p>如果以前在github上同步过文件，忽略这一步。</p><p>在命令行输入github用户名和邮箱。</p><pre class="line-numbers language-shell"><code class="language-shell">git config --global user.name "booleqin"git config --global user.email "booleqin@gmail.com"<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>然后生成密钥SSH key</p><pre class="line-numbers language-shell"><code class="language-shell">ssh-keygen -t rsa -C "booleqin@gmail.com"<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后</p><pre class="line-numbers language-shell"><code class="language-shell">cat ~/.ssh/id_rsa.pub<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>在github上<code>右上角头像-&gt;Settings -&gt; SSH and GPG keys</code>新建一个SSH。</p><p>把刚才cat出阿里的内容复制到这里。</p><p><img src="image-20201025175335846.png"></p><p>本地命令行输入</p><pre class="line-numbers language-shell"><code class="language-shell">ssh -T git@github.com<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>如果看到下图，则说明成功了</p><p><img src="image-20201025175617954.png"></p><p>现在开始配置hexo对应到github项目地址，打开<code>_config.yml</code>（这个文件在配置博客的时候经常会用到）。</p><pre class="line-numbers language-shell"><code class="language-shell">deploy:  type: 'git'  repository: https://github.com/booleqin/booleqin.github.io  branch: main<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="绑定域名"><a href="#绑定域名" class="headerlink" title="绑定域名"></a>绑定域名</h2><p>申请好自己的域名，我是在百度智能云上申请的，需要实名以后才能用，官方说法是实名申请3-5个工作日可以通过，但是我提交后几个小时就通过了，很方便。</p><p>添加域名解析，添加如下两条信息，如下图</p><p><img src="baiduyumin.png"></p><p>然后在github项目的<code>Settings -&gt; Custom domain</code>里面填上自己的域名保存就可以了。</p><p>保存后在项目的根目录下会会生成一个CNAME文件（记住，这是github项目上已经有，但是本地还没有，可以把项目pull到本地），或者本地hexo根目录创建一个CNAME（注意没有任何后缀），如果本地不建这个文件，下次<code>hexo d</code>，访问网站会报404。</p><h2 id="创建文章"><a href="#创建文章" class="headerlink" title="创建文章"></a>创建文章</h2><p>创建文章一共有三个post、draft、page三种</p><table><thead><tr><th>参数</th><th>功能</th><th>路径</th></tr></thead><tbody><tr><td>post</td><td>新建文章</td><td>/source/_posts/</td></tr><tr><td>draft</td><td>新建草稿</td><td>/source/_drafts/</td></tr><tr><td>page</td><td>新建页面（标签页，分类页等）</td><td>/source/</td></tr></tbody></table><p>如果用post使用下面命令</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new post <article><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><code>source/_posts/</code>文件夹中多了一个<code>article.md</code>文件</p><p>draft可使用如下命令</p><pre class="line-numbers language-shell"><code class="language-shell">hexo new draft <article><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>Hexo 另外提供 <code>draft</code> 机制，它的原理是新文章将建立在 <code>source/_drafts</code> 目录下，因此 <code>hexo generate</code> 并不会将其编译到 <code>public</code> 目录下，所以 <code>hexo deploy</code> 也不会将其部署到 GitHub。</p><p>虽然 <code>hexo generate</code> 不会编译 <code>source/_drafts</code> 目录下的文章，但 Hexo 的 <code>Hexo server</code> 另外提供 <code>--draft</code> 参数，只要搭配 <code>hexo-browsersync</code> plugins，就可以达到一边编辑 <code>markdown</code> 文章，一边使用浏览器预览的目的。</p><pre class="line-numbers language-shell"><code class="language-shell">hexo S --draft# 将草稿发布为正式文章（其实就是移动了文件和相应文件夹）hexo P <filename><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>如果有图片文件，可以修改一下根目录下<code>_config.yml</code>,这样就会创建一个article同名的文件夹，用于存放图片等。</p><pre class="line-numbers language-shell"><code class="language-shell">post_asset_folder: true<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>但是当我们写博客越来越多的时候，所有文章都在一个目录下，会非常不易管理，所以可以考虑按年归档（按月、天归档类似）。</p><p>打开根目录下<code>_config.yml</code>，可以修改如下配置。</p><pre class="line-numbers language-shell"><code class="language-shell">new_post_name: :year/:title.md<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>然后修改文章模版，再<code>scaffolds/post.md</code>增加 <code>permalink</code>一项</p><pre class="line-numbers language-shell"><code class="language-shell">---title: &#123;&#123; title &#125;&#125;permalink: &#123;&#123; title &#125;&#125;date: &#123;&#123; date &#125;&#125;tags:categories:---<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>如此编写完成后，运行<code>hexo g</code>生成静态文件，<code>hexo s</code>本地预览，<code>hexo d</code>更新到github，主页就能看到文章了。</p><h2 id="个性化设置（Theme-matery）"><a href="#个性化设置（Theme-matery）" class="headerlink" title="个性化设置（Theme matery）"></a>个性化设置（Theme matery）</h2><p>我使用的是 <a href="https://github.com/blinkfox/hexo-theme-matery">hexo-theme-matery</a> 主题，个人感觉简单大气，如果你想要更多主题，可以在 <a href="https://hexo.voxel.site/">Hexo 主题</a> 获取更多主题。</p><p>主题配置文档非常详细，有需要随时改。</p><p>完～</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello-World</title>
      <link href="2020/10/25/hello-world/"/>
      <url>2020/10/25/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> github </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
